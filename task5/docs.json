{
    "doc_1": {
        "url": "https://habr.com/ru/post/149179/",
        "title": "Как, зная только имя и email человека, злоумышленники получили доступ ко всем его аккаунтам и удаленно уничтожили информацию на всех его устройствах",
        "text": "Очень интересная статья появилась сегодня на wired.com. Буквально за один час у автора статьи Мэта Хонана были взломаны Amazon, GMail, Apple и Twitter аккаунты и была удаленно уничтожена информация на его iPad, iPhone и MacBook. Среди прочего он потерял все фотографии своей дочки с ее рождения, многие документы и большую часть переписки. Очень интересно в этой истории то, как злоумышленник получил доступ к Amazon аккаунту и AppleID — для этого не понадобилась ничего, кроме доступной в сети информации и телефона.Злоумышленнику приглянулся трехбуквенный Twitter Мэта. С целью заполучить его, он провел небольшое исследование, в ходе которого обнаружил, что Twitter аккаунт Мэта содержал ссылку на его личный сайт, который, в свою очередь, содержал его GMail адрес. Имея GMail адрес, злоумышленник начал процесс восстановления пароля. Так как двухступенчатая авторизация у Мэта включена не была, гугл на первом экране восстановления пароля предоставил любезно обфусцированный альтернативный адрес: m****n@me.com. Сопоставив этот паттерн с gmail-адресом mhonan@gmail.com, злоумышленник получил Apple-овский email автора.Первое, что было необходимо злоумышленнику для того, чтобы приступить к интересной части, это адрес Мэта, который легко обнаружился WhoIs сервисом в информации о его личном сайте. Имея адрес, злоумышленник позвонил в Амазон и сказал, что он владелец аккаунта и хочет добавить новую кредитную карту. Чтобы проверить, что злоумышленник действительно владелец аккаунта, Амазон спросил адрес, имя и email — вся эта информация у злоумышленника уже была, и он успешно ввел номер несуществующей кредитной карты, заблаговременно сгенерированный на одном из специализированных сайтов.Затем он позвонил в Amazon опять, и сказал, что потерял доступ к своему Amazon аккаунту. Amazon попросил имя, адрес и номер кредитной карты. После предоставления этой информации (добавленный на предыдущем шаге номер кредитной карты подошел), злоумышленник смог добавить новый email адрес к аккаунту, на который восстановил пароль. В амазон аккаунте можно посмотреть список сохраненных кредиток, где, в целях безопасности, показываются только последние четыре цифры номера.Затем злоумышленник звонит в AppleCare, где его спрашивают имя, адрес и последние четыре цифры кредитной карты, и выдают ему временный пароль на .me аккаунт. На этот аккаунт злоумышленник восстанавливает пароль от GMail, а на GMail пароль от Twitter. Используя AppleId он также удаляет всю информацию с iPhone, iPad и MacBook используя сервисы Find My Phone и Find My Mac. Печальный конец истории.Позже Мэт связался с Apple, где ему сказали, что в данном конкретном случае внутренний регламент не был соблюден в полной мере, и что Apple относится к безопасности пользователей очень серьезно. Амазону тоже был отправлен запрос от Wired, но пока что ответа не последовало.Сегодня, спустя три дня после того, как все это произошло, ребята из Wired за несколько минут смогли целиком повторить весь фокус дважды — от адреса и имени до доступа к Amazon и Apple аккаунтам со всеми вытекающими последствиями."
    },
    "doc_2": {
        "url": "https://habr.com/ru/post/110395/",
        "title": "Как я наказал Firaxis или история о том, как перебрать бинарный движок через глушитель",
        "text": "Речь пойдёт о далёком 2005 году, когда только-только вышла Civilization4 от Sid Meier. К тому времени я плотно висел в Civilization3, прошёл её раз дцать на самых разных картах, и тут вышла долгожданная четвёрка. Это были годы P3-512Mb для mid-end и P4-1Gb в hi-end. Только топовые конфиги в те годы имели два гига памяти на борту.Civilization 4 вышла с графикой уровня года 2002-2003го, что в принципе нормально для мэинстрима тех времён, особенно учитывая что это пошаговая стратегия, а не шутер. Но жрала с течением игры до 900Mb оперативки, что приводило к жуткому свопу, особенно на больших картах, особенно к концу игры, особенно на ноутбуках. Народ недоумевал, я тоже. Учитывая, что в те же годы вышел Far Cry с куда более красивой графикой, и который вполне игрался на максимуме даже с 512Mb на борту, такое поведение Civilization 4 выглядело крайне странным. Захотелось разобраться и покарать…Итак, я начал ковыряться. Первое подозрение пало на Python, т.к. Firaxis упоминала о его использовании как важной фиче на каждом шагу, а там и сборщики мусора, и неосвобождение памяти после пиковых нагрузок, и много разного веселья происходит. Это был кандидат номер один на обвинение в прожорливости. Был скачан исходник питоновской dll, в ней было добавлено логирование всех выделений памяти, dll была подсунута цивилизации вместо родной и… ничего интересного не проявилось. На питон уходило дай бог 25Mb памяти. Что-то другое драконовски поедало ресурсы.Закралась идея утечки памяти в обычных C-шных выделялках памяти. Так как использовалась CRT (C runtime library) в DLL, был повешен ala-detours хук на все вызовы malloc, realloc, free и… тоже с нулевым результатом. Следом подумалось, что причиной всему фрагментация памяти на частых перевыделениях, может даже по вине питона. Написал свой менеджер, выделяющий всегда объём, кратный степени 2 — без толку. Цивилизация как ела по 800Mb, так и продролжала их жрать. Я немного впал в ступор — куда это девается столько памяти.Повесил API хуки на все VirtualAlloc, с вычислениям CS:EIP caller'а, чтобы узнать civ4.exe или python24.dll выделяет большую часть адресного пространства. И тут выяснилось, что съедает её d3d9.dll. Это уже стало интересней, с чего бы это ему жрать ресурсы, если всё (или почти всё) должно лежать в видеопамяти. После этого я начал хучить DirectX'овые вызовы — начиная от создания девайса, и вплоть до создания текстур, вершинных и индексных буферов.При изучении, что и как делает Civilization4 выяснилось, что некоторую часть ресурсов она держит в D3DPOOL_DEFAULT (позже выяснилось что это были ресурсы графического интерфейса, написанного сторонней компанией Scaleform, эти ребята сейчас неплохо развились, т.к. их продуктами пользуются даже чуваки из CryTek). Всё остальное Civilization4 хранила в MANAGED пуле, оно и жрало по 500mb памяти.Небольшое отступление по поводу MANAGED и DEFAULT пула для ресурсов в DirectX. Видеопамять может использоваться сразу несколькими приложениями, и наличие или отсутствие в ней нужной текстуры или вершинного/индексного буфера является критичным для способности что-то нарисовать. В случае DEFAULT пула в случае вытеснения видеоресурсов одного процесса другим, видеопамять тупо затирается, а последующие операции отрисовки с использованием потерянной области возвращают ошибку, мол «объект утерян». Реакцией на такую потерю должно быть восстановление объекта путём перечитывания текстуры с диска и пересозданием текстуры в видеопамяти.В случае MANAGED пула механизм примерно такой же, но все текстуры и остальные ресурсы кэшируются DirectX'ом в оперативной памяти, делая реакцию на ошибки прозрачной — он сам восстановит копию в видеопамяти из оперативки в случае её затёртости другими программами, по аналогии как для обычной памяти «бэкапом» выступает своп-файл. Это упрощает жизнь программисту, так как ему больше не надо заботиться о перечитывании видеообъектов во время цикла отрисовки, но неправданно увеличивает потребление оперативной памяти, особенно когда игра большую часть времени находится на переднем плане, ни с кем её не делит и если видеопамяти хватает с избытком.Аналогия с обычной памятью и жёстким диском, к сожалению, до конца не работает. Объём жёсткого диска обычно раз в 100 больше объёма набортной памяти, поэтому нет ничего страшного в том, чтобы размер своп-файла равнялся объёму RAM. Соотношение же RAM и VIDEOMEM обычно порядка 4/1, а не 100/1. Поэтому MANAGED — это не продакшн решение, а скорее режим для ленивых, уместный для мелочей, которые много не весят. Если пихать всё подряд в MANAGED, будет как на картинке:Все серьёзные движки работают с DEFAULT пулом, используя перечитывание объектов с диска или в крайнем случае используя своё кэширование в оперативной памяти, но только не MANAGED пул. Собственно, способность корректно обрабатывать ситуацию потери ресурсов при работе с DEFAULT пулом и является причиной (не)дружелбности игр к Alt-Tab.Сначала через хуки на создание объектов я попробовал перевести всё в DEFAULT пул. Картинка посыпалась. Сначала не понял, в чём дело, потом сразу дошло… естественно 500Mb ни в какую видеопамять не влезет (в те годы топовые видяшки имели по 256Mb на борту). Стало понятно, почему они заюзали MANAGED пул — в видеопамять не влазили даже собственные графические объекты, даже не говоря о конкуренции за видеопамять с другими процессами при alt-tab!Так же стало понятно почему своп никогда не утихал. В случае избытка видеопамяти managed часть из оперативки постепенно съехала бы в своп, вытесняясь реально используемыми страницами, и тормоза бы исчезли. Hо этого не происходило, потому что к этому managed кэшу постоянно шло обращение. В общем, понятно было всё. Коме одного. Far Cry хватало 512Mb RAM и 128Mb video без какого-то жуткого свопа. И это с той графикой! Civ4, если её перенести в наше время, имела графику уровня 2005го года при требовании 5Gb оперативки.Попытка найти утечку памяти уже на уровне DirectX тоже не привела к каким-то результатам. Гружу ранние сейвы — потребление памяти небольшое. Гружу поздние сейвы — потребление памяти бешеное. Если что и течёт, то это течёт и в сейвы — такую утечку я без сорса точно не отслежу. Начинаю исходить из гипотезы, что где-то что-то создаётся впустую… начинаю проверять текстуры как самые увесистые.Проверка текстур привела к очередной неожиданности. Их было что-то около 50Mb на low и что-то около 120Mb на high. Куда же делись остальные 400mb? Начинаю логировать вообще всё что вызывается через Direct3D и нахожу… 400 мегабайт vertex buffer'ов! Vertex buffer — это данные о геометрии, трёхмерные модели юнитов, городов и ландшафта. В голову начинают лезть нехорошие мысли, что они прорисовали анимацию всех юнитов покадрово, и ничего с этим не сделать… для успокоения совести сортирую потребление памяти vertex buffer'ами по FVF (формат вершины — что в ней есть, а чего нет, к примеру координаты, освещённость, привязка к текстурам и т.п.). Находится несколько разновидностей вершинных буферов, все они много не едят, кроме одного, который жрёт аж 280Mb.Как выяснить что это за буфер? При заполнении данных что текстур, что вершинных буферов делается сначала Lock, потом идёт заполнение данных, потом делается unlock. Туда и впаиваюсь — в unlock. Перед анлоком подмешиваю случайные величины в кооррдинаты вершин, и наблюдаю что поменялось. Ожидаю что у солдат начнут дёргаться руки-ноги. А вот хрен… земля поплыла! И тут на меня снисходит прозрение, почему оно тормозит к концу игры и чем больше карта, тем тормоза сильнее. Дело вовсе не в количестве разновидностей юнитов на карте. Дело в количестве обозримых тайлов карты! Ландшафт для каждой клетки игрового мира учитывает все близлежащие горы, реки, моря, типы поверхности (песок, трава, снег), и, таким образом, получается что на каждую клетку ландшафта влияют несколько соседних, что и затрудняет подготовить заранее все возможные геометрические конфигурации тайлов.Но я не верил, что этих разных конфигураций действительно столько, сколько клеток на карте, общие обязательно должны были найтись, как минимум в воде и на равнинах. Естественно, не имея исходников, грамотно я эту классификацию сделать не мог, поэтому решил захэшировать все эти буфера. Ситуация осложнялась еще тем, что периодически происходила генерация новых тайлов, т.е. хэширование должно было быть достаточно шустрым.В качестве хэша была выбрано представление данных vertex buffer'а по основанию 5 на исходных байтах как цифрах. Это хорошо перемешало входные данные без коллизий, потому что 5 — простое число и не степень двойки и потому что умножение на 5 в процессоре реализуется как LEA EAX, [EAX*4+EAX], что шустро считается. Сам хэш был воткнут на тот же Unlock() vertex buffer'а. При unlock'е искался идентичный vertex buffer в хэшируемом кэше, и если он находился, данные анлокнутого буфера удалялись, а при рисовании через DrawIndexedPrimitive вместо моего IDirect3DVertexBuffer, который я подсовывал civ4.exe, использовался реальный буфер с закэшированными данными, один на все подобные буфера.Пол дня я эту корягу писал из C++ шаблонов вперемешку с ассемблерными вставками и перехватом COM вызовов через detours хуки (патч vtbl почему-то не сработал), потом запустил… Вах! — потребление памяти снизилось с 800Mb до 300-400Mb! По меркам 2010го года — это равносильно снижению потребления памяти с 4х гигов до полутора.Я наконец-то смог завершить начатую партию, не допивая чашку чая в течение каждого хода из-за дикого свопа. Выложил патч на civfanatics.com, народ был в восторге (link). 150k скачиваний в первые дни только с civfanatics, и патч был перевыложен на самых разных fan сайтах. Что я тогда испытал — словами тяжело описать… это был кайф! наконец-то удалось исправить эту серьёзную проблему, без сорса, да еще и являющуюся не банальной утечкой памяти, а серьёзным архитектурным изъяном. Firaxis несколько месяцев не мог повторить сей подвих, даже с собственным кодом на руках. Публичная порка за lame coding удалась на славу.P.S: Как обстоят дела в Civilization 5, не смотрел.P.P.S: Пока проходил StarCraft 2, не мог не сравнивать графику / потребление-памяти с Crysis. К счастью для моего сна и, возможно, для Blizzard, в ноутбуке оказалось 4Gb оперативки. Поэтому неоправданное поедание памяти SC2 вызвало недоумение, а не своп. Попадись он мне на 2Gb железке, пришлось бы взяться за старое :)"
    },
    "doc_3": {
        "url": "https://habr.com/ru/post/541076/",
        "title": "Как молодой девушке уехать на Яндекс.Такси в лес и пропасть без вести",
        "text": "Любой человек может оказаться в неприятной ситуации когда он едет ночью, в лес, в багажнике... Предусмотрительные граждане пытаются избежать подобных инцидентов выбирая сервисы такси известных брендов, которые декларируют безопасность поездки, контроль за водителями и даже вешают в приложении огромную кнопку \"БЕЗОПАСНОСТЬ\" которую надо жать в случае если что-то пошло не так. Но помогает ли эта кнопка? Давайте проверим на практике. Дано: молодая симпатичная девушка и её кнопочный телефон (без навигатора), незнакомый город бывшей союзной республики, зима, метель, мороз.Требуется: добраться из частного сектора на окраине в центр, путь пролегает мимо промзон, лесопарков. Решение (казалось бы очевидное): берём смартфон с сервисом ЯндексGO у супруга, заказываем ЯндексТакси, садимся и едем. Счастливый супруг тем временем наблюдает онлайн, как машина везёт пассажира по адресу... Ой, никто уже никого никуда не везёт. \"Вы приехали\" сообщает приложение. \"Как всё прошло?\"\"Стоимость поездки изменилась, заказ завершён не в указанной ранее точке.\" - вот тут наступает некоторая, так скажем, паника. Особенно на фоне новостей про онанистов из сервиса такси. Звонок супруге (не дословно):\"Ты где?! Уже приехала?\"\"Нет, ещё еду.\"\"Странно, мне показывает что поездка завершилась досрочно... Что за окном? Уже город?\"\"Нет, поля.\" (путь вполне может пролегать мимо лесополосы, полей, промзоны)\"Ок, как приедешь - позвони сразу. Что-то странное твориться, будь осторожна.\"\"Хорошо.\"Что делать? По логике - надо узнать где машина, причём быстро. На смартфоне - только маршрут который машина проехала до \"отключения\" поездки. А далее - перекрёсток, там можно свернуть или в сторону города (лес, поля вокруг) или в лес и поля подальше от города. Расспрашивать по телефону супругу  - водитель, в случае если задумал что-то неправомерное, может \"ускориться\" в своих действиях. Просить её покинуть машину ввиду непонятности ситуации - см. выше, плюс неопределённость в местоположении с поправкой на погоду, замёрзнуть на обочине в незнакомом месте не очень приятно наверное. Пытаемся воспользоваться пресловутой кнопкой \"Безопасность\" которая вроде бы должна помочь в такой ситуации. По быстрому описываем вкратце ситуацию в чате \"команде безопасности\" и... получаем отфутболивание к службе поддержки которая \"ответит в ближайшее время\". Ответа по существу - не получаем. Где машина в данный момент и двигается ли она к адресу в центре города, куда была заказана поездка, или в сторону противоположную - не говорят.И вот тут приходит осознание, что если водитель решил вывезти вас в лес, то кнопка \"Безопасность\" не поможет когда водитель попросту нажал \"Завершить поездку\". Только ваш труп в холодном зимнем лесу получит через пару часов от службы поддержки сообщение, что водитель плохо поступил и его отключат от сервиса если он сделает ещё пару раз так же.  В этот раз всё обошлось, водитель просто решил сэкономить на комиссии сервиса и положить лишний рубль себе в карман завершив поездку досрочно. Я даже, в какой-то мере, благодарен ему за такой поступок, ведь он помог вскрыть важную уязвимость сервиса агрегатора Яндекс.Такси и показал, что служба обеспечивающая безопасность пассажиров - бессильна перед банальным завершением поездки и не может ничем помочь клиенту оказавшемуся в подобной ситуации. Ну а водитель, решив позабавиться с пассажиром и поиграть в маньяка, может просто нажать кнопку в приложении и никто не узнает какая точка была финальной в жизненном пути неудачника решившего прокатиться на ЯндексТакси. "
    },
    "doc_4": {
        "url": "https://habr.com/ru/post/206900/",
        "title": "Безопасен ли Telegram? Или как я искал закладку в MTProto",
        "text": "Telegram — мессенджер для смартфонов позиционирующий себя как безопасный, защищающий не только от злоумышленников, но и от гос. структур вроде АНБ. Для достижения этой безопасности Telegram использует собственную разработку — криптографический протокол MTProto, в надежности которого сомневаются многие, сомневаюсь и я.После объявления награды за дешифрацию сообщений я попытался разобраться в MTProto. То, что дешифровать некий набор байтов невозможно (по крайней мере очень сложно) понятно сразу, но прослушка трафика мессенджера не единственный вид атаки.Первой мыслью была возможность MITM-атаки (человек посередине) и я пошел читать api протокола. Где выяснилось, что тут защита достаточно надежная: в момент первого запуска клиента создается авторизационный ключ, создается он непосредственно на клиентском устройстве с помощью протокола обмена ключами Диффи-Хелмана, но с небольшим отличием — открытый ключ сервера Telegram уже прошит в коде клиента, что исключает его подмену третьими лицами.После я установил клиент, ввел номер телефона и больше всего меня удивило то, что мне не нужно вводить паролей, вместо этого на телефон приходит смс с одноразовым пятизначным ключом подтверждения номера. Я взял второй телефон, установил клиент, ввел тот же номер что и в первый раз, так же пришло пятизначное число, которое я ввел на телефоне №2 и успешно авторизовался. Т.е. вот и первая уязвимость. В Telegram накрутили множество алгоритмов, исключили возможность перехвата и подмены трафика, а про банальный пароль забыли. Злоумышленнику не нужно слушать трафик мессенджера, а всего лишь нужно перехватить смс и доступ получен без проблем. Идем дальше. В Telegram существуют чаты с end-to-end шифрованием, когда ключ известен только собеседникам, на нем и шифруются сообщения. Этот ключ получается все тем же алгоритмом Диффи-Хелмана. Многие пользователи мессенджера требуют дать возможность обмениваться открытыми ключами через NFC и QR-коды, чтобы на 100% исключить возможность MITM-атак, в том числе и со стороны сервера Telegram. Сотрудники Digital Fortress (компания разработавшая мессенджер) утверждают, что такой функционал излишен (что уже подозрительно), а убедиться в том, что никто не подменил публичные ключи сгенерированные собеседником можно сравнив визуализацию ключа (в виде картинки). И тут есть парочка но:После логаута одного из собеседников ключ для чата будет перегенерирован, а проверить то, что я имею тот же ключ что и собеседник я могу только посмотрев в его телефон глазами. Зачем мне шифрованный чат если собеседник в метре от меня?Я заглянул в api защищенных чатов. И мой глаз зацепился вот за этот псевдокод:Это код получения общего ключа по алгоритму DH, почти. Напомню что оригинальный алгоритм DH имеет видПеременные в выражениях:key – секретный ключ используемый для шифрования трафика,g_b – открытый ключ собеседника,a – Ваш закрытый ключ,dh_prime – открытое простое число,nonce – “случайная”, полученная от сервера Telegram, последовательность для вычисления ключа.Вопрос! Зачем такая модификация в алгоритме? Если nonce – одинаковая последовательность для обоих клиентов, то она просто вывернет ключ на изнанку не сделав его безопаснее. А вот если она разная то сервер Telegram может подобрать такую nonce, при которой ключи пользователей совпадут даже при MITM-атаке и никто не будет знать, что его слушают. И даже если nonce совпадает для 2х собеседников сегодня, нет никаких гарантий что nonce будет совпадать завтра, когда в офис Digital Fortress придет АНБ / ФСБ / другая не хорошая организация. Для разъяснений обратимся к Алисе и Бобу. Атака может проходить так:Алиса начинает секретный чат с Бобом и об этом сообщает серверу Telegram. Сервер выдает Алисе открытое простое число (p) и первообразный корень по модулю р (g). Алиса генерирует свой закрытый ключ (a) и на его основе открытый ключ (A) который передает серверу.Сервер генерирует собственные ключи (t и T) и передает T Бобу под видом открытого ключа Алисы. Вместе с T он передает g, p и случайную последовательность (b_nonce). Боб аналогично генерирует ключи (b, B) и вычисляет секретный ключ (s). Серверу он возвращает свой открытый ключ (B).Сервер вычисляет s и на его основе совсем не случайную последовательность (a_nonce), передает T под видом открытого ключа Боба и a_nonce под видом случайной последовательности.Алиса вычисляет секретный ключ который равен и ключу у Боба и ключу у сервераБоб смотрит на визуализацию ключа в телефоне Алисы и увидев тот же ключ что и у себя без подозрений пользуется сервисом. А Telegram копит длинные логи без каких-либо препятствий.Так стоит ли пользоваться? Если Вам нужен простой быстрый чат, Telegram – отличное приложение. Если Вы параноик, то пользоваться не следует однозначно. Потому что даже если я ошибся и написал полную ересь Telegram знает о Вас все: номер телефона, контакты, смс сообщения, местоположение, с кем и когда вы общаетесь. Обратите внимание на список разрешений для приложения. Т.е. мое мнение Telegram – быстрый, удобный, но нисколько не приватный чат. UPD: История закончилась хорошо. Уязвимость исправлена, документация и приложения обновлены, искатели сокровищ багов мотивированы, что уже дало плоды (1, 2). Нужно отдать должное разработчикам Telegram-а, моментально отреагировавшим на статью."
    },
    "doc_5": {
        "url": "https://habr.com/ru/post/465355/",
        "title": "Когда 'a' не равно 'а'. По следам одного взлома",
        "text": "Пренеприятнейшая история случилась с одним моим знакомым. Но насколько она оказалась неприятной для Михаила, настолько же занимательной для меня.Надо сказать, что приятель мой вполне себе UNIX-пользователь: может сам поставить систему, установить mysql, php и сделать простейшие настройки nginx.И есть у него десяток-полтора сайтов посвященных строительным инструментам.Один из таких сайтов, посвященный бензопилам, плотненько сидит в ТОПe поисковиков. Сайт этот — некоммерческий обзорник, но кому-то поперек горла и повадились его атаковать. То DDoS, то брутфорс, то комменты напишут непотребные и шлют абузы на хостинг и в РКН. Неожиданно всё стихло и это затишье оказалось не к добру, а сайт начал постепенно покидать верхние строчки выдачи.То была присказка, дальше сама админская байка.Время близилось ко сну когда раздался звонок телефона: «Сань, ты не глянешь мой сервер? Мне кажется меня хакнули, доказать не могу, но ощущение не покидает уже третью неделю. Может мне просто пора лечиться от паранойи?»Далее пошло получасовое обсуждение которое кратко можно изложить так:почва для взлома была вполне плодородной;взломщик мог получить права суперпользователя;атака (если она имела место) была целенаправленной и именно на этот сайт;проблемные места исправлены и нужно только понять был ли факт проникновения;взлом не мог коснуться кода сайта и баз данных.Касательно последнего пункта.В мир смотрит только белый IP фронтенда. Между бакендами и фронтендом нет никакого обмена кроме http(s), пользователи/пароли разные, ключами не обменивались. На серых адресах все порты кроме 80/443 закрыты. Белые IP бакендов известны только двум пользователям, которым Михаил всецело доверяет. На фронтенде установлена Debian 9 и к моменту звонка система изолирована от мира внешним firewall'ом и остановлена.«Ok, давай доступы, — решаю отложить сон на часок. — Посмотрю своим глазом».Здесь и далее:В поисках возможного взломаЗапускаю сервер, сначала в rescue-mode. Монтирую диски, пролистываю auth-логи, history, системные логи и т.п., по возможности проверяю даты создания файлов, хотя понимаю, что нормальный взломщик «подмел» бы за собой, да и Миша уже знатно «натоптал» пока искал сам.Стартую в нормальном режиме, особо пока не понимая что искать, изучаю конфиги. В первую очередь интересует nginx так как, в общем-то, на фронтенде кроме него и нет ничего.Конфиги небольшие, хорошо структурированые в десяток файлов, просматриваю их просто cat'ом по очереди. Вроде всё чисто, но мало-ли упустил какой-то include, сделаю-ка я полный листинг:Не понял: «Где листинг-то?»К вопросу о листинге добавляется второй: «Почему такая древняя версия nginx?»К тому же система считает, что версия установлена свежее:Звоню:— Миш, ты зачем пересобирал nginx?— Окстись, я даже не знаю как это сделать!— Ok, ну, спи…Nginx однозначно пересобран и вывод листинга по \"-T\" скрыт неспроста. Сомнений во взломе уже нет и можно это просто принять и (раз уж Миша всё-равно заменил сервер новым) посчитать проблему решенной.И действительно, раз уж некто получил права root'а, то имеет смысл делать только system reinstall, а искать, что там было набедокурено бесполезно, но в этот раз любопытство победило сон. Как же узнать что от нас хотели скрыть?Попробуем оттрассировать:Просматриваем, в трассировке явно не хватает строк а-ля Ради интереса сравниваем выводыДумаю, что часть кода /src/core/nginx.cбыла приведена к виду:илипоэтому листинг по \"-T\" не отображается.Но как же посмотреть наш конфиг?Если моя мысль верна и проблема только в переменной ngx_dump_config попробуем установить её c помощью gdb, благо ключик --with-cc-opt -g присутствует и надеемся, что оптимизация -O2 нам не помешает. При этом, раз я не знаю как ngx_dump_config могла быть обработана в case 'T':, не будем вызывать этот блок, а установим её используя case 't':Почему можно задействовать '-t' наравне с '-T'Обработка блока if(ngx_dump_config) происходит внутри if(ngx_test_config):Конечно, если код изменен в этой части, а не в case 'T':, то мой способ не подойдет.Тестовый nginx.confУже решив проблему опытным путем было установлено, что для работы зловреда необходим минимальный конфиг nginx вида:Его и будем для краткости использовать в статье.Запускаем отладчикПо шагам:устанавливаем точку останова в функции main()запускаем программуизменяем значение переменной определяющей вывод конфига ngx_dump_config=1продолжаем/завершаем программуКак видим реальный конфиг отличается от нашего, выделяем из него паразитный кусок:Рассмотрим по порядку что же здесь происходит.Определяются User-Agent'ы yandex/google:Исключаются служебные страницы wordpress:И для тех, кто попал под оба вышеперечисленных условия в тексте html-страницы изменяется 'о' на 'o' и 'а' на 'a':Именно так, тонкость только в том что 'а' != 'a' так же как и 'о' != 'o':Таким образом боты поисковых систем получают вместо нормального 100%-кириллического текста модифицированный мусор разбавленный латинскими 'a' и 'o'. Не берусь рассуждать, как это влияет на SEO, но вряд ли такая буквенная мешанина позитивно скажется на позициях в выдаче.Что сказать, ребята с фантазией.СсылкиОтладка с помощью GDBgdb(1) — Linux man pagestrace(1) — Linux man pageNginx — Module ngx_http_sub_moduleО пилах, бензопилах и электропилах"
    },
    "doc_6": {
        "url": "https://habr.com/ru/post/534242/",
        "title": "Смерть MAPS.ME?",
        "text": "В ноябре 2020 года Mail.Ru Group продала картографический сервис MAPS.ME, о чем широко писала пресса, CEO MAPS.ME Евгений Лисовский на своей странице в Facebook и многие другие. Однако, всего месяц спустя \"новый стратег\" выпустил на iOS обновление, которое перечеркнуло многолетнюю историю приложения. Вместо старых технологий используется фреймворк компании Mapbox для отображения карт, а приложение начало работать исключительно плохо.UPD: Благодаря всем вам разработчики увидели проблему и откатили провальное обновление!Что же изменилось?Ключевое, это больше не offline карты! Теперь это online карты (по сути, мало чем отличающиеся от Google Maps и Apple Maps) с заявленной поддержкой offline (да-да, ровно так же, как в Google Maps). Для показа карт используется Mapbox SDK, логотип которого можно наблюдать в левом верхнем углу экрана. Я склонен думать, что и данные, которые теперь отображаются на картах, приходят с серверов Mapbox. Краткий замер показал, что размер скачанной Москвы увеличился в 4 раза (с 50 до 200Мб)!Итого, новые владельцы выкинули главный, на мой взгляд, функционал в приложении.Теперь рассмотрим на примерах. Скриншоты я делал на iPad, так как мой iPhone успел скачать обновление в выходные, а сделать downgrade там нельзя. Слева — как было, справа — как стало.Я сделал скриншоты Москвы в пределах ТТК, Бульварного кольца и в районе Кремля. Нетрудно видеть, как сильно ухудшилась детализация.Поиск и до этого не был идеальным, но он улучшался год от года и несколько раз просто спасал меня в путешествиях. Сейчас я толком не смог найти ничего из того, что я искал.Пешеходная навигация была для меня одной из ключевых фич приложения, сколько тропинок мы с ней отходили в путешествиях, и об этих тропинках не знали ни Apple Maps, ни Google Maps. Сейчас этих тропинок на карте я не наблюдаю, а UI стал монструозным, и вообще сильно напоминает Google Maps. Пропала диаграмма с перепадом высот, а при попытке использования приложение вылетело.Метки были для меня не менее важным компонентом в путешествиях. Новое приложение пытается загрузить координаты меток, но потерялись цвета, мои комментарии, их больше нельзя экспортировать и импортировать. UI стал, на мой взгляд, сильно непонятнее, впрочем, можете попробовать сами, но помните, на iOS откатиться будет уже нельзя.Список прочего исчезнувшего/сломанного функционала:Плохо работает оффлайн, не работает скачивание в фоне;Нет landscape mode;Пропали все подписки (на отключение рекламы, на путеводители);Пропали треки, которые я импортировал из KML;Исчез OSM редактор;Нельзя больше оставить отзыв на заведение и все мои отзывы пропали;Не могу восстановить свои букмарки из backup;Пропала карта метро;Пропала навигация по метро;Пропала запись и отображение недавно пройденного трека;Больше нет CarPlay;Приложение заметно тормозит, а на моем стареньком iPhone SE пользоваться стало в принципе невозможно.Что появилось?Кошелек. Как это работает? Зачем он мне нужен в моих любимых оффлайн картах? Я не понял. Пока предлагается встать в какой-то список ожидания доступа к функционалу кошелька.Что делать?Не обновлять. Но это временное решение, как только эти ребята выпустят Android-версию, то, вероятно, отключат сервера со старыми картами. А, при всем уважении к заслугам старой команды MAPS.ME, я не готов выкачать весь мир, так как это займет почти 50Гб на телефоне;Исходный код оригинального MAPS.ME до сих пор открыт (https://github.com/mapsme/omim). Лично я сделал форк, и теперь пытаюсь собрать приложение под iOS. Пока не знаю как решить проблему со скачиванием карт, собирать карты самому не очень хочется, но, похоже, придется;Ждать пока кто-нибудь выпустит в AppStore форк исходного приложения;Использовать альтернативы типа OsmAnd, который, как по мне, куда менее user friendly, чем был MAPS.ME.Зачем?В этой секции я позволю себе дать мою личную субъективную оценку произошедшего. Вопрос “зачем”, конечно, риторический, но я его задам. Mail.Ru Group, чем пахнут полученные 20 миллионов? Для вас, конечно же, ничем. Это было ваше лучшее приложение, которое было на голову выше всех остальных ваших продуктов. В нем были и недостатки и проблемы, но оно делало главное, оно было незаменимым помощником в путешествиях. Вы продали приложение людям, которые его тут же уничтожили. Я не знаю судьбы старой команды MAPS.ME, но никогда не поверю, что они к этому причастны. Ребята, посылаю вам лучи добра. Если кто-то из вас это читает, дайте знать, что с вами. Вы делали вещи, на которые, перефразируя один известный фильм “новые владельцы проекта не способны в принципе”. Оставайтесь сильными, старый MAPS.ME всегда останется в наших сердцах!"
    },
    "doc_7": {
        "url": "https://habr.com/ru/post/183374/",
        "title": "Парадокс доказательства",
        "text": "31 августа 2012 года японский математик Cинъити Мотидзуки опубликовал в интернете четыре статьи.Заголовки были непостижимы. Объём был пугающим: 512 страниц в сумме. Посыл был дерзким: он заявил, что доказал abc-гипотезу, знаменитую, соблазнительно лёгкую числовую теорию, которая десятилетиями заводила математиков в тупик.Затем Мотидзуки просто ушёл. Он не отправил свою работу в Annals of Mathematics. Он не оставил сообщение ни на одном сетевом форуме, которые часто посещают математики со всего мира. Он просто опубликовал статьи и ждал.Два дня спустя, Джордан Элленберг, профессор математики в Висконсинского университета в Мадисоне, получил почтовое оповещение от Google Scholar, сервиса, который сканирует интернет в поисках статей по указанным темам. Второго сентября Google Scholar отправил ему статьи Мотидзуки: «Это может заинтересовать вас».«А я такой: „Да, Гугл, мне это как бы интересно!“» – вспоминает Элленберг, – «Я запостил их в Фэйсбуке и в моём блоге, с пометкой: „Между прочим, похоже, что Мотидзуки доказал abc-гипотезу“».Интернет взорвался. В течение дней даже далёкие от математики СМИ подхватили историю. «Решена сложнейшая в мире математическая теория», – объявила Telegraph. «Возможный прорыв в abc-гипотезе», – немного скромнее писала New York Times.На математическом форуме MathOverflow математики со всего мира стали оспаривать и обсуждать заявление Мотидзуки. Вопрос, который быстро стал самым популярным на форуме был прост: «Кто-нибудь может объяснить философию его работы и прокомментировать почему она может пролить свет на abc-гипотезу?» – спросил Энди Путман, ассистент профессора в Университете Райса. Или, если перефразировать: «Я ничего не понял. Кто-нибудь понял?»Проблема, с которой столкнулись многие математики, сбежавшиеся к сайту Мотидзуки, была в том, что доказательство было невозможно прочесть. Первая статья под заголовком «Интер-универсальная теория Тейхмюллера 1: Построение театров Ходжа», начинается с утверждения, что цель работы в «разработке арифметической версии теории Тейхмюллера для цифровых полей ограниченных эллиптической кривой… с помощью применения теории полуграфов анабелиоидов, фробениоидов, эталь тета-функций и логарифмических оболочек».Это похоже на тарабарщину не только для обывателя. Это было тарабарщиной и для математического сообщества.«Смотря на неё, ты чувствуешь будто читаешь статью из будущего или далёкого космоса», – написал Элленберг в своём блоге.«Она очень, очень странная», – говорит профессор Колумбийского университета Йохан де Йонг, работающий в близких сферах математики.Мотидзуки создал столько математических инструментов и собрал столько несочетаемых областей математики, что его статья оказалась наполнена языком, который никто не мог понять. Она была абсолютно непривычной и абсолютно интригующей. Как профессор Мун Дучин из университета Тафтса выразила это: «Он воистину создал свой собственный мир».Должно пройти долгое время прежде чем кто-нибудь будет способен понять работу Мотидзуки, тем более оценить верность доказательства. В последующие месяцы статьи лежали камнем на плечах математического сообщества. Горстка людей подобралась к ним и начала изучать. Другие пытались, но быстро сдались. Некоторые полностью игнорировали их, предпочитая наблюдать издалека. Что же до виновника беспокойства, человека, который заявил, что решил одну из величайших проблем математики – от него не было ни звука.Столетиями математики стремились к одной цели: понять как работает вселенная и описать её. Для этой цели математика сама по себе лишь инструмент — это язык, который изобрели математики, чтобы помочь описать известное и исследовать неизвестное. История математических исследований отмечена вехами в виде теорем и гипотез. Попросту говоря, теорема — это наблюдение, которое считается истинным. Теорема Пифагора, например, говорит, что для всех прямоугольных треугольников отношение между тремя сторонами a, b и c выражается формулой a2+ b2= c2. Гипотезы это предшественники теорем — они представляют собой заявку на теорему, наблюдения, которые математики считают верными, но ещё не доказанными. Если гипотеза доказана, она становится теоремой, и когда это случается, математики празднуют и добавляют новую теорему в счёт познанной вселенной. «Суть не в том, чтобы доказать теорему», – объясняет Элленберг. – «Суть в том, чтобы понять работу вселенной и объяснить, что же, чёрт возьми, происходит».Элленберг моет посуду пока говорит со мной по телефону, и я могу слышать голос маленького ребёнка где-то на фоне. Элленберг страстно желает объяснить математику всему миру. Он ведёт математическую колонку для журнала Slate и работает над книгой «Как не быть неправым», которая должна помочь обычным людям применять математику в повседневной жизни.Звук посуды замирает, когда Элленберг объясняет, что мотивирует его и других математиков. Я представляю его жестикулирующим в воздухе мыльными руками: «Мы чувствуем существование огромной тёмной области незнания, но мы все вместе толкаем вперёд, делаем шаги чтобы сдвинуть границу».abc-гипотеза копает глубоко в темноту, достигая самих основ математики. Впервые предложенная Дэвидом Массером и Джозефом Эстерле в 1980 году, она делает наблюдение, касающееся фундаментальных отношений между сложением и умножением. Но abc-гипотеза известна не из-за своих глубоких последствий, а потому, что на поверхности она кажется довольно незамысловатой.Она начинается с простого уравнения: a + b = c. Переменные a, b, и c, которые дают гипотезе своё название, имеют ограничения. Они должны быть целыми числами, и a и b не должны иметь общих множителей, то есть, они не должны быть делимы на одно и то же простое число. Так, например, если бы a было 64, что равняется 26, то b не может быть никаким числом, которое делится на два. В этом случае b может быть 81, что является 34. Теперь a и b не разделяют общих множителей, и мы можем получить уравнение 64 + 81 = 145. Несложно придумать комбинации a и b, которые удовлетворяют условиям. Можно взять большие числа, такие как 3072 + 390625 = 393697 (3,072 = 210 x 3 и 390,625 = 58, никаких пересекающихся множителей нет), или очень маленькие, такие как 3 + 125 = 128 (125 = 5 x 5 x 5).О чём abc-гипотеза затем говорит, так это о том, что свойства a и b влияют на свойства c. Чтобы понять это наблюдение, может помочь для начала переписать эти уравнения a + b = c в версии, состоящие из простых множителей. Наше первое уравнение, 64 + 81 = 145, эквивалентно 26+ 34= 5 x 29. Наш второй пример, 3072 + 390625 = 393697 эквивалентен 210 x 3 + 58 = 393697 (простое число!) Наш последний пример 3 + 125 = 128 эквивалентен 3 + 53= 27. Первые два уравнения не похожи на третье, потому что в первых двух уравнениях у нас есть много простых множителей с левой стороны уравнения и очень мало с правой стороны уравнения. В третьем примере наоборот — с правой стороны уравнения больше простых чисел (семь) чем с левой (только четыре). Оказывается, что из всех возможных комбинаций a, b и c, третья ситуация очень редка. В сущности abc-гипотеза говорит, что когда простых множителей много с левой стороны, тогда, обычно, их будет не очень много с правой стороны уравнения. Разумеется, «много», «не очень много» и «обычно» это очень размытые слова и в формальной версии abc-гипотезы всё это выражено более точными математическими терминами. Но даже в этой упрощённой версии можно оценить последствия гипотезы. Уравнение основано на сложении, но наблюдения гипотезы говорят больше об умножении.«Она о чём-то очень, очень базовом, о тесной связи, которая соотносит свойства сложения и умножения чисел», – говорит Минхён Ким, профессор в Оксфордском университете. – «Если существует что-то новое, что можно открыть в этом направлении, то можно быть уверенным, что это очень важно».Эта идея не очевидна. Хотя математики и придумали сложение и умножение, основываясь на текущем понимании математики, нет никакой причины думать, что свойства сложения чисел могут каким-то образом влиять или затрагивать их свойства умножения. «Существует очень мало свидетельств этого», – говорит Питер Сарнак, профессор Принстонского университета, скептически относящийся к abc-гипотезе. «Я поверю только тогда, когда увижу доказательство». Но если это правда? Математики говорят, что это откроет тесные взаимоотношения между сложением и умножением, о которых раньше никто не знал. Даже скептик Сарнак признаёт это: «Если это правда, то это будет величайшим достижением».На самом деле оно будет таким великим, что автоматически раскроет многие легендарные математические загадки. Одной из них будет Великая теорема Ферма, известная математическая проблема, которая была предложена в 1637 году и решена совсем недавно в 1993 году Эндрю Уайлсом. Доказательство Уайлса принесло ему более 100000 немецких марок призовых денег (эквивалент примерно 50000 долларов в 1997), награда, которая была предложена почти на век раньше в 1908 году. Уайлс не решил последнюю теорему Ферма с помощью abc-гипотезы, он выбрал другой путь, но если бы гипотеза была верна, тогда доказательство теоремы было бы простым следствием.Благодаря своей простоте abc-гипотеза хорошо известна всем математикам. Профессор Городского университета Нью-Йорка Люсьен Шпиро говорит, что «каждый профессионал по крайней мере однажды пытался» теоретизировать на тему доказательства. Но мало кто серьёзно пытался найти его. Шпиро, чья одноимённая гипотеза является предшественником abc-гипотезы, предложил доказательство в 2007 году, но в нём скоро обнаружились проблемы. С тех пор никто не осмеливался взяться за его поиски, до появления Мотидзуки.Когда Мотидзуки опубликовал свои статьи, математическое сообщество имело много причин для энтузиазма. Они были взволнованы не потому, что кто-то заявил о доказательстве важной гипотезы, а потому, кем был этот человек.Мотидзуки славился своим выдающимся умом. Родился в Токио, затем переехал в Нью-Йорк со своими родителями, Киичи и Аннэ Мотидзуки, когда ему было 5 лет. Он покинул дом для учёбы в Академии Филлипса в Эксетере, в Нью Хэмпшире. Там он экстерном закончил учёбу через два года, в 16 лет, с отличными оценками по математике, физике, американской и европейской истории и латинскому языку.Потом Мотидзуки поступил в Принстонский университет, где снова закончил обучение раньше остальных, получил степень бакалавра в математике за три года и быстро двинулся в сторону кандидатской, которую получил в 23 года. После двух лет преподавания в Гарвардском университете он вернулся в Японию, где присоединился к исследовательскому институту математических наук в Киотском университете. В 2002 году он стал профессором в необычно молодом возрасте — 33 года. Его ранние статьи были широко признаны очень хорошими работами.Академическая удаль это не единственная характеристика, которая отличает Мотидзуки от остальных. Его друг, оксфордский профессор Минхён Ким, говорит, что самое выдающееся качество Мотидзуки это его полное сосредоточение на работе.«Даже среди множества моих знакомых математиков, он демонстрирует невероятное терпение и умение просто сидеть и заниматься математикой долгие, долгие часы», – говорит Ким.Мотидзуки и Ким встретились в начале 90-ых, когда Мотидзуки ещё учился на бакалавра в Принстоне. Ким, прибывший по обмену из Йельского университета, вспоминает, как Мотидзуки изучал работы французского математика Александра Гротендика, чьи работы по алгебраической и арифметической геометрии обязательны к прочтению для каждого математика в этой сфере.«Большинство из нас постепенно приходят к пониманию [работ Гротендика] в течении многих лет, после нескольких периодических погружений», –сказал Ким. – «Добавьте к этому тысячи и тысячи страниц».Но не Мотидзуки. «Мотидзуки… просто прочитал их от начала до конца сидя за своим столом», – вспоминает Ким. – «Он начал этот процесс, когда был ещё студентом последних курсов, и за пару лет он уже закончил».Через пару лет после возвращения в Японию Мотидзуки обратил своё внимание на abc-гипотезу. В последующие годы появились слухи о его уверенности в том, что он разгадал головоломку, а сам Мотидзуки сказал, что ожидает результатов к 2012 году. Поэтому, когда статьи появились, математическое сообщество уже ждало с нетерпением. Но потом энтузиазм пропал.«Его другие работы – они читаемы, я могу их понять и они поразительны», – говорит Де Йонг, работающий в схожей области. Прохаживаясь по своему офису в Колумбийском университете, Де Йонг качает головой, вспоминая первое впечатление от новых статей. Они были другими. Они были нечитаемы. После работы в изоляции более десяти лет, Мотидзуки построил математический язык, который только он сам может понять. Чтобы только начать разбирать четыре статьи опубликованные в августе 2012, нужно прочитать сотни, может тысячи страниц его предыдущих работ, ни одна из которых не была проверена или рецензирована. Потребовался бы по крайней мере год, чтобы прочитать и понять всё. Де Йонг уже подумывал взять отпуск и собирался потратить год на статьи Мотидзуки, но когда он увидел высоту этой горы, он спасовал.«Я решил, что я в жизни не смогу это сделать. Это сведёт меня с ума».Вскоре, разочарование сменилось гневом. Немногие профессоры были готовы открыто критиковать собрата-математика, но практически каждый человек, которого я интервьюировала, сразу отмечал, что Мотидзуки не следовал стандартам сообщества. Как правило, они говорят, математики обсуждают свои находки с коллегами. Обычно они публикуют препринты на уважаемых форумах. Потом они отправляют свои работы в Annals of Mathematics, где статьи реферируются видными математиками перед публикацией. Мотидзуки противился тренду. Он был, согласно его коллегам, «неправоверным». Но самым возмутительным был отказ Мотидзуки проводить лекции. Обычно после публикации математик проводит лекции, отправляется в различные университеты объясняя свою работу и отвечая на вопросы своих коллег. Мотидзуки отверг множество предложений. «Заметный исследовательский университет попросил его: „Приезжайте, расскажите о своих результатах“, а он ответил: „Я не смогу сделать это за одну лекцию“», – говорит Кэти ОНил, жена Де Йонга, бывший профессор математики более известный как блоггер «Mathbabe». «И они сказали: „Хорошо, оставайтесь на неделю“, а он отвечает: „Я не смогу сделать это за неделю“».«Тогда они предложили: „Оставайтесь на месяц. Оставайтесь столько, сколько вам нужно“, но он всё равно сказал нет». «Парень просто не хочет этого делать». Ким симпатизирует разочарованным коллегам, но предлагает другое объяснение обиды: «Читать чужие работы очень мучительно. И всё… Мы просто слишком ленивы, чтобы читать их». Ким старается защитить своего друга, он говорит, что немногословность Мотидзуки вызвана его «немного стеснительным характером» и усердием в работе: «Он очень много работает и действительно просто не хочет тратить время на самолёты, гостиницы и тому подобное». О’Нил, тем не менее, считает Мотидзуки ответственным, говорит, что его отказ сотрудничать ставит в неудобное положение его коллег: «Ты не можешь сказать, что доказал что-то пока ты не объяснил это», – говорит она. – «Доказательство это общественная конструкция. Если сообщество не понимает, ты не сделал свою рабооту».Сегодня математическое сообщество стоит перед дилеммой: доказательство очень важной гипотезы висит в воздухе, но никто не осмеливается притронуться к нему. На короткий момент в октябре все повернулись к выпускнику Йельского университета Весселину Димитрову, который указал на возможное противоречие в доказательстве, но Мотидзуки быстро ответил, что он учёл эту проблему. Димитров отступил и активность стихла.Шли месяцы, и общее молчание начало подвергать сомнению основное правило математических научных кругов. Дучин объясняет его так: «Доказательства верны или не верны. Общество выносит вердикт».Этот фундамент является предметом гордости математиков. Сообщество работает вместе, они не соревнуются. Коллеги проверяют работы друг друга, тратят многие часы проверяя, что всё верно. Они делают это не просто из альтруизма, это необходимо: в отличии от медицины, где ты знаешь, что прав, если пациент излечился, или в технике, где ракета либо взлетает либо нет. Теоретическая математика, более известная как «чистая» математика, не имеет физического или видимого стандарта. Она целиком основывается на логике. Чтобы знать, что ты прав, необходим кто-то ещё, желательно много других людей, кто прошёл бы по твоим следам и подтвердил, что каждый шаг был верен. Доказательство в вакууме не является доказательством. Даже неверное доказательство лучше чем его отсутствие, потому что, если идеи отличаются новизной, они ещё могут быть полезны для других проблем или могут подтолкнуть другого математика к нахождению правильного ответа. Таким образом, самый главный вопрос не в правоте Мотидзуки, гораздо важнее, выполнит ли математическое сообщество свою роль и прочитает статьи?Перспективы туманны. Шпиро является одним из немногих, кто делал попытки понять отрывки из статьи. Он проводит еженедельные семинары с учёными из Городского университета Нью-Йорка для обсуждения статьи, но он говорит, что они ограничены «местным» анализом и ещё не понимают большой картины. Единственный кандидатом остаётся Го Ямасита, коллега Мотидзуки в Киотском университете. Согласно Киму, Мотидзуки проводит частные семинары с Ямаситой, и Ким надеется, что Ямасита затем объяснит работу. Если Ямасита не справится, то неясно, кто ещё сможет осилить задачу.Пока всё, что может делать математическое сообщество это ждать. Пока они ждут, они рассказывают истории и вспоминают великие моменты в математике — год, когда Уайлс победил Великую теорему Ферма, как Перельман доказал гипотезу Пуанкаре. Колумбийский профессор Дориан Голдфелд рассказывает историю Курта Хегнера, учителя старшей школы в Берлине, который решил классическую проблему, предложенную Гауссом: «Никто не поверил в это. Все известные математики фыркнули и отвергли его». Статья Хегнера собирала пыль больше десяти лет пока наконец, спустя четыре года после его смерти, математики поняли, что Хегнер всё это время был прав. Ким вспоминает доказательство Великой теоремы Ферма, которое предложил Йоичи Мияока в 1988 году, которое получило много внимания от СМИ пока в нем не обнаружились серьёзные недостатки. «Ему было очень неловко», – вспоминает Ким.Пока они вспоминают все эти истории, Мотидзуки и его доказательства висят в воздухе. Все эти истории могут быть возможными концовками. Вопрос лишь какая?Ким остаётся одним из немногих людей, кто оптимистичен касательно будущего этого доказательства. Он планирует конференцию в Окфсордском университете в этом ноябре, и он надеется пригласить Ямаситу прийти и рассказать то, что он узнал от Мотидзуки. Возможно тогда станет известно больше. Что же до Мотидзуки, кто отверг все запросы СМИ, кто так сопротивляется распространению собственной работы, остаётся лишь гадать в курсе ли он той шумихи, которую поднял.На его сайте одна из немногих фотографий Мотидзуки, доступных в интернете, показывает человека средних лет со старомодными очками в стиле 90-ых, смотрящего вверх и куда-то в сторону, над нашими головами. Самопровозглашённый титул висит над его головой. Это не «математик», а «интер-универсальный геометр».Что это значит? Сайт не даёт подсказок. Там лишь его статьи длиной в тысячу страниц, груды плотной математики. Его резюме скромное и формальное. Он указывает своё семейное положение как «холост (не был женат)». Ещё есть страница под названием «Мысли Cинъити Мотидзуки», на которой всего лишь 17 заметок. «Я бы хотел поделиться своим прогрессом», – он пишет в феврале 2009 года. «Позвольте рассказать о моём прогрессе», октябрь 2009. «Позвольте рассказать о моём прогрессе», апрель 2010, июнь 2011, январь 2012. Затем следует математическая речь. Сложно сказать, он возбуждён, подавлен, разочарован или воодушевлён.Мотидзуки рассказывал о своём продвижении годами, но куда он идёт? Этот «интер-универсальный геометр», этот вероятный гений, возможно нашёл то, что перевернёт известную нам теорию чисел. Он, возможно, открыл новый путь в тёмное неизведанное математики. Но пока его шаги не отследить. Куда бы он ни шёл, он похоже идёт один.По слухам, за псевдонимом Сатоси Накамото, создателя Bitcoin, скрывается всё тот же Мотидзуки. Ссылки на статьи Мотидзуки: 1, 2, 3, 4"
    },
    "doc_8": {
        "url": "https://habr.com/ru/post/454078/",
        "title": "«Мобильный контент» бесплатно, без смс и регистраций. Подробности мошенничества от Мегафона",
        "text": "UPD 07: Телеграм чат для обсуждения операторов сотовой связи tg.guru/opsosruПосле того как я опубликовал статью «Как Мегафон спалился на мобильных подписках», я попытался получить комментарий от Мегафона.Ответа до сих пор нет.Но вместо этого я получил зависающий интернет. То есть в какой-то момент трафик перестаёт идти и ютубчик перестаёт играть. Так же с мобильного Мегафона совсем перестал открываться moy-m-portal.ru. На Теле2, МТС и Билайне всё стабильно. То есть Мегафон решил просто мне отомстить… Это подогрело мой интерес, чтобы раскрутить этот клубок «мобильных подписок» и поделиться с Вами своими исследованиями.Читатели указали мне на большое количество несостыковок в предыдущей статье, которые позволят оператору отбиться от жалобы в контролирующий орган.ТеорияДистанционная покупка товаров и услуг со списанием денежных средств со счёта мобильного телефона (если нет контентного счёта) регулируется п. 5 ст. 44 №126-ФЗ «О связи» и происходит всё это в офертно-акцептной форме (ст. 435-438 ГК РФ).В случае, если клиент обратился к оператору сотовой связи с просьбой о создании специального контентного счёта, то оплата услуг сторонних организаций может осуществляться только с этого счёта. Задумка была реально крутой для своего времени. То есть если я хочу заказать пиццу домой, то достаточно на сайте пиццерии выбрать пиццу, ввести адрес доставки и нажать кнопку оплатить. Средства спишутся со счёта мобильного телефона. Нет необходимости постоянно вводить реквизиты банковской карты. Практика Сейчас появились ГуглПэй и эплПэй, которые так же позволяют оплачивать в интернет магазинах. Поэтому технология wap-click уже морально устарела.Но только не для мошенников… На сегодняшний день я не нашёл легального товара или услуги, которые можно оплачивать через технологию wap-click. Как на самом деле применяется эта технология:Вы заходите на интересующий Вас сайт, на котором установлен скрипт арбитражника.Скрипт по определённому алгоритму может оставить Вас на сайте, а может переадресовать на лендинг Ознакомившись с содержимым Вы ничего не подозревая жмёте «продолжить». Лендинг перенаправляет Вас на сайт, который принадлежит сотовому оператору с картинкой схожей с предыдущей (для визуального обмана), но с другим текстом. Не читая текст жмёте «Продолжить»Вас перенаправляют на сайт с «го**оконтентом»Со счёта мобильного телефона списываются деньги. Вы негодуете, звоните в колл-центр сотового оператора и орёте. Оператор отвечает, что Вы сами согласились на эти условия и будут почти правы, потому что текст последней картинки такой:Нажатием на кнопку «Продолжить» Вы подтверждаете своё согласие с подключением подписки vsewap.ru и Условиями предоставления подписки. Стоимость подписки 35.0 руб. с учетом НДС за 1 день. Оплата производится с основного счета. Услуга предоставляется Контент-провайдером ООО Информпартнер.Так как в офертно-акцептной форме договора Вы должны выразить своё согласиест. 438 ГК РФ: Акцепт должен быть полным и безоговорочным.То есть нажатие кнопки фиксирует сам оператор сотовой связи, а не верит «на слово» контент-провайдеру.Далее оператор передаёт контент-провайдеру информацию, что Вы приняли оферту и оплатили услугу/товар.Что же здесь «нечисто»?На странице принятия оферты Мегафон применяет шаблон, который якобы подсовывает ему контент-провайдер.Согласно ст. 9 Закона «О защите прав потребителей».Изготовитель (исполнитель, продавец) обязан довести до сведения потребителя фирменное наименование (наименование) своей организации, место ее нахождения (адрес)Ни на странице оферты, ни на самом сайте Вы не найдёт место нахождения ООО Информпартнера. Да и других реквизитов вы там не найдёте.Статья 10 того же закона:1. Изготовитель (исполнитель, продавец) обязан своевременно предоставлять потребителю необходимую и достоверную информацию о товарах (работах, услугах), обеспечивающую возможность их правильного выбора.Но ни по одной ссылке Вы не увидите описания того, что Вы получите за подписку, а так же нет нигде информации о производителе контента. Эти права потребителя так же зафиксированы в Постановлении Правительства РФ от 27.09.2007 N 612 «Об утверждении Правил продажи товаров дистанционным способом».Ищем информацию о ООО Информпартнер Нам закон позволяет требовать предоставления информации о продавце и его товаре: ЗоЗППСтатья 8. Право потребителя на информацию об изготовителе (исполнителе, продавце) и о товарах (работах, услугах)1. Потребитель вправе потребовать предоставления необходимой и достоверной информации об изготовителе (исполнителе, продавце), режиме его работы и реализуемых им товарах (работах, услугах).Я позвонил по телефону службы технически поддержки ООО «Информпартнер»: 8 800 500-25-43. Вежливая девушка сообщила, что всю информацию я могу получить только отправив запрос на адрес электронной почты. Устно они такую информацию не предоставляют.Я отправил запрос на helpdesk@informpartner.com В рамках Закона получить информацию у меня не получилось…Бизнес на мобильном трафикеПосле того как я опубликовал статью «Как Мегафон спалился на мобильных подписках» со мной связался владелец сайта, который перекинул меня на лендинг мобильной подписки. Он сообщил, что кто-то в его сайт вставил код, который анализирует посетителя и в случае, если клиент сотового оператора, то переадресовывает на лендинг.А учитывая, что содержимое сайта больше рассчитано на граждан Республики Беларусь, а переадрессация происходила только для абонентов РФ, то данный взлом был практически незаметен владельцу сайта.У меня есть основания верить ему, так как сам работал в СЕО компании и к нам приходили клиенты с разнообразным зоопарком взломанных сайтов, которые мне приходилось чинить. Таким образом в этой структуре есть несколько участников:«неМамонт» — он же обычный пользовательВладелец ресурса — на который пользователи ходят добровольно. Хакер — в случае, если редирект появился в результате взлома сайта. Но владелец ресурса может и добровольно установить «вредный» код.Арбитражник — принимает перенаправленный трафик от ресурса и перенаправляет на ресурсы контент-провайдеров. Контент-провайдер — который впаривает «неМамонту» г**ноконтентОператор сотовой связи — списывает деньги со счёта абонента и отправляет их контент-провайдеру.Пользователь приходит на «токсичный» сайт где скрипт проверяет откуда пришёл «неМамонт». В случае, если он пришёл с пула адресов ПАО Мегафон и по ряду других условий, то перенаправляет на сайт арбитражника. Тот в свою очередь перенаправляет на лендинг заказчика (в нашем случае vsewap.ru). «неМамонт» видит текст, который ни на что не намекает и жмёт «Продолжить». Далее на такой же странице, которая уже принадлежит Мегафону мелким текстом написано, что услуга платная и яркая кнопка «Продолжить» или «смотреть». «неМамонт» жмёт эту кнопку и сертифицированное оборудование Мегафона фиксирует безоговорочное согласие с ip адреса абонента. Деньги списались со счёта абонента и Мегафон отправляет деньги владельцу контента. Тот в свою очередь платит комиссию арбитражнику. Только владелец сайта со временем попадёт в чёрный список браузеровТетеринг мобильного интернетаОчень интересная загвоздка в том, что абонент, в большинстве случаев, имеет законное право раздавать интернет со своего телефона любому устройству для любого человека.В данном случае невозможно точно установить, что именно абонент нажал кнопку, а не иное лицо, которое подключилось к интернету через данное устройство.Поэтому в силу ст. 438 ГК РФ оператор не может точно установить кто именно принял оферту…Таким образом технология wap-click больше не является законной. Это повод обращения в контролирующие органы! Вернуть отжатое...Мегафон возвращает деньги только если клиент будет скандалить и будет грозить жалобами в контролирующие органы:При этом если написать в Роспотребнадзор, то оператор отвечает, что деньги сняты ошибочно и уже вернули абоненту.Оригинал на Пикабу. Спасибо за подсказку XoIod Если бы всё было в рамках закона, то после того как клиент возмутился, то ничего не возвращали бы, так как в силу ст. 435-438 ГК РФ услуга оплачена и предоставлена.А был ли мальчик?..Мегафон постоянно утверждает, что он не оказывает услуг контент-провайдеров. То есть он только принимает деньги за оплату услуг сторонних организаций, таким образом по ЗоЗПП…ПАО Мегафон является владельцем агрегатора,владелец агрегатора информации о товарах (услугах) (далее — владелец агрегатора) — организация независимо от организационно-правовой формы либо индивидуальный предприниматель, которые являются владельцами программы для электронных вычислительных машин и (или) владельцами сайта и (или) страницы сайта в информационно-телекоммуникационной сети «Интернет» и которые предоставляют потребителю в отношении определенного товара (услуги) возможность одновременно ознакомиться с предложением продавца (исполнителя) о заключении договора купли-продажи товара (договора возмездного оказания услуг), заключить с продавцом (исполнителем) договор купли-продажи (договор возмездного оказания услуг), а также произвести предварительную оплату указанного товара (услуги) путем перевода денежных средств владельцу агрегатора в рамках применяемых форм безналичных расчетов в соответствии с пунктом 3 статьи 16.1 настоящего Закона и Федеральным законом от 27 июня 2011 года N 161-ФЗ «О национальной платежной системе».… так как денежные средства списывает именно Мегафон.Пункт 1.2 ст. 9 ЗоЗПП обязывает агрегатора предоставить всю информацию как о себе, так и об организации, от имени которой он действует. Пункт 1.2 ст. 9 ЗоЗПП1.2. Владелец агрегатора обязан довести до сведения потребителей информацию о себе и продавце (исполнителе) (фирменное наименование (наименование), место нахождения (адрес), режим работы, государственный регистрационный номер записи о создании юридического лица, фамилию, имя, отчество (если имеется), государственный регистрационный номер записи о государственной регистрации физического лица в качестве индивидуального предпринимателя), а также об имеющихся изменениях в указанной информации. Владелец агрегатора доводит до сведения потребителей информацию о себе и продавце (исполнителе) посредством ее размещения на своих сайте и (или) странице сайта в информационно-телекоммуникационной сети «Интернет». Информацию о продавце (исполнителе) владелец агрегатора вправе довести до сведения потребителей посредством размещения на своих сайте и (или) странице сайта в информационно-телекоммуникационной сети «Интернет» ссылки на сайт продавца (исполнителя) в информационно-телекоммуникационной сети «Интернет».Разумеется, что я решил спросить об ООО Информпартнер самого Мегафона.Ожидаемо - результат нулевойПри этом они продолжают вратьВсе мы помним из прошлой статьи, что подключение услуги происходит посредством ресурсов, которые принадлежат ПАО Мегафон.Почти все сайты на moy-m-portal.ru, в том числе video-box24.ru, в футере содержат текст. Внимание! Весь контент представлен в ознакомительных целях!Стоимость доступа составляет 35 рублей (включая НДС) за 1 день для абонентов ПАО «МегаФон»; по разовой оплате — 150 рублей (включая НДС) за 30 дней для абонентов ПАО «МегаФон»; Продление доступа происходит автоматически, посредством подписки. Для отказа от предоставления Подписки на услугу отправьте SMS-сообщение со словом СТОП<пробел>2078 на номер 5151 для абонентов ПАО «МегаФон». Cообщение бесплатно в домашнем регионе. Служба технической поддержки ООО «Информпартнер»: 8-800-500-25-43 (звонок бесплатный), e-mail: helpdesk@informpartner.comОбратите внимание, что нет ни слова, что услугу оказывает ООО Информпартнер. Я подключился через интернет от Мегафон и нажал на «контент». Меня, разумеется, перекинуло на валидатор. Ключевое здесь то, что услугу предоставляет ООО Информпартнер.Текст «Условиями предоставления подписки» ведёт на документ, который является офертой. Читаем и ищем с кем мы заключаем договор. Копия оферты, если Мегафон решит удалить этот документ.Настоящие условия оказания услуги «Мобильные Подписки» (далее по тексту — Условия) в соответствии со статьей 435 Гражданского кодекса РФ являются офертой, адресованной Абонентам (далее по тексту — Оферта), и становятся соглашением между Абонентом и Оператором об оказании услуги «Мобильные Подписки» (далее по тексту – Услуга) с момента согласия Абонента с ними.Кем является Оператор написано ниже:Оператор связи (Оператор) – ПАО «МегаФон», в том числе Столичный филиал,Центральный филиал, Северо-Западный филиал, Поволжский филиал, Кавказский филиал,Уральский филиал, Сибирский филиал, Дальневосточный филиал.ОригиналТо есть услугу продаёт именно Мегафон, а не какой-то ООО Информпартнер!1.6. Оператор оказывает Услугу при информационной поддержке партнеров. Оператор вправе привлекать для оказания Услуги иных третьих лиц без согласования с АбонентомООО Информпартнер всего лишь является субподрядчиком Мегафона! Получаем доступ к «платному» контенту без оплатыИзучив огромное количество сайтов под мобильные подписки я выяснил, что содержимое их взято из открытых источников. То есть они «продают» воздух, который на соседней улице бесплатный и более высокого качества (без запаха тухлятины).А есть те, кто откровенно ворует чужой контент и выдаёт его за свой. Разумеется, отчислений в пользу автора никто не делает.Убедиться в этом — не обязательно покупать подписку. Чтобы случайно не попасть на деньги, используйте интернет не от мобильного оператора. Можно, конечно, и через интернет Мегафона. Там будет на один шаг больше, но это на Ваш страх и риск. Идём на сайт с мобильными подписками moy-m-portal.ru, выбираем практически любой сайт (с какими-то фокус может не сработать). Переходим и, возможно, получаем предупреждение от браузера:Разумеется, что мы продолжаем. Выбираем контент и жмём интерактивную кнопку. В нашем случае «Смотреть»:В этот момент Вас перекинет на некий валидатор, который определит, что Вы не с Мегафона и вернёт на сайт без доступа. «Валидатор» будет выглядеть примерно так: Урл на который возвращает в данном примере:Часто достаточно во второй ссылке поменять  на . Энтер и теперь «платный» контент начнёт воспроизводиться.В более тяжёлых случаях надо в первой ссылке поменять  на . Вставляем в браузер и переходим. Авторизация пройдёна, но ни копейки не сняли.Прокатывает почти со всеми, где поддержкой сайта указан ООО «Информпартнер», так как они не заморачиваются и делают огромное количество копий своего сайта. А го**о-контент держат на серверах, наподобие servercontent.ruПример контента servercontent.ru/upl/09/e6/uoiVtXtS444.mp4Как же с Мегафоном бороться? 1. Через чат поддержки подключить следующие услуги:Отказ от предложений оператора в SMS, MMS, E-mailОтказ от предложений партнеров в SMS, MMSОтказ от предложений партнеров по E-mailОтказ от телемаркетинга оператораОтказ от уведомлений оператора в сервисных SMSОтказ от уведомлений оператора в сервисных USSDОтказ от баннерной рекламы оператораОтказ от баннерной рекламы партнёровЗапрет платных контентных коротких номеровОтказ от USSD рассылокПосле подключения в личном кабинете должны отображаться все, кромеОтказ от баннерной рекламы оператораОтказ от баннерной рекламы партнёровЗапрет платных контентных коротких номеровОператор утверждает, что услуга «Запрет платных контентных коротких номеров» отключается только самостоятельно по команде *526#Так же, если Вы подаёте списком, то оператор может «забыть» подключить одну из услуг. У меня забыли «Отказ от предложений оператора в SMS, MMS, E-mail». Пришлось напомнить. Подключение услуг2. Подключить контентный счёт в офисе оператора. Но можно и через чат. Проверить его существование и баланс можно через USSD команду *393#У Теле2 *160# 3. Писать жалобу в «Роспотребнадзор» на Мегафон, так как оператор как агрегатор не предоставляет информацию об исполнителе ООО Информпартнер в нарушении пункта 1.2 статьи 9 закона «О защите прав потребителей». Так же за обман, так как исполнитель услуги на странице принятия оферты и страницы «Условий» расходится. 4. Писать жалобы на сайты Информпартнера из-за отсутствия информации о компании и о товаре на сайте(ст.ст.8, 9 и 10 ЗоЗПП). Может «Роскомнадзор» начнёт правильные вещи делать, а не вот это всё… ЗаключениеВ ходе расследования я получил доказательство, что ООО Информпартнер является субподрядчиком Мегафона, оказывающий поддержку этих ресурсов. Возможно его вообще не существует. А вся эта система подписок является детищем самого Мегафона. И при списании денежные средства за, якобы, услуги контент-провайдера Информпартнер с абонента уходят в тот же Мегафон. Вероятно такая же схема есть и у других операторов сотовой связи, но Мегафону не повезло, так как именно он первый раз показал мне лендинг с подпиской.Прошу знающих людей в комментариях дополнить юридические аспекты, возможно кто-то напишет шаблон жалобы в контролирующие органы.Призываю Вас проверить информацию, изложенную в этой статье и подавать жалобу на операторов сотовой связи и го**о-контент-провайдеров, чтобы прекратить эти мошеннические действия!Жалобы работают и это подтверждают в комментариях.P.S.: у меня остаётся ощущение, что я что-то упускаю в этой схеме…P.P.S.: у прошлой статьи 2 дизлайка (622 лайка). Как Вы думаете, кто их поставил?..UPD 01: спасибо Headshaker и discobearПолное наименование ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ «ИНФОРМПАРТНЕР»Наименование на английском OOO «INFORMPARTNER»Адрес (место нахождения) 420074, Татарстан респ, г. Казань, ул. Петербургская, д. 52 офис 203Дата регистрации 02.02.2015ОГРН 1151690006995ИНН 1655318999ОКОПФ Общества с ограниченной ответственностьюОсновной вид деятельности Деятельность, связанная с использованием вычислительной техники и информационных технологий, прочаяРуководитель Хуснутдинов Тимур Медхатович · генеральный директорУчитывая, то что домен informpartner.com (почта саппорта на сайтах helpdesk@informpartner.com) зареган на Timur Khusnutdinov, то эта организация подходит. Доходы 4 032 457 000 ₽ 31.12.2017UPD 02: В личку мне скинули ссылку на статью, в которой автор спалил «паразитные» банеры в AdSense/AdWords gogolev.net/node/137Правда это было в 2017 году, но тем не менее.UPD 03: Спасибо, что накидали в личку информации о финансовой деятельности операторов сотовой связи, которой хватит на новое расследование. Если есть Вам что-то рассказать, то прошу писать в телеграм monocerosUPD 04: Спустя сутки после публикации этой статьи Альфа-банк сообщил о том, что Мегафон передал им информацию, что я сменил сим-карту! Последнюю неделю я даже не перезагружал телефон, не говоря уже о замене SIM. При этом телефон продолжает работать…Сходил в офис Мегафона. Менеджер сообщил, что последний раз замена была в феврале.Пришёл в Альфа-банк, обновил данные по sim…UPD 05:  Мегафон стал массово отказывать подключать услуги отказа от рекламы ссылаясь на пункт договора 14.14.2. Но после того как их ткнут носом в ст. 18 закона «О рекламе» — включают заднюю.UPD 06: Мегафон таки прочёл статью Может мы всё же получим официальный комментарий?UPD 07: Так как назрела необходимость, то создал чат в Телеге для обсуждения Операторов Сотовой Связи tg.guru/opsosruUPD 08: Абонентам массово отказывают в подключении услуги Отказ от USSD рассылокТак вот это ложь, которая вводит Вас в заблуждение.Абонентам эту услугу подключают.Требуйте подключение всех услуг!"
    },
    "doc_9": {
        "url": "https://habr.com/ru/post/211845/",
        "title": "Как я взломал Гитхаб еще раз",
        "text": "Это история о том, как я соединил 5 Low-severity багов в один большой баг, с помощью которого можно было читать/писать в приватные репы на Гитхабе (опять).Несколько дней назад гитхаб запустил баунти программу. За 4 часа я смастерил такой URL после посещения которого я получал доступ к вашему гитхаб аккаунту и репозиториям. Хотите узнать как?Начал я с проверки Github OAuth.Баг 1. Обход валидации redirect_uri с /../Это просто — можно отослать /path1/../path2 чтобы перезаписать предыдущий путь (path traversal).Баг 2. Нет валидации redirect_uri при получении токена.Первый баг сам по себе ничего не стоит. В OAuth2 встроена защита, что для каждого выпущеного кода есть соответствующий редирект_ури, и при обмене кода на токен необходимо дать тот же ури что был использован вначале. Попросту говоря если вернулся код на site/callback то и для получения токена надо отослать site/callback.Как ни странно гитхаб реализовали проверку не правильно. Можно было выпустить код для /path1/../path2 и потом использовать его на /path1. То есть утекший через рефереры код оставался валидным даже для настоящего колбэка. С помощью этих двух багов можно было бы сливать коды через рефереры на сайтах с функцией логина через Гитхаб. Похожий баг был в vk.com.Баг 3. Картинки на гисте.Я начал смотреть официальные клиенты гитхаба — Education, Pages, Speakerdeck, Gist. Первые два не пользовались OAuth по-сути, третий не входил в bounty программу, а вот гист очень даже подходил. Он был «пре-одобренным» клиентом, то есть по-умолчанию установлен у всех пользователей.Но нельзя было просто вставить  так как Camo-прокси гитхаба заменит это на локальный урл, и реферер не утечет на ваш сервер. Чтобы обойти эту защиту я использовал довольно новый трюк ///host.com парсится как путь всеми серверными библиотеками включая руби, но браузеры же парсят это как хост и загружают host.com вместо github.com///host.comНаш урл-эксплоит выглядит сейчас так:Как только юзер загружает это адрес гитхаб автоматически редиректит на мой гист с картинкой на моем сервере:Location: gist.github.com/auth/github/callback/../../../homakov/8820324?code=CODEБраузер загружает gist.github.com/homakov/8820324?code=CODEИ тут при запросе на нашу картинку он сливает реферер. Как только мы получаем CODE жертвы мы можем открыть gist.github.com/auth/github/callback?code=CODE — вуаля. Мы залогинены как жертва на гисте и имеем доступ к его приватным гистам.Баг 4. Токен хранится в кукахЭто антипаттерн OAuth, крайне не рекомендуется хранить/показывать токен браузеру, гист же хранит его в рельс сессии. Которая как мы знаем просто base64 закодированная и подписанная кука.Вот же он — github_token. Теперь мы можем делать запросы напрямую, минуя сайт гиста. Но токен имеет scope = gists и кроме гистов я ничего не могу прочесть. Хотя…Баг 5. Автоматическое одобрение любого scope для официальных клиентов.Последний штрих. Так как гист это официальный клиент гитхаба то вы не видите диалога «Одобрить эти скоупы» и гитхаб делает одобрение за вас автоматически. А значит я могу просто послатьЗатем использовать слитый CODE для логина в аккаунт жертвы, прочитаю куку, возьму оттуда github_token и тут уже смогу совершать API вызовы совершенно незаметно для пользователя — ведь токен принадлежит Гисту! Стелс-мод эдакий, преступление без следов.Награда составила $4000.И вообще я доступен для работы, например."
    },
    "doc_10": {
        "url": "https://habr.com/ru/post/68131/",
        "title": "Шантаж",
        "text": "Наша история начинается с того, что пара наших клиентов получает письма следующего содержания:Здравствуйте.Если вы хотите, что бы Ваш сайт xxxxxxxxxx работал, вы должны будете платить нам 10 000 руб. ежемесячно.Внимание! начиная с 26-го августа Ваш сайт будет подвергнут Ддос атаке. Он будет недоступен до тех пор, пока вы не начнете нам платить.В первой атаке будут задействованы 2000 ботов. Если вы обратитесь в фирму, занимающуюся защитой от ddos-атак и они начнут блокировать наших ботов, то мы увеличим кол-во ботов до 50 000, а защита от 50 000 ботов стоит очень-очень дорого. 1-й платёж (10 000р.) должен быть совершён не позднее 31 августа.Все последующие платежи (10 000р.) должны быть совершены не позднее 31(30) числа каждого месяца начиная с 31 августа.За просрочку платежа будут начисляться пени +100% за каждый день просрочки.Например, если вы не успеете произвести оплату в последний день месяца, то 1-го числа вы будете должны оплатить пени 100%, т.е. всумме 20 000р., если оплатите только 2-го числа, то будет уже 30 000р. и т.д. Пожалуйста, платите во время, и тогда сумма 10 000р. будет неизменна.Пени касаются и вашего первого платежа — не позднее 31 августа.Вы также получите ряд бонусов.1. 30% скидка на заказ ддос атаки на ваших конкурентов/врагов. Средне рыночная цена ддос атаки простого сайта составляет около 100$ за сутки, для вас цена будет всего 70$ за сутки.2. Если к нам обратятся Ваши конкуренты/враги, с просьбой произвести атаку на Ваш сайт, то мы им откажем.Оплату нужно производить на наш кошелек яндекс-денег Номер ************. Каждый месяц номер кошелька будет новый, будьте внимательны. Про то, как пользоваться яндекс-деньгами читайте на www.money.yandex.ru.Если вы захотите обратиться в правоохранительные органы, мы не будем Вас отговаривать. Мы даже дадим вам их контакты: www.fsb.ru, www.mvd.ruВ назначенный час сайты подвергаются атаке и умирают. Хостеры мастерхост и русоникс — разводят руками, помощи от них нет.А теперь вопрос, кто нибудь еще получал такие письма? Какими были ваши действия?"
    },
    "doc_11": {
        "url": "https://habr.com/ru/post/183674/",
        "title": "Как я искал работу или Как не надо проводить собеседования",
        "text": "В общем, решение назревало давно, и вот, одним пасмурным Питерским утром, я сказал шефу, что, к сожалению, тут наши пути расходятся. Было составлено резюме, более или менее описан десятилетний опыт работы в области web-программирования, обдумана сумма оклада, немного выше средней по Питеру, но далеко не топовая (я пока ни разу не гуру), оплачены услуги по поднятию резюме в топ каждые четыре часа, установлена прога, записывающая все входящие звонки (чтоб ничего не забыть), и я сел ждать. Собственно, это был вечер пятницы, так что ждать пришлось аж до понедельника, но в понедельник начался ад. Звонков было много, за следующую неделю я посетил 17 собеседований, по 3-4 в день, в четверг я уже перестал соглашаться на собеседования, а звонки все шли и шли. Это не статья из серии, «смотрите как меня все хотят, я офигенен», я просто хочу сказать, что сейчас в России существует дефицит IT специалистов, и когда подходящий человек приходит к вам в компанию, важно не только то, насколько он понравится вам, но и то, насколько вы понравитесь ему, ибо мне кажется, что сейчас конкуренция существует скорее на вашей стороне, на стороне работодателей, чем на стороне программистов. Оговорюсь сразу, речь не пойдет о всяких Яндексах, ВКонтактах и Мэилру, там все ясно, речь идет о компаниях второго эшелона, предыдущей ступени.Руководитель ITВ разных компаниях должность называется по разному, но в итоге, имеется в виду, ведущий разработчик. Симпотные девушки из HR-отдела — это конечно здорово, но для меня, лицо компании — главный технический специалист. Обычно именно он отвечает за техническую часть собеседования. Отнеситесь серьезно к выбору этого человека. По нему я делаю вывод об уровне компании. Например, в одной компании, меня спросили насколько плотно я работал с код-инжектором? Мой вопросительный взгляд вызвал неодобрительное «хм...» и отсылку на строчку «CodeIgniter» в моем резюме. «Как же так, Володя, пишете же, что работали». Еще сейчас очень модный вопрос «Работали ли вы с MVC». Мне всегда хочется ответить «А вы вообще знаете что такое MVC?». Сложилось впечатление, что большинство, принимают этот паттерн за еще один фрэймворк. Тут всегда интересно посмотреть, будут ли уточняющие вопросы после моего короткого «Да», и если будут — большой плюс работодателю. Почему это для меня так важно? Я еще молод, и я хочу развиваться на работе, ведь как не крути, а задачи, решаемые в компании, более или менее соответствуют уровню тим-лида, и эти задачи не должны быть ощутимо ниже моего уровня. HR-менеджерыСколько же времени я потерял, из-за этих людей. Несколько раз я приходил на собеседования, и к своему удивлению, обнаруживал, что в компании вообще нет никаких проектов, связанных с моей специализацией. Причем по телефону меня уверяли в обратном. Хит сезона — спутать Java и JavaScript, так я попал на три собеседования к разработчикам мобильных приложений. Тут есть и моя вина, надо более подробно расспрашивать менеджеров, во время телефонных разговоров, но чаще всего, они просто не обладают достаточными знаниями, что бы ответить на мои технические вопросы, и разговор сводится к тому, что мое резюме им подходит, и у них бесплатное питание, в комнате отдыха, с настольным футболом. Возможно HR-менеджеры себя оправдывают в других специальностях, но в IT, все же, наймом специалистов должен заниматься знающий человек. Ну или, как минимум, HR-менеджер должен быть в тесном контакте с техническим специалистом.ЗарплатаОх, самая больная тема. Когда вы набираете мой номер, вы должны понимать, что сумма, указанная в резюме — это не предел моих мечтаний, это минимальный порог, при котором я соглашусь работать у вас. Мне очень понравилась фраза «Ну, на испытательный срок в три месяца, вы будете получать в полтора раза меньше, а после, постараемся подтянуть до...». Во первых, мне не улыбается бедствовать три месяца, во вторых, я не очень понимаю слово «постараемся»… Такое ощущение, что я пришел выпрашивать у них работу, мне некуда податься, и так и быть, они возьмут меня на работу, но ничего обещать не могут. Был вообще, очень странный случай, когда меня пригласили на собеседование в компанию, перечислив мне по телефону проекты, реализованные ими, которые действительно произвели на меня впечатление. В крутом бизнес-центре, меня усадили в очень удобное кресло, задавали много вопросов, уточняли ответы, и потом, как бы между прочим, сообщили, что у них сейчас небольшие проблемы, и ближайшую зарплату я получу только через три месяца. На мой удивленный взгляд, сказали, что ничего страшного, я могу пока взять кредит, что бы было на что жить в ближайшее время.Тестовое заданиеЯ всеми руками за тестовое задание. Ведь будущему работодателю как-то нужно определить мой уровень. Некоторым для этого хватает разговора на собеседовании, подробного рассказа о том, чем я занимался в прошлых компаниях, какие технологии использовал. Некоторые предлагают листочек с вопросами, на которые я должен письменно ответить. Некоторые высылают ТЗ перед собеседованием, или дают его в качестве домашнего задания после. Первый способ, конечно для меня самый удобный, рассказать о том, какие задачи решал, как решал, какие проблемы возникали. Это не так сложно, и занимает немного времени. Второй — самый сложный. Во первых, очень непривычно и неудобно писать код на листочке, во вторых, это очень походит на экзамен, к которым, наверное у каждого молодого человека стойкая неприязнь на уровне подсознания и в третьих, собеседование — это все-таки стресс, который несколько отвлекает от программирования. Ну и третий вариант, на мой взгляд, самый оптимальный. Он позволяет программисту решить ТЗ в спокойной, домашней обстановке, возможно за чашечкой чая-кофе, пользуясь привычными инструментами.Правда тут важно не переборщить. Например одна компания, скинула мне ТЗ дня на два работы. Я понимаю, по моей реализации более или менее большой задачи, обо мне можно сказать многое, но поймите и вы, я целыми днями бегаю по собеседованиям, и у меня просто нет времени, засесть за комп на два дня. Большие ТЗ актуальны только в том случае, если вы та компания, в которой я очень хочу работать, и другие предложения не рассматриваю. Если бы мне пришло такое задание например из Google, я бы его, конечно, выполнил, но давайте на чистоту: Вы Google?Кстати, о Google. Было одно очень странное собеседование в небольшом рекламном агентстве, где мне не задали ни одного технического вопроса, зато дали список вопросов от Гугла. Причем, если у Гугла этот список разбит по должностям, мне дали все подряд. Надо сказать, что оттуда мне так и не перезвонили. Видимо, не работать мне в Гугле.Организация собеседованияЕсли кто-либо из руководителей или HR-менеджеров читает эти строки — хочется к вам обратиться: пожалуйста, подходите к организации собеседований более серьезно. Учитывайте не только свои интересы, но и интересы соискателя.Первое что очень раздражает — это квест под названием «Найди наш офис». Сейчас большинство офисов компаний находятся в бизнес-центрах. И если найти сам БЦ не проблема, на крайний случай у меня есть GPS в телефоне, то вот найти офис — довольно сложно: «Поднимитесь на эскалаторе на второй этаж, пройдите в левое крыло, дальше на лифте на четвертый этаж, там две двери — наша правая, идите до офиса 435, далее налево, пока не увидите красный телефон. Наберите на нем 163 и скажите что вам нужен ...». Если вас сложно найти в БЦ — не нужно рисовать карту сокровищ, просто спуститесь и встретьте. Так же, очень модная сейчас практика — «серия интервью». Сначала интервью с HR, потом с прямым руководителем, потом с директором. И все это в разные дни. Часто даже в разные недели. И опять же, эта практика работает, если я задался целью попасть именно к вам в компанию. Но если я сейчас ищу работу, а вы не предлагаете ничего, что выделяет вас среди остальных вакансий — я не буду ждать. В одной компании я сначала встретился с HR-менеджером, потом через несколько дней, меня пригласили на встречу с руководителем отдела кадров. А еще через несколько с генеральным директором. От последней я уже отказался. Первые две встречи были совершенно одинаковыми, те же самые вопросы, соответственно те же самые ответы. Технической части не касались вообще. Подозреваю что третье интервью было бы таким же. Заметьте, три интервью, и ни одного с техническим специалистом. Самое худшее, что может придти вам в голову — устроить групповое интервью. Три соискателя с одной стороны, один работодатель с другой. Это было одновременно и неловко и глупо. Походило на какое-то реалити шоу. Я уж не знаю, может это был такой психологический тест…ВыводДело в том, что программисты сейчас находятся на особом положении, мы можем выбирать. Это не везение (сколько раз я слышал такую фразу: «Повезло тебе, ты программист»), это результат упорного труда, когда большинство наших сверстников проводило ночи в клубах, мы сидели за книгами и клавами, когда большинство наших друзей, после работы смотрит Камеди под бутылочку пива — мы все еще сидим за книгами и клавами. Наша профессия требует полной отдачи, и вполне естественно, что мы можем сказать «нет» компании, которая не произвела на нас положительного впечатления. Хотите нанять опытного программиста, способного не просто решать задачи, но и делать это грамотно — подойдите к организации собеседования чуть более серьезно."
    },
    "doc_12": {
        "url": "https://habr.com/ru/post/522524/",
        "title": "Меня перевезли в другую страну и через две недели выставили на мороз — потому что передумали нанимать",
        "text": "Почти год назад я переехал жить в Беларусь. Как вы уже догадались, если релокейт проходит без проблем, то такие истории на Хабр не пишутся. Однако, у меня есть что рассказать. Моя история будет не о славном граде Минске, белорусской идентичности, летних протестах и прочих, несомненно, важных вещах. Я расскажу вам об одной белорусской компании, в которой меня угораздило недолго поработать. История эта совершенно феерическая — что-то подобное могли бы снять режиссёры Silicon Valley. Всю свою карьеру я думал что так просто не бывает. Ну даже если и бывает — то я в это точно не вляпаюсь. Однако, я ошибался. Мне не повезло — переезд вышел мне боком и я влетел в целый водоворот событий. Они довольно поучительны и, как мне кажется, мой опыт будет интересен всем, кто планирует переезжать в ближайшем будущем. Меня зовут Павел и вот моя история.Последние десять лет я жил в небольшом городке под Новосибирском и работал через UpWork. Помимо этого я писал на Хабр и вёл два своих публичных открытых проекта: Reinforced.Typings и Reinforced.Tecture. Денег на жизнь мне хватало и времени на свои проекты оставалось достаточно. Но однажды положение дел изменилось. Стартап, в котором я работал — вырос, руководство начало размываться новыми людьми. В реорганизованной компании мне не нашлось места, и меня уволили. Само собой, я страдал, лез на стены, орал от несправедливости и зарекался навек работать без equity. Но жизнь показала, что бывает и хуже. Гораздо хуже.Я искал новую работу почти 4 месяца. Кроме удалёнки ничего не рассматривал. Однако, что-то упорно шло не по плану: на UpWork и до этого с C#/.NET было не густо, а в 2019 стало совсем печально. Мои пропозалы оставались без ответа, все свои коннекты я истратил. Remote на StackOverflow был только для обладателей паспорта США, а личные контакты и нетворкинг молчали. Моя финансовая подушка таяла, и скрепя сердце, я принял решение выйти из зоны комфорта и наконец-то релоцироваться из того медвежьего угла, в котором сидел последние 10 лет.На Европы и Америки у меня не было ни денег ни связей. Работать спустя рукава в аутсорсе я решительно не хотел. Питер мне просто не нравится. В Москве дорого, пафосно, пробки и огромные расстояния. При этом цивилизации вокруг все равно хотелось. Ну стрёмно мне тратить 20 баксов и 3 часа на такси туда-обратно до ближайшего нормального бара. Ещё хотелось, чтобы IT-индустрия жила и шевелилась. Митапы всякие там, конференции, барные тусовки. Да и в целом — к 10+ годам индустриального опыта хочется уже работать с профессионалами своего дела, а не с недоучками. Мои знакомые посоветовали Минск. Я знал, что в Республике Беларусь действует ПВТ и зарплаты весьма привлекательны. Более того — есть несколько примечательных продуктовых компаний: Viber, Stimulsoft, Pandadoc, Mapbox и TargetProcess имени Михаила Дубакова. В последней была открыта вакансия C#-разработчика и я отправил туда резюме. Я уже слышал про эту компанию — их продуктом пользовались мои хорошие знакомые из Новосиба. Компания быстро откликнулась на моё письмо, я прошел совершенно стандартное собеседование с тестовым заданием и, наконец, получил оффер.Я перестраховщик, так что пособеседовался и в другие компании — это дало мне ещё один оффер. Пришлось долго и мучительно выбирать между двумя вариантами, и в итоге я выбрал TargetProcess. Его коллектив показался мне вполне нормальным и, что немаловажно, профессиональным. Гугл ничего плохого про компанию не выдавал — только радужные статьи на dev.by, где гордо рассказывается как компания справляется с процессом разработки без менеджеров и даже HR-ов. На собеседовании я тоже не заметил, что что-то может пойти не по плану.Новосибирск — МинскОффер я принял и пообещал, что как штык буду на рабочем месте 10 декабря, в 11 утра. Но переезд дался мне нелегко. Обычно я не склонен к сантиментам, но тут было прямо не по себе. Деньги кончались, разработка своих проектов встала, а в Беларуси у меня нет решительно никого из знакомых. Я, блин, всё бросаю и еду в никуда. Срываюсь с насиженного места под влиянием обстоятельств. Всё, что у меня есть — это моя голова на плечах, технический опыт и вот этот оффер в инбоксе. Добираться предстоит совершенно одному. Случись что, помощи просить не у кого, вся надежда только на себя. Я старался себя успокоить тем, что TargetProcess вроде адекватная компания и уж точно не допустит какого-нибудь непотребства.Сдал квартиру, доверил своего кота ответственому знакомому, выкинул ненужный хлам, что-то продал. Прекратил ходить на тренировки и сбрасывать вес, попрощался с немногочисленными друзьями. Единственное, что я себе оставил — автомобиль. Заднеприводный бизнес-кореец, продать который за вменяемую цену в Новосибирске мне не удалось. Сдавать своего коня перекупам по бросовой цене я категорически не желал. К чёрту. Занял денег у хороших людей и взял его с собой. Ближайший год мне всё равно не светило возвращаться (рекрутёр TargetProcess меня заверила что люди в этой компании работают подолгу — как раз то, что нужно). Колёса пришлись весьма кстати. Я упаковал в багажник всё, что хотелось взять с собой, поставил на автовоз в Москву, а сам вылетел следом.От Москвы до Минска надо было ехать своим ходом. Мне не впервой гонять на дальние расстояния по трассе, но и тут не без факапа. Автомобиль, заляпанный сантиметровым словом грязи, мне отгрузили с автовоза позже планируемого. Мойка, оплата, МКАД — и вместо расчётных 10 утра, я выехал чуть ли не в час дня. Про разницу в широтах и время захода солнца я, конечно же, был не в курсе. В общем, в 5 вечера прямо на трассе меня застала глухая ночь и дождь со снегом. Не самые удобные условия для вождения, но отступать уже некуда. Ехал наощупь, пытаясь не слететь с дороги.А после пересечения Российско-Белорусской границы у меня отвалилась связь. Местную SIM-карту взять негде, пришлось вести по кэшированному куску яндекс.карт, указателям и километровым столбам. Часам к 11 вечера, наглухо вымотавшись, преодолев 4.5 тысячи километров за день, я наконец въехал в Минск. Вызвонил арендодателя (дай ей б-г здоровья!), с которой договорился заранее. Втащил вещи в квартиру и наконец грохнулся спать.10 декабря, 11 утра. Я явился в офис и...Хоп!Проходит две недели. Я почти закрывая свою первую задачу (разгребание инфраструктурного легаси системы), только-только начинаю отходить от переезда, как вдруг...меня уволили. 26 декабря 2019го года, под новогодние праздники я остался без работы. Из денег у меня — зарплата за месяц (даже долги не вернёшь), вокруг — чужая страна, чужой город в предпраздничном ажиотаже. Проводить собеседования до 15 января никто не собирается, в городе введён режим \"давай после праздников\". До России — 600 километров, до дома вообще пол-Земли. Я даже не могу зарегистрироваться по месту пребывания — нужен трудовой договор — и любой встречный милиционер имеет полное право взять меня за жопу.Никаких \"профилактических бесед\" со мной не проводили, претензий к моей работе не возникало, методических рекомендаций, что сделать лучше или по-другому — не поступало. Создалось ощущение, что компании я просто не упёрся. Технически это выглядело так: Андрей Хмылов — человек, который что-то вроде тимлида в команде отозвал меня в сторонку и сказал \"мы решили не продолжать с тобой, потому что что-то мы не срабатываемся\". На вопрос \"А зачем вы вообще меня наняли?\", я получил предельно чёткий ответ: \"Просто мне показалось, что процессы в моей команде масштабируются на 6 человек, а не на 5\". Ну вы понимаете — человеку показалось.Через 2 дня у меня состоялся диалог с техническим директором TargetProcess — Евгением Хасеневичем. И он был куда богаче на детали:— В договоре чётко прописан испытательный срок, а проработал я 2 недели. Что значит \"мы не срабатываемся\"?— По трудовому кодексу Беларуси мы имеем право уволить тебя на испытательном сроке когда захотим.— Хорошо, я не эксперт в белорусском законодательстве. Но эм… я не в самом удачном положении — только переехал, у меня одни долги.— Ну я не уточнил в бухгалтерии, можно ли заплатить тебе за 2 недели, поэтому компания — обрати внимание — закроет на это глаза и выплатит тебе месячную зарплату.— То есть я ещё и спасибо сказать должен?— Спасибо говорить не надо. Считай что это такая… добрая воля компании.— Ещё раз: я одолжил больше денег, чтобы к вам приехать, чем то, что вы мне пишете в расчётном листке.— А за что тебе платить? — собеседник расплылся в улыбке — Давай ты напишешь смету, я отнесу её в бухгалтерию, там всё посчитают.— Я… э…— Ну а что ты хотел? Переезд — это всегда риски, ты должен быть к ним готов.— Так на дворе новогодние праздники. Мне придётся сидеть без работы месяц, потому что никто не собеседует.— Ну если ты хороший программист, то в Минске-то без проблем найдёшь себе работу. Рекрутёр TargetProcess порекомендовала мне не лезть на рожон. Скрепя сердце, я подписал доп. соглашение, что де-факто означало увольнение по собственному. Страна чужая, я только переехал — мне реально было стремно качать права. Где-то тут пришло понимание, что соглашаться на релокейт \"в ручном режиме\" было довольно глупой затеей. Но издалека сотрудники TargetProcess не создавали впечатление безответственных мудаков, и мне чудилось, что я знаю на что иду. Пожалуй, надо завязывать с доверчивостью.Я не переношу вранья и нарушения договорённостей. А здесь было целое комбо: внезапно выяснилось что никто мне ничего не обещал, а руководство продемонстрировало мне беспрецедентное хамство и выставило всё так, будто мне с барского преча позволили тут поработать. Человек, занимающий должность CTO, откровенно посмеялся мне в лицо. То есть меня, неплохого и опытного инженера, который в силу обстоятельств пошёл навстречу компании — облили говном и поставили в крайне неудобную ситуацию. Я считаю что во взрослом мире так дела не делаются. Раз компания в лице технического директора позволяет себе такое поведение, то мне ничего не мешает трактовать это инцидент как… ммм… дайте-ка посмотрю на свой банковский счёт… Точно! Кидалово на бабло.Почему эта статья должна быть здесь?В нашей индустрии есть ненадёжные люди. Мне кажется, что информация об их боевых заслугах обязана быть доступна по первому же поисковому запросу. Она должна светиться яркой неоновой вывеской. Чтобы любой желающий незамедлительно понял, кто есть кто, и на кого можно положиться в тонких вопросах переезда, а на кого нет. В случае с TargetProcess ситуация такова: поисковая выдача пестрит красивыми заголовками статей и интервью, описывающими радужно-конфетный мир. В объективной же реальности компания допускает крайне неэтичное отношение к релоцировавшимся сотрудникам. И я тому пример. Намеренно вводить людей в заблуждение — это очень и очень скверно.Остаться без денег перед праздниками в чужой стране — это не та ситуация, в которую каждый из нас хочет попасть. Ладно, я — не голодающий Поволжья. Да и решать сложные проблемы мне не впервой. А если кто-то купится на оффер и приедет издалека с семьёй? С детьми? А если это будет молодой разработчик, который даже не подозревает о том, что так вообще бывает? Разумнее будет сократить риски, когда есть возможность и быть в курсе последствий.Если бы эта статья была у меня-из-прошлого, я бы сэкономил кучу денег и нервов.Жаль что опубликовать эту информацию раньше у меня не дошли руки. Просто они дрожали. И ещё глаз дёргался. Только сейчас я более-менее справился с тревожным расстройством и коробкой неврозов, которые мне достались всего после двух недель сотрудничества с героями статьи. Даже среди ночи уже не просыпаюсь. Почти. Ну что, вы всё ещё выгораете? Тогда я вам расскажу как устроены стильные-модные-молодёжные компании. Дело в том, что TargetProcess и её сотрудники свято чтят soft skills. Они очень любят рассказывать о себе. Например о том, как они обходятся без менеджеров и директора по управлению персоналом, какой у них стильный офис и как они получили ажно $5 млн инвестиций. Выходят хвалебные статьи, основатель активно визионирует, а члены самой-звёздной-команды выкладывают в командный инстаграмм фотографии с котлетами бабла. Короче, все при деле — \"мы продуктовая компания, а не вот эти вот… ГАЛЕРЫ\", \"мы как белорусский Google!\". С самого начала у меня было какое-то внутреннее ощущение что дело тут нечисто. При таких замашках надо действительно быть стоящим игроком. Я насторожился, но в итоге списал всё на \"должно быть я что-то не понимаю\". Кажется, это называется эффект Даннинга-Крюгера. Но пост-фактум все странности становятся очевидны и я долго ругал себя за невнимательность.Собеседование в TargetProcess квалификацию особо не проверяет, что явно не уровень продуктовой компании. Пусть так — у меня есть Github-аккаунт, у меня есть Хабр, у меня есть UpWork с отзывами, мою квалификацию можно проверить тысячью и одним способом, не задавая глупых вопросов про GetHashCode.Чего действительно не ожидаешь от места, где \"важны soft-skills\" — собеседуют одни люди, а в команду попадаешь совершенно к другим. Уже это должно было стать красным флагом, но я, видимо, слишком наивен.От момента, как я принял оффер до моего фактического приезда прошёл МЕСЯЦ. 30 дней. Четыре рабочих недели. Если компания декларирует упор на общение и софт-скиллы, то за эти 30 дней можно было организовать бесчисленное количество онлайн-встреч, посмотреть на меня через камеру, поговорить со мной текстом, голосом, познакомиться, выпить через skype в конце концов, дать тестовую задачу. Да господи, хоть онбординг провести и сказать мне по итогу — мол, нет, чувак, извини, не подходишь. Просто чтобы не дёргать меня через пол-страны и не жечь мои деньги. Но ничего из этого компания не сделала. Кстати, про онбординг.— Чем я могу помочь команде? Давайте для ознакомления я починю несколько застарелых багов, чтоли. Руки чешутся.— Это так не работает — ответил мне человек, играющий в тимлида— А как оно работает?— Ну… не знаю… Я ожидаю некой автономности от своих сотрудников… Ну возьми разгреби воон ту штуковину.Вот и весь тебе онбординг в устах Андрея Хмылова. Замечательный процесс, заточенный под быстрое и эффективное введение новых людей в работу над кодовой базой с более чем 15-летней историей. Особое внимание стоит обратить на заинтересованность, ответственность и готовность помочь.Помогает в процессе онбординга полностью отсутствующая документация. Кусочек readme.md в репозитории, где-то документ в облаке, где-то заметка в личном блоге, где-то схема в онлайн-рисовалке, ссылка на которую передаётся из уст в уста. Передавать из уст в уста — наиболее общепринятый способ распространения информации о системе. Намеренно объяснять никто ничего не собирается — \"ожидается автономность от сотрудников\" (с).Общего списка всех репозиториев, ссылок на них и объяснения, что в них есть — так же нигде нет. Системный администратор сделает вам пользователя чтобы вы могли залогиниться на свою рабочую машину — всё остальное в режиме \"ну… попроси кого-нибудь\". Вместо назначения ответственных за процесс принимается гениальное управленческое решение — закрыть информационные дыры с помощью soft-skills. Браво, узнаю управленческие практики google.Какая ирония: компания, делающая инструмент для управления процессами разработки не может наладить процессы разработки сама у себя. Как это вообще блин работает?Это очень похоже на job security driven development. Намеренно ограничивать знания о системе, чтобы никого не рискнули уволить и зарплату повышали не из-за профессиональных качеств, а потому что \"никто же больше в этом не разберётся!\". Страх, что \"в системе больше никто не разберётся\" довольно распространён в нашей сфере, но давайте замнём для ясности и коротко пройдёмся по самой системе чтобы понять, так ли всё плохо.СистемаПроцессный и организационный бардак ни о чём не говорит при условии, что сама система сделана на совесть. Но\"Любая организация, проектирующая систему неизбежно создаст такую модель, которая будет повторять коммуникационную структуру самой организации\".— Закон Конвея.Старик Конвей и здесь оказался прав.Первое, что я увидел — единого кода системы не существует. Есть разные куски, написанные в разное время, разными людьми, с разными взглядами и разными убеждениями по вопросу \"как надо\". Разумеется, все они уже уволились, онбордить сотрудников никто не планирует, поэтому разбираться надо с нуля.Если долго всматриваться в этот код, то создаётся впечатление, что авторы не проблему решали и не фичи делали, а показывали какие они умные. Что они знают паттерн strategy, или пробуют новый фреймворк за счёт работодателя, или новый язык, или просто креативят в пустоту. По итогу проблемы (зачастую выдуманные) решаются наименее очевидным из всех возможных способов. Технологические понты. Как и бывает в таких случаях, инструментарий авторы не понимали и не утруждали себя погружением в детали на предмет зачем это нужно, как оно работает и к месту ли. Что закономерно, ведь, как и было сказано, важны soft-skills. А стало быть на хрен идут проблемы продукта — тут надо показать коллегам какой ты умный и красивый. Вершина и кульминация этого буйства сознания — использование самописной монады , которая где-то в середине стека вызовов прагматично разворачивается в . Функциональное программирование вам, так сказать, в production.Выстроив в голове модель сущностей, открываешь для себя другую особенность. Называется \"без штанов, но в шляпе\". Приведу абстрактный пример: вообразите себе витиеватые заросли Repository Pattern, всё по науке, интерфейс-реализация, в разных неймспейсах, с заделом на тестирование. Вот вся эта красота развешена поверх… статического подключения к БД! Такое нам в Новосибирск из Индии везут на рефакторинг! Тоннами! Я ещё будучи джуном понял, почему подключение к БД нельзя пихать в статический контекст. Что же помешало \"лучшим умам\" не наступить на эти грабли? Видимо, тот факт что про грамотное управление лайфтаймом подключения не расскажешь на тим-митинге и внутренней конфе. А вот прочитать статью на википедии и красиво всё разложить по репозиториям — вполне себе социально одобряемое. Десять soft skills из десяти.Обычно подобный треш и угар в системе пресекается системным архитектором. Но это не наш случай: в дополнение к soft-skills, тут полный agile. То есть предполагается, что все сотрудники — профессиональные инженеры, которые сами могут договориться и принять правильное техническое решение. Вкусно, как Orbit со вкусом design by committee. Видавший виды руководитель знает, что agile и делегирование принятия технических решений команде на практике означает \"слабоумие и отвага\", если не проводить жесточайшего кадрового отбора по хард-скиллам. Но чтобы организовать такой отбор во-первых нужен человек неприлично высокой квалификации, который и будет проводить собеседование, а во-вторых — опытный управленец с намётанным глазом.В рамках своей первой и единственной задачи я разгребал код, написаный местным техническим директором. Что ж… если человек не может спроектировать простое консольное приложение, принимающее флаги и делающее действия, то строгий кадровый отбор по хард-скиллам — явно история не про него. Вот и остаётся писать в буклетах \"процесс разработки не нуждается в менеджерах\" и загадочно улыбаться.Сам по себе отвратительный код — это нормально. Для какого-нибудь аутсорса. Разница в том, что аутсорс-компания обычно не претендует на лавры best place for work и какой-то особый уровень экспертизы. Да и лица там не настолько высоконагружены, чего греха таить.Кстати, о лицахВообще я не очень хорошо разбираюсь в людях, предпочитаю всё-таки системы. Но тут сам б-г велел, ведь радужно-оптимистичные статьи жанра \"личностный рост для разработчика\" предписывают работать с талантливыми людьми. Сам не читал, но что-то такое слышал на краю Интернета. Грех не воспользоваться случаем.И вот впервые в жизни я увидел молодых мальчиков и девочек с высокодуховными лицами, лоснящихся от высоких зарплат. Они не ходят, они как будто парят над землёй, стоя на облаке из квалификации. Ну, думаю, наконец-то. Вот они — настоящие инженеры. Сбылась мечта идиота, я работаю не с аутсорс-недоучками и вайтишниками, а с самыми, что ни на есть мозгами. Которые в курсе трендов и технологий! Я обратился к людям из \"самой звёздной команды\"(tm) в попытке поговорить с ними о технических штуках, рассказать о том, через что сам прошёл, обсудить тенденции, архитектуры разных вещей (в том числе и самой системы)...Видимо, что-то пошло не так. В ответ я получил пачку и без того мне известных buzzword-ов, одухотворённо-покровительственный взгляд и отшучивание. Всю первую неделю я гадал — что же не так? Может я как-то… не знаю… Вопросы не те задаю? Или, может, надо не про себя рассказывать, а больше вопросов задавать, попросить научить меня чему-нибудь?Всё оказалось гораздо проще. Технические дискуссии коллег не интересуют. Поначалу казалось что их вообще мало что интересует, но потом я просёк фишку. \"Высоконагруженные лица\" оживляются на разговорах о чём-то более мирском. Ну вы знаете, не об этих ваших абстракциях, паттернах и технологиях, а о чём по-проще: кто в каком ресторане обедал, где провести тимбилдинг, куда поехать в отпуск, кто какой гаджет купил и прочие темы \"за жизнь\" \"за покупку второй бэхи\".Тут у меня, наверное, нет комментариев. Видимо вот такой он, градус дискуссии профессионалов высокого класса. И ничего с этим не поделаешь.ИтогВот что мне всю жизнь непонятно — почему инвесторы вкладываются в такие компании? Предположим, что у меня были бы деньги на долю и я хочу разобраться: а что тут, собственно, покупать? Обычно в стартапах покупают рост в надежде, что он будет взрывной. Но взрывной рост сложно организовать без продукта, попадающего в голубой океан пользовательских потребностей. Здесь требуются удачливые визионеры, грамотные маркетологи, Product Manager-ы и работающий как часы продакшен. В TargetProcess: единственный визионер (он же основатель, он же Миша Дубаков) ушёл с продукта, плотняком ударился в идею околокорпоративного no-code. TargetProcess после этого начал заниматься хаотичным метанием в надежде догнать Jira под руководством каких-то сомнительных личностей.Продакшен? Увы, поверхностный аудит кода и разговор с людьми отчётливо показал что продакшен больше интересует красивая жизнь, нежели продукт или технологии.Взрывной рост сложно пережить без чёткого управления и подготовленных процессов. Здесь уровень разгильдяйства вкупе с возрастом предприятия даёт явное понимание что людей, способных внедрить и настроить процессы в компании нет и никогда не было. Документация, онбординг, ответственные, передача информации? По всем пунктам провал. Взрывной рост разорвёт всю конструкцию на куски по наложенным на коленке швам. Однако TargetProcess не уникален. Подобных компаний на рынке полно. Думаю, будет не лишним написать пару советов как не угодить в местечковый Theranos.Как не наступить на мои граблиЯ детально переварил свой опыт, поговорил со знакомыми из кадрового бизнеса, расспросил успешно релоцировавшихся как прошло у них, почитал интернет. На основе полученной информации я составил свой список основных моментов, которые необходимо учитывать при релокации. Как видите, откровенный трешак, маскирующийся под серьёзный бизнес на рынке присутствует, поэтому надо держать ухо востро, чтобы не оказаться в жопе. Мне видится так, что эта информация, написанная моими нервами, деньгами и психическим здоровьем будет полезной для желающих переехать. Да и в целом держите это в голове при любой смене места работы.Первое, что надо помнить при релокейте — вы в заведомо более рисковом положении, нежели компания. У вас меньше и денег, и времени, и нервов. И правовое поле не ваше, и территория чужая. Вы в максимально уязвимом положении. Кинуть вас и оставить ни с чем — проще, чем отобрать леденец у ребёнка. Поэтому надо выбивать из принимающей стороны максимальные бонусы. Это не \"программисты зажрались\", а необходимая мера страховки для обеих сторон: вы худо-бедно приобретаете уверенность, что даже если что-то пойдёт не так — вы не окажетесь один на один с полной жопой. Компания вкладывая деньги в ваш переезд, верифицирует управленческое решение и страхует себя от негативных отзывов в будущем. Короче, даже не начинайте диалог о релокации без обсуждения релокейшн-пакета и даже не пытайтесь обеспечить его своими руками, если компания не предлагает. Серьёзно, просто не надо.В рамках релокейшн-пакета требуйте:Полную или частичную оплату переезда. Как минимум билет в одну сторону вам должны оплатить. Совсем прекрасно если вас встретят в аэропорту или куда вы там прибываете;Временного размещения. Требуйте предоставления корпоративной квартиры или отеля на период, пока вы не найдёте постоянное жильё. Совсем хорошо если компания помогает с поисками;Relocation bonus. Чтобы к первым вашим зарплатам была прибавка на основе тот факта, что вы переехали. Обычно у переехавших с деньгами не очень, поэтому помощь компании необходима. Совсем хорошо если бонус единовременный и выдаётся сразу;Серебряный парашют. Редко, но такое бывает. Это формальное обязательство выплатить вам компенсацию (обычно в размере нескольких зарплат) в случае увольнения в первые 1-2-6-12 месяцев (как договоритесь);Оформления приглашений, виз (в том числе для членов семьи), страховок и прочих въездных и не очень документов. В идеале — без вашего участия.Удостоверьтесь заранее:Что google, GlassDoor, любые сайты с отзывами не выдают о компании ничего плохого. Если есть хоть один (один!) негативный отзыв — ищите другой вариант. Поверьте, это не та рулетка, в которую вам стоит играть;Что в целевой компании есть отработанный процесс онбординга новых сотрудников;Что трудовой договор не подразумевает расторжения ранее определённого срока (так же именуемого испытательным);Что компания ранее уже занималась трудоустройством релоцирующихся сотрудников. Это чтобы в самый неподходящий момент кадровики и бухгалтеры не начали судорожно звонить в миграционную службу и узнавать какой пакет документов, в какие сроки и куда надо предоставить. Совсем хорошо если у компании есть опыт релокации именно из вашей страны;Что вы будете работать именно с теми людьми, которые вас собеседовали;Что мотивация вашего найма — не \"абы взять\" на потеху инвестора, а необходимость решения конкретных проблем нанимающей стороны. Спрашивайте явно на собеседовании — \"зачем вы меня нанимаете? какая у вас конкретно боль?\";Что у компании есть чёткая и понятная всем сторонам политика увольнений.Вообще, про увольнения, конечно, я рекомендую прямо сейчас поговорить с вашим руководством. Поймайте своего непосредственного начальника за пуговицу и добейтесь ответа на вопрос \"при каких условиях вы меня уволите\"? Один мой хороший знакомый предложил отличную формулировку: \"какое моё поведение приведёт к вашему решению о моём увольнении?\". Тут самое страшное — даже не жёсткость условий, а определённость, с которой вам дали ответ. Помните — если руководитель не понимает за что людей надо увольнять, а за что — нет, то вы будете уволены в самый неожиданный момент по самой неожиданной причине. Совсем хорошо будет сопоставить ответ на этот вопрос с трудовым законодательством целевой страны. Если политики увольнения в компании нет, то это легитимная причина для пересмотра вашей зарплаты в сторону повышения в связи с необходимостью покрытия рисков. Или смены работы на место, где управлять умеют немного лучше.ПослесловиеЯ хочу поблагодарить ребят из подкаста \"Мы обречены\" и Филу лично за то, что не остались глухи к моей ситуации и сильно помогли мне успокоиться, взять себя в руки и написать слаженный текст о произошедшем. Спасибо, ребята, без вас я бы не справился — совсем одному переживать такое было бы крайне тяжело. Эта история слишком сильно меня подкосила и выбила из колеи, но с вашей помощью я выгреб.В феврале я нашёл другую работу и мои нынешние коллеги, должность и зарплата меня очень радуют.Потом случился коронакризис. А потом, летом в Беларуси произошли всем известные события. Не смотря на подпорченное первое впечатление, мне посчастливилось встретить очень много совершенно прекрасных людей, поддержать их в меру возможностей и посодействовать им. Беларусь прекрасна, белорусы абсолютно замечательные. Но, как и в любом обществе, здесь так же есть и хитрые шарлатаны, и безответственные дураки, которым нельзя доверять и проходимцы от IT-индустрии, возомнившие себя мессиями. Я категорически не желаю чтобы персонально мой негативный опыт и конкретно TargetProcess бросал тень на всё белорусское IT. Тот факт, что лично мне попалась чудовищно токсичная компания с непрофессиональным руководством, вовсе не означает, что везде так. Нет.В Беларуси полно замечательных кадров, интересных компаний, умных и достойных людей. Видимо, я просто крайне неудачно выбрал представителей индустрии для начала работы.Берегите себя.P.S: совсем забыл подсветить ещё один маленький, но интересный момент. Сразу после инцидента вакансия разработчика на сайте TargetProcess поменялась с Senior на Junior. А через некоторое время и вовсе исчезла. Вот теперь всё.UPD: статью перепечатал портал dev.by запросив комментарии у компании."
    },
    "doc_13": {
        "url": "https://habr.com/ru/post/216315/",
        "title": "Банкомат. Некоторые особенности",
        "text": "Никого из нас не удивить банкоматом (АТМ). Даже люди старшего поколения мало-помалу привыкли к этому устройству и свою пенсию в состоянии как-то снять. Однако кроме всего прочего — банкомат – это крайне занятная штука с технической и организационной точки зрения. Даже сотрудники банковских учреждений (в т.ч. и связанных с платежными картами) не всегда представляют себе тонкости его работы. В прошлой жизни я достаточно много лет был связан с платежными картами и обслуживанием банкоматов. Мне доводилось и отогревать его феном и выковыривать оттуда по кусочкам мышь кровь кишки, застрявшую в обнимку с купюрами. Даже спалил один из подконтрольных банкоматов. Дважды. Поэтому поделюсь некоторыми, на мой взгляд, интересными техническими нюансами в работе АТМ. К сожалению основной упор этой моей деятельности приходился на тот период, когда даже фотоаппарат 0,3Мп в телефоне это была немалая роскошь – посему собственных фотографий у меня практически нет. 40 купюрБанкомат выдаёт не более 40 купюр за один раз. Связано это с самим механизмом подачи. Поэтому – снимая деньги в банкомате – если он выводит на экране «В наличии купюры 50, 200» — а вам нужно снять большУю сумму – сразу можете прикинуть сколько максимум денег банкомат может вам выдать. Если попробуете ввести больше чем 40 банкнот — банкомат подумает и откажет. А вы останетесь гадать почему.30 секундИнтервал ответа для каждой операции, после действия клиента должен быть не более 30 секунд. Это требование международных платежных систем. Клиент вставил карту – можно задуматься на 29 секунд и дать ответ. Выбрал пункт меню — опять можно подумать. И так далее. Раньше, когда связь была не особо хорошей – это был важный момент. Сейчас – с этим полегче.Белая карта супервизораДа — именно такая. Идёт с каждым банкоматом в комплекте. Как и обычные карты — тоже имеет PIN-код и срок действия. Может подходить и к другим банкоматам. Тут детальных подробностей не могу сообщить – по ошибке я карту от одного АТМ использовал для другого своего АТМ и она работала – так и должно быть или она работает в рамках одного ПЦ (процессингового центра) – не знаю. Надо было видимо пойти в банкомат другого банка и проверить. Но сидеть было неохота.Так вот – карта требуется для выполнения инкассации/аудита банкомата и некоторых технических функций – можно выдать сколько угодно купюр из кассет <godmode ON>, пооткрывать дверцей выдачи, помигать индикаторами и дисплеями и т.п. Три раза неправильно ввел код на карте – она блокируется до следующего дня. МозгиКроме «системного блока» (назовём его так) в клавиатуре банкомата, в блоке кард-ридера и дисплее есть свои мозги. Нельзя просто так взять и подключить детали одного АТМ к другому. При подключении новых устройств требуется вводить криптографические 3DES-ключи. Они записываются в эти подключаемые устройства и позволяют им работать с этим конкретным АТМ. Ключи представляют собой 2 конверта (как конверты PIN-кода для обычных карт) в которых находятся последовательность цифр. Два человека получают по конверту и вводят ключи.Денежные кассетыВ банкомате как правило 4-6 кассет с купюрами. В кассету помещается ~2.5 тысячи банкнот. Каждая кассета настроена на конкретную банкноту. Поэтому, даже если при инкассации АТМ перепутать кассеты местами – всё равно чип в кассете – не даст выдавать оттуда денег. Обратная сторона медали – если в кассету для двадцаток загрузить полтинники – то (при изрядной доли везения – если характеристики купюр более-менее похожи) АТМ начнёт выдавать купюры большего номинала. Кассир банкомата и зав.кассой сразу могут раскошеливаться и покрывать недостачу. Бывало и такое…Кассета выбраковкиСклеенные банкноты, банкноты, которые не нравятся по тем или иным причинам банкомату, а также деньги, которые вы не взяли из щели выдачи – откидываются в кассету выбраковки. По размерам она меньше в два раза стандартной.Банкомату бывает холодноУличный банкомат имеет 100% влагозащищенность. Однако он чувствителен к холоду. В ранних моделях АТМ не было пакета «Русская зима» нагревательных элементов и поэтому когда на дворе температура падала ниже 10-15 градусов (мороза) — АТМ начинал капризничать. Особенно актуально – когда АТМ стоит в витрине и его передняя (внутренняя) часть фактически тоже упирается в витрину и мерзнет. АТМ может вообще не включаться, т.к. диагностика возмущается и требует тепла для банкомата (хозяйке на заметку: чтобы АТМ запустился нужно в этот момент дуть феном на термодатчик). Может не работать механизм выдачи денег и прочие прелести.Изъятые картыВ банкомате люди оставляют свои карты. Иногда случайно, иногда – введя неправильно три раза PIN-код, иногда – ты снимаешь деньги, пропадает напряжение — банкомат выключается и как бы всё… дальше по выбору – стоишь сколько сможешь и ждешь свою карту (которая, что характерно, когда появится напряжение – выедет наружу – и её если не ты – то кто-то подцепит, если успеет) либо идешь домой, а карту банкомат потом заберёт к себе. За картами зачастую никто не обращался. За несколько лет мы насобирали изрядную коллекцию карт разных банков. В т.ч. иностранных.Старые АТМВ Украину в 2002-2004 годах привозили достаточно много бывших в употреблении АТМ из Европы/США. Здесь их приводили в божеский вид, делали обслуживание и продавали банкам. Они были приблизительно в 8-12 раз дешевле (5-8 тысяч долларов) новых современных банкоматов (80-110 тысяч долларов). Работали они, скажем прямо, паршиво, но т.к. карточный бизнес ещё только зарождался и доходы были невелики (банкоматы ставятся не для своих клиентов, а для чужих) – новые АТМ в требуемых объемах позволить себе могли не все банки. Поэтому ставили то, что подешевле. На АТМ были старые ЭЛТ-мониторы с выгоревшими эмблемами европейских банков (предыдущих владельцев). Кошерная операционная система для АТМ того времени – OS/2.Сейф банкоматаВ нём хранятся кассеты с деньгами и кассета выбраковки. Представляет собой, как правило, сейф с ключом и поворотным колесом. Код колеса нужно менять регулярно. Очень неприятно, когда при смене кода и закрытии дверцы ты понимаешь, что код не подходит и сейф уже не открывается. ЧекиПринтеры используются матричные (старые модели АТМ) и термопринтеры. Бумажная лента для чеков – в бобинах. Обычно 2-5 тысяч чеков на бобине. Проблема матричных – сложновато найти картриджи. Проблема термопринтеров – когда холодно и ты греешь феном банкомат – если попасть струёй воздуха на ленту чеков – будет чёрная лента.МышьЗима. Банкомат находился в отделении банка, но в дальнем пустом помещении, а лицом стоял за окно. Холодно. Мышь нашла лазейку (в АТМ их много – подвод кабелей) и залезла внутрь греться. В итоге механизм подачи денег её прижал от души. Я там оказался, т.к. банкомат перестал работать и из кассеты выбраковки торчали деньги в крови. Пришлось разобрать половину банкомата – чтобы достать то что осталось от мыши и три порванных купюры. Погибла смертью храбрых, но была при деньгах.Если статья была интересна — могу продолжить тему про банковские железяки.UPD 2014/03/21: Продолжение: Карточные игрыВ качестве бонуса: Конфигурация старенького банкомата NCR 5684 (для понимания комплектующих)В 2003 году такой б/у банкомат стоил 46740 грн. (8 тысяч долларов) "
    },
    "doc_14": {
        "url": "https://habr.com/ru/post/347760/",
        "title": "И так сойдёт… или как данные 14 миллионов россиян оказались у меня в руках",
        "text": "Одиноким вечером, глядя на свою пустую зачётку и осознавая, что конец близок, я снова задумался о том, как бы мне сейчас собрать сумку, или даже просто рюкзак, положить туда рубашку, шорты и свалить в тёплую страну. Было бы хорошо, да вот с дипломом живётся намного лучше. Во всяком случае, мне всегда так говорят.Также часто слышал много историй про людей, которые приходили на собеседования с красными дипломами МГУ, но при этом абсолютно не разбирались в своей специальности, а потом на корпоративах признавались, что диплом у них купленный.Но времена сейчас другие, сейчас 21 век, век больших возможностей, любой работодатель, который умеет пользоваться мышкой и знает, как выглядит браузер на рабочем столе, может проверить данные диплома. Каждый диплом, который выдаётся учебным заведением, теперь регистрируется в едином реестре, доступ к которому есть у каждого через сайт Федеральной службы по надзору в сфере образования и науки.Внимание: не пытайтесь повторять действия, описанные в публикации и им подобные. Помните о ст. 272 УК РФ «Неправомерный доступ к компьютерной информации».Для получение информации о документе об образовании достаточно просто заполнить форму, передвинуть слайдер и нажать кнопку. Вам либо покажут информацию о документе, либо скажут, что такого нет (но ещё рано обвинять соискателя в обмане, мало ли, что могло произойти).Ну и пока я смотрел на эту форму, решил я с ней поиграться. Повводил всякой чепухи, и бац — на поле, в которое было введено 1', я получаю такой response:Голый SQL Injection. Очевидно, что задачи продумать обработку ошибок перед разработчиком не было. Задача была сделать сервис, который работает. Сервис, который является гарантом. Так одинокий вечер превратился в весёлую одинокую ночь.Ещё будучи подростком я очень любил всякие крутые истории про хакеров, а после того, как решил заняться программированием, изредка почитывал и интересные статьи по взлому и прочему. Так что то, что нужно делать дальше — я знал.Так как разработчик этого сервиса дал нам удовольствие видеть ещё и часть запроса, то мы можем с уверенностью предположить, что это SELECT запрос. Теперь нам нужно как-то обнулить действие запроса, записанного в php-скрипте, а потом с помощью переменной вставить свой.Для обнуления запроса достаточно просто добавить невозможное условие и закомментировать последующие строки запроса, что-то наподобие: Инъекция...me) = UPPER('1') AND (1=0)) — ')) AND (doc.education_level_id = '4') AND (U…В ответ просто пришло сообщение о том, что документ не найден.Также пробовал использовать вместо невозможного условия, наоборот, очевидные. А именно пробовал искать какой-либо документ по id. Писал id=1, id=1024 и прочее, но результатов не дало. Видимо, id давно перевалило за тысячи (спойлер: за миллионы).Также я совершенно не надеялся на то, что запрос придёт без ошибки. Я был уверен, что пробелы будут экранироваться, удаляться, запрещаться, ещё что-нибудь. Ведь в форме на странице поиска ввести фамилию с пробелами невозможно. Но всё оказалось в разы проще.Ну а теперь бы хотелось вытащить что-то действительно интересное. Изменить структуру ответа мы не можем никак, то есть если в запросе были, например, SELECT id, name, count, то так оно и останется. Значит надо подстраиваться, а для начала понять, какие же данные запрашиваются из БД, и, главное, сколько? Существует много способов узнать количество полей, но мне помог только ORDER BY. Как это работает?ORDER BY сделан для сортировки, но его синтаксис не требует обязательно указывать имя поля, достаточно указать его позицию в запросе. Если указать номер позиции больше, чем количество запрашиваемых полей — то будет ошибка. Методом перебора можно подобрать количество полей. Их оказалось 55.Хочется понять, с чем же мы работаем, что это за база данных такая? Предположим, что это MySQL, в MySQL есть функция Version(), которая возвращает версию БД. Применим:Инъекция...me) = UPPER('1') AND (1=0)) UNION SELECT 1,version(),тут ещё 53 поля, типы которых ещё надо определить методом подбора — ')) AND (doc.education_level_id = '4') AND (U…В ответ пришёл JSON, в котором было:Отлично, мы знаем систему, версию БД (под неё вроде даже эксплоиты были). Поле для действия расширилось. Узнаём, как выглядит запрос:Инъекция...me) = UPPER('1') AND (1=0)) UNION SELECT 1,current_query(),тут ещё 53 поля, типы которых ещё надо определить методом подбора — ')) AND (doc.education_level_id = '4') AND (U…Ответ:Вся картина перед нами.Попробуем узнать, что же за таблицы есть во всей базе данных:Инъекция...me) = UPPER('1') AND (1=0)) UNION SELECT 1,table_name,тут ещё 53 поля, типы которых ещё надо определить методом подбора FROM information_schema.tables — ')) AND (doc.education_level_id = '4') AND (U…Таким образом получили все таблицы. Узнаём столбцы каждой таблицы следующим образом:Инъекция...me) = UPPER('1') AND (1=0)) UNION SELECT 1,CONCAT(column_name,' ',data_type,' ',is_nullable),тут ещё 53 поля, типы которых ещё надо определить методом подбора FROM information_schema.columns WHERE table_name='Какое-то имя таблицы' — ')) AND (doc.education_level_id = '4') AND (U…Итак, зная структуру базы данных, я написал скрипт на Питон и выкачал все самые интересные на мой взгляд данные. А именно:Таблицу с дипломами об образовании (серия, номер, год поступления, год окончания, СНИЛС!, ИНН!!, серия и номер паспорта (честно говоря, у всех записей поля пустые, но сам факт!), дата рождения, национальность (зачем?), учебная организация, выдавшая документ), таблицу с гражданами с образованием (там всё проще: ФИО и всё), таблицу с пользователями системы (стандартно, логин, email, и, НЕОЖИДАНО, md5 хэш пароля, хоть не сам пароль), отдельная таблица admin с одной записью (так же: логин, хэш пароля и прочее), таблица с информацией об учебных заведениях (кто начальник, email, телефон, лицензия — в общем всё, что и так есть в открытом доступе) и ещё кучу вспомогательных таблиц.По объёмам получилось: около 14 000 000 документов об образовании, около 14 000 000 записей с данными о бывших студентах, 1322 пользователя системы, 1 админ, который логинится по будням в системе, видимо, когда на работу приходит, 3391 учебное заведение и горы непонятной информации типа ОКОГУ и прочее. База весом 5 гб.А теперь представьте, сколько времени это качалось. Вы думаете, кто-то заметил? Может быть сервис резко отключился, ip заблокировали или ещё что-то? НЕТ!Конечно, целью не является использовать эту информацию в корыстных целях (да я и не представляю, как). Иначе бы я не писал статью здесь. Но и писать лично администрации сайта или кто там за него отвечает я тоже не горю желанием, хватило истории про Микротех.Дополнительно решил проверить хэши по радужным таблицам. Не уверен, конечно, что они хэшировались именно голым md5, но, во всяком случае, в открытых базах данных совпадений ни к одному хэшу не нашлось. Или я что-то не умею.Мог бы я продолжить и получить доступ в систему? Смог бы я сам изменять записи и добавлять свои? Вполне возможно, но я решил этого не делать. Да и сессию надо закрывать, без диплома-то никак…UPD: Большое спасибо всем, кто эту новость разнёс. Надеюсь, эта история закрыта, так как баг на оригинальном сайте пофиксили. Буквально через час после опубликования статьи сайт ограничили, а через несколько часов сайт снова восстановил работу, но уже без обнаруженной уязвимости. Очень рад, что администрация сайта так быстро и слажено отреагировала. Приношу извинения администрации сайта за то, что пришлось так кардинально сообщить об уязвимости, возможно, я был глубоко не прав, но дыра была заделана быстро и без промедления. Приношу извинения всем, кому пришлось тяжело в этот понедельник из-за этого. Попытаюсь оправдать себя: конечно же, никакой базы у меня нет, на протяжении 3-ёх дней я эмулировал скачивание, надеясь, что необычный трафик заподозрят."
    },
    "doc_15": {
        "url": "https://habr.com/ru/post/543692/",
        "title": "Что не так с Лиспом?",
        "text": "Во-первых, позвольте мне сказать, что лично я не думаю, что с Лиспом что-то особенно не так. Таким образом, в этом эссе я не буду пытаться отвечать на риторический вопрос в заголовке. Тем не менее, я попытаюсь проанализировать некоторые часто повторяющиеся критические замечания в адрес Lisp, чтобы пролить свет на этот вопрос и на то, почему его так часто задают. Позвольте мне начать с пары слов для тех кто не в курсе. Lisp - это семейство языков, включая Common Lisp, Emacs Lisp и несколько диалектов, которые сегодня используются лишь изредка. Иногда даже язык Scheme считается членом этого семейства. Считать ли это верным, зависит от того, каково ваше точное определение Lisp, но это является слишком сложным (и неинтересным) вопросом для этого эссе. В основном я буду использовать Lisp для обозначения Common Lisp, а иногда, когда это удобно, также буду включать Emacs Lisp. Lisp существует уже давно, хотя он был значительно преобразован с момента своего изобретения (некоторые говорят, что он был «открыт»). Сегодня это современный, мультипарадигменный язык, который обладает, пожалуй, самыми сложными фичами из всех используемых языков общего назначения (объектная система CLOS, языковые макросы, специальные макросы чтения, система условий и рестартов и т. д.). Первый вопрос, который часто задают: «Если Lisp настолько хорош, почему он не популярен?». Люди, которые задают такой вопрос, обычно предполагают, что «хороший» подразумевает «популярный», и поэтому ищут какую-то часть Lisp, которая НЕ является хорошей, что могло бы объяснить, почему он не популярен. Однако нет абсолютно никаких оснований предполагать, что «хороший» подразумевает «популярный», поэтому вопрос действительно довольно наивный. Но вместо того, чтобы просто игнорировать этот вопрос в некоторых частях этого эссе, я на мгновение приму его за чистую монету и попытаюсь объяснить, почему Lisp не так популярен, как хотели бы некоторые его последователи.  Однако позвольте мне сделать небольшое замечание. Lisp не настолько непопулярный, как можно думать (и теперь для удобства я добавлю Emacs Lisp). В недавнем подсчете количества строк Lisp занял 4-е место по количеству строк исходного кода (SLOC) в дистрибутиве Debian GNU/Linux (Woody) после C, C++ и bash с примерно 4 миллионами SLOC (около 4%), опередив Perl, Python, ML, Fortran и т. д. Это довольно популярный язык, лишь несколько менее популярный, чем C и C++. Конечно, количество SLOC в Debian GNU/Linux - не единственный возможный показатель популярности, но это показатель, как и любой другой.  Недавно я увидел статью в comp.lang.lisp, в которой автор серьезно «знал», что с Lisp должно быть что-то не так, потому что, если все будет хорошо, рынок обнаружит это, и Lisp начнет использоваться в программных проектах повсюду. Тот факт, что этого не произошло, «доказал» автору, что с Лиспом ДОЛЖНО быть что-то не так, даже если он не знал, что именно. Такая наивная вера в способности свободного рынка продвигать добро и подавлять зло, в лучшем случае смехотворна, но на самом деле очень печальна, потому что приводит к некоторым очень неправильным предположениям и некоторым очень неправильным решениям.Возможно, в Lisp действительно что-то не так, потому что он, кажется, привлекает всевозможных психов, хотя, возможно, я просто не знаю, что это так и для других языков, или для любого другого человеческого артефакта. Обычно это проявляется в случае с Лиспом так: кто-то, плохо знакомый с Лиспом, впервые появляется в группе новостей comp.lang.lisp, дает очень умным и очень знающим людям урок о том, что они не поняли, почему Lisp непопулярен, и продолжает рассказывать им, как им следует изменить язык, чтобы исправить проблему (обычно, изменить синтаксис, чтобы избавиться от множества скобок), или просто сообщить им, что они сделали ошибку, и вместо этого следует использовать другой язык.  Я считаю, что эти психи являются ключом к разгадке того, почему Lisp не так популярен, как мы думаем он того заслуживает. Lisp значительно отличается от того, что большинство людей уже знает и ожидает от языка программирования, поэтому они просто не хотят прилагать усилий. В другом эссе я назвал этих людей «ориентированными на производительность», и они (к сожалению) составляют подавляющее большинство людей в целом, хотя, возможно, и непропорционально большое среди разработчиков программного обеспечения. Подводя итог этому эссе, они просто жертвы невероятно сильного психологического стремления (в некоторой степени, существующего во всех нас), которое заставляет человека пытаться обозначить что-то новое как плохое или бесполезное, просто чтобы избежать тяжелой работы, необходимости учиться этому. Чем страннее новая вещь (например, Lisp), тем сложнее человек оценивает работу по ее изучению и тем важнее становится объявить ее плохой или бесполезной.  Итак, как нам исправить Lisp, чтобы сделать его более привлекательным для таких людей? Лично я не думаю, что мы должны пытаться изменить что-то в Лиспе, чтобы привлечь этих людей. Почему быть популярным - это все, что имеет значение в языке программирования?!Я часто вижу очень показательную параллель, проводимую между Лиспом и хорошей скрипкой. Должны ли мы изменять скрипки, чтобы привлечь людей, которые привыкли играть на аккордеоне и не хотят учиться игре на скрипке, потому что это слишком сложно и слишком отличается от аккордеона? Конечно, нет! У скрипки есть свое место, и она становится прекрасным инструментом, когда играет тот, кто действительно владеет ею. Lisp - отличный язык программирования, если его использует тот, кто знает, как им пользоваться. Упускать это, чтобы привлечь посредственных программистов, экономящих когнитивные ресурсы, было бы серьезной ошибкой. В некоторых (в частности, французских) группах новостей меня называли «элитистом» за то, что я говорил такие вещи, но я думаю, что причина этого в том, что программирование по-прежнему воспринимается как деятельность, которую любой, без какой-либо подготовки (чем меньше тренировок, тем лучше), кажется, должен уметь. Мы даже превозносим успешных программистов, бросивших школу. Почему люди думают, что это нормально для разработки программного обеспечения, но не для, скажем, операций на сердце или игры на скрипке, я не понимаю. Некоторые люди думают, что с Лиспом что-то не так, потому что практически невозможно заставить программное обеспечение работать без изменений на всех платформах (комбинациях Лисп-систем и операционных систем), тогда как с чем-то вроде Python или Ruby это легко. Ясно же, что здесь с Лиспом что-то не так, верно? Нет, на самом деле нет! Lisp - это не отдельная реализация, а ANSI-стандарт (теперь уже Common Lisp). Как и многие другие стандарты (например, ANSI-стандарт для языка программирования Си), он не содержит всего, что вам может понадобиться при написании приложений, например сокетов, синтаксических анализаторов XML, библиотек SQL и т. д. Вместо этого предоставляются отдельные библиотеки, которые в случае Lisp либо поставляются поставщиком коммерческой системы Lisp, либо бесплатно авторами свободных библиотек для других разработчиков. Таким образом, предполагаемая трудность состоит в том, чтобы написать приложение, которое могло бы работать со всеми этими, возможно, взаимно несовместимыми библиотеками. Разработчик, столкнувшийся с этой проблемой, обычно очень расстраивается, жалуется в comp.lang.lisp, что мы должны исправить стандарт ANSI Common Lisp как можно скорее, чтобы включить эти библиотеки. Подождите секунду! Почему это не проблема для таких языков, как Python и Ruby, которые даже НЕ ИМЕЮТ стандарта ANSI? Почему люди не жалуются громко, что они даже не могут написать кросс-платформенный цикл или оператор присваивания на Python, потому что способ сделать это не стандартизирован? Ответ: потому что эти люди путают теплое с мягким или, в данном случае, язык, определяемый (в основном) одной реализацией, и стандарт с несколькими реализациями. Вот как увидеть, насколько это сравнение абсурдно: если бы я написал новую реализацию Python, в которой не было бы сокетов, разве это внезапно ухудшило бы положение языка Python, в сравнении с тем, что было раньше? Конечно, нет! Точно так же люди, которые хотят использовать язык с единственной реализацией и тем самым рискуют, что язык может измениться в одночасье, что, возможно, сделает большую часть некоторых крупных инвестиций устаревшими, должны принять то же самое с Lisp и выбрать единственную реализацию, которая работает во всех операционных системах. Это будет не хуже, чем у любого языка с одной реализацией.Некоторые ВНУТРИ Lisp-сообщества думают, что Lisp не так популярен, как он того заслуживает, потому что в Common Lisp есть недостатки. Таким образом, предполагаемое решение проблемы состоит в создании лучшего диалекта Lisp.Откровенно говоря, если бы это было правдой, то ни у одного другого языка не было бы ни единого последователя, учитывая количество недостатков в других языках по сравнению с недостатками Common Lisp. Одной из типичных попыток создать лучший Lisp был Dylan (больше похожий на Scheme, чем на Lisp, на самом деле), который определяет синтаксис без скобок для Lisp-подобного языка, тем самым по существу лишая Lisp одного из его, пожалуй, величайших преимуществ, а именно почти однозначного соответствия между внешним синтаксисом и внутренним представлением кода, что является важной фичей для создания макросов. А Dylan не более популярен, чем Common Lisp. В последнее время мы регулярно видим людей (обычно также в сообществе Lisp), у которых есть идеальное объяснение того, почему Lisp не так популярен, как он того заслуживает, а именно, что нет ни одной бесплатной реализации, которая работала бы во всех операционных системах и в которой были бы ВСЕ необходимые библиотеки, как в Python и Ruby для веб-программирования и т. д. (мы уже видели, что в стандарте ANSI Common Lisp  их нет). Типичная статья одного из этих людей очень снисходительна. Недавно я видел фразы, похожие на «Простите, ребята, но интерфейсы командной строки больше не подходят», «в наши дни все основано на графическом интерфейсе, а у вас даже нет стандартной библиотеки графического интерфейса». Общий тон, кажется, обвиняет некоторое вымышленное сообщество Lisp в том, что оно не понимает, что именно требуется Lisp с точки зрения библиотек, чтобы стать более популярным. Я согласен, что они правы, что на данный момент нет достаточно хороших библиотек для всех применений. Однако я серьезно сомневаюсь, что решение этой проблемы каким-либо образом повлияет на популярность Lisp.  Хуже того, я не понимаю, кому адресованы эти статьи. Некоторые из них, без сомнения, предназначены только для того, чтобы автор отказался от Lisp в пользу более популярного языка, делая это с чистой совестью («это не моя вина, я должен был сделать это, потому что не смог получить нужные мне библиотеки». Все они определенно имеют негативный эффект (желаемый или нежелательный) на людей, которые могут рассматривать использование Lisp. Для людей, которые не знают Lisp и НЕ рассматривают возможность его использования, они определенно не имеют абсолютно никакого эффекта. Большинство авторов этих статей, кажется, серьезно думают, что каким-то образом они будут серьезно восприняты участниками Lisp-сообщества, и что эти участники осознают свои ошибки и начнут предоставлять высококачественные библиотеки для веб-программирования и синтаксического анализа XML бесплатно и сразу. Я не думаю, что это случится. Чтобы понять, почему, мы можем (для этой цели) разделить членов \"сообщества Lisp\" на три типа людей:- тех, кто уже тратит значительную энергию и время на написание таких библиотек, - тех, кто не имеет возможности писать такие библиотеки. (из-за недостатка знаний, энергии или времени), и- тех, у кого есть возможность сделать это, но они не делают этого. Люди из первой категории не собираются менять свое поведение в результате такой статьи, за исключением того, что им может быть грустно видеть, что их работа не признается, и, возможно, они сдадутся. Люди из второй категории не собираются вдруг начать писать нужные библиотеки. Таким образом, остается третья категория, в которую обычно входят авторы этих статей, взаимно обвиняющие друг друга в том, что они не предоставляют инструменты, которые им нужны. Лично я считаю, что было бы лучше использовать их время и энергию, чтобы начать писать некоторые из этих библиотек (в качестве хороших примеров для других), чем сетовать на то, что этих библиотек не существует. Меня, в основном, не волнует, насколько популярен Lisp. Я использую Lisp не для того, чтобы набрать больше очков в соревновании по популярности. Я использую Lisp, потому что это лучший язык программирования, который я знаю. Я не думаю, что с Лиспом что-то особенно или серьезно не так. Возможно, на данный момент он не обеспечивает того, что некоторые люди ожидают от языка программирования (например, бесплатную кроссплатформенную реализацию со всеми библиотеками, которые могут вам понадобиться). Произойдет ли это когда-нибудь, я не знаю, и меня это не заботит (хотя я уважаю, что другие могут волноваться по этому поводу). Думаю, я знаю, что некоторым людям, которые хотят, чтобы это произошло, придется запачкать руки и просто сделать это. Никакие сетования не могут волшебным образом создать какие-либо библиотеки."
    },
    "doc_16": {
        "url": "https://habr.com/ru/post/147042/",
        "title": "Как воровать бензин с помощью Ассемблера (основано на реальных событиях)",
        "text": "Приветствую тебя, хабрачитатель! Под катом ты найдешь увлекательную историю, которую рассказчик поведает нам от первого лица. Я лишь с гордостью публикую впервые эту историю здесь, с разрешения и по просьбе автора, который пожелал остаться неизвестным.«Строго говоря, в названии статьи ошибка. Мы не воровали бензин, ни с помощью Ассемблера, ни с помощью электродрели. Мы вообще не воровали его. Просто жизнь заставила в свое время немножко изловчиться и перераспределить небольшую часть этого бензина в личные бензобаки, честно оплатив при этом весь бензин, до копейки. Но зачем же нужно было этим заниматься? Что ж, вспомним историю.Не очень далекую историю, а всего лишь 90-е годы. В нашем почти южном городе сложилась ситуация, когда просто негде было приобрести бензин. Ни с переплатой, ни по знакомству. Никак. Ненормальный, тяжелый дефицит бензина приостановил всякое желание поездить на личном автомобиле в личных целях. Разумеется, кто-то решал эту проблему очень значительным телефонным звонком, кто-то по-простому воровал бензин с предприятий, а вот у меня и моих коллег-инженеров таких возможностей не было. И тут оказалось, что силу интеллекта еще никто не отменял. Город должен был обеспечивать бензином спецмашины. Это не только автомобили милиции, скорой помощи и других экстренных спецслужб, это также немало начальственных машин, чьи пассажиры никак не желали терпеть нехватку бензина „как все“. Как же сделать, чтобы, несмотря на традиционную коррупцию, спецмашины всегда были с бензином? Помогла электроника.Небольшие технические детали: в то время уже была технологическая база для электронного учета бензина, уже было немало „персоналок“, иначе говоря, персональных компьютеров с мощным, скоростным процессором Intel 8086, а то и Intel 80286 с тактовой частотой аж до 16 MHz. Очень оперативно очень добросовестная и ответственная компания разработала комплекс по выдаче бензина с помощью пластиковых карточек. Настоящий чип внутри карточки обменивался с приемным устройством настоящими секретными кодами, и только эта система могла управлять автозаправочным оборудованием. Любое ручное управление было отключено и запломбировано. Оператор бензозаправки, по-простому заправщик, теперь сидел перед настоящим персональным компьютером, а водитель спецмашины вставлял карточку КУДА НАДО, и система наливала в бак бензин со строгим учетом, кому, куда, и сколько. В запломбированом компьютере был отключен дисковод, так что информационная защита была, как бы так сказать, железной.Почти железной.Наш бывший сотрудник в то время работал заправщиком на АЗС: время было сложное, и надо было кормить семью. То, что вы сейчас прочитаете, может вас удивить, но это было: никакие попытки договориться с разработчиками и установщиками системы ни к чему не привели. Да, ни к чему не привели. Эти честные парни даже и не думали раскрывать коды управления своей системой. А ведь очень хотелось покупать иногда хоть немного бензина. Выхода не было, пришлось использовать интеллект.Обеспечили небольшую поломку в персональном компьютере, автозаправочная станция на два дня прекратила работу. За первый день наладчики супер-системы почти запустили свою электронику, на другой день продолжали. Вечером первого дня управление бензоколонкой еще не работало. Профессиональные парни прекратили свою работу, сложили свои инструменты, перенесли остаток работы на завтра и ушли.Включился секундомер!Коршуны, любители программной мертвечины в количестве двух человек прибежали на бензозаправку. Понятно, что никто не пломбирует компьютер, когда завтра нужно продолжать работу, и когда система все равно не работает. Компьютер и в самом деле не был запломбирован. Очень быстро мы подключили чудесный, надежный дисковод для 5-дюймовых гибких магнитных дисков и записали на жесткий диск необходимое нам программное обеспечение. А обьем жесткого диска очень большой, целых 20 мегабайт, поместится что угодно. До этого времени наладчики строго следили, чтобы в операционной системе MS-DOS не было ничего лишнего, в файлах AUTOEXEC.BAT и CONFIG.SYS должно быть только то, что нужно, и не более. Так оно и было, поэтому решено было модернизировать драйвер клавиатуры и дисплея. Драйвер был именно тем, что нам надо. Он при работе всегда висит резидентом в оперативной памяти, и все знают, что он нужен, что без него не обойтись. Началась ответственная работа по модернизации драйвера.С помощью дизассемблера превратили программу драйвера в символьный вариант, в тот же драйвер, написанный на Ассемблере. Перехватывать вектор клавиатуры уже не нужно, драйвер и сам это делает. Зато в программу мы добавили возможность сохранять последовательность введенных с клавиатуры символов в своем небольшом буфере, и по мере наполнения буфера записывать эту информацию на диск, в неприметный, известный только драйверу файл. Также был перехвачен вектор для работы с файлами, и теперь любой вводимый с дисковода файл по мере открытия, считывания и закрытия аккуратно дублировался в хорошо стрятанном месте на жестком диске. Не забыли припрятать на диске также простой текстовый редактор и транслятор с Ассамблера. Компьютер был опять закрыт, дисковод отключен, а хорошо спрятанный разьем для подачи управляющих команд на блок-пункт опять был приведен в рабочее состояние.Настало утро, пришли профессионалы-электронщики. Они быстро закончили свою работу, потом вводили с гибких дисков свои секретные тестовые программы, всесторонне проверили работу системы, наконец, все было запломбировано и приведено в рабочее состояние. Бензозаправка для спецмашин опять заработала. А ведь эти парни действительно берегут свои секреты! Они тщательно убрали с жесткого диска весь тестирующий набор программ, оставили одну, надежно запароленную рабочую программу, внимательно перепаковали жесткий диск полезной программой SPEEDDISK.EXE и, выполнив свою работу, ушли. Теперь никто не сможет восстановить вытертые с диска файлы, после программы SPEEDDISK.EXE даже следа от них не остается. Остается, правда, обеспеченный нами дубль введенных файлов в том месте на диске, где нам нужно.Не буду хвалиться: не менее недели нашей работы по вечерам ушло на то, чтобы по-максимуму разобраться с чужим программым обеспечением, которое мы сумели для себя сохранить, несмотря на все попытки оградить нас от этих программ. Разобравшись с управлением, мы на ассемблере написали специальную программу, которая умела в обход всех счетчиков наливать 10 или 20 литров бензина, и делать это без пластиковых карточек. Никого мы не обманули, и никому в карман не залезли, просто сумели с помощью дополнительной обслуживающей программы заставить систему наливать бензин и в наши баки.А как же учет и контроль? Ведь количество бензина на заправке уменьшалось! Да, уменьшалось, и недостачу взыскивали с тех заправщиков, в чьи смены была недостача. Заправщики вносили в кассу те деньги, которые мы им платили за бензин.Вот так „группа товарищей“ с высшим образованием смогла облегчить для себя ситуацию с нехваткой бензина. Не для всех, а только для себя, никого при этом не разорила, и ничего не украла. А со временем с бензином стало легче, и электронную систему заправки спецмашин ликвидировали по причине ненужности.Я не хвалюсь нашими действиями, просто вспоминаю. А когда я читаю, что теперешние горе-интеллектуалы обчищают банковские карточки других людей, когда читаю, что дети дорвавшихся до власти выродков неожиданно становятся чудовищно богатыми и „талантливыми в бизнесе“, когда… А вы что, сами не знаете? Только не хочу развивать эту тему, потому что моя статья не о тех людях, которых я, вообще-то, за людей не считаю. Им всем, оптом взятым, место под землей, в шахте то есть.Напрасно я о них вспомнил, даже настроение упало. Просто хотел рассказать, как мы когда-то „ломали чужие секреты“. Хотел, и рассказал. И хотя наш взлом, естественно, может показаться смешным и наивным, но это всего лишь история, и относиться к ней нужно, как к истории.»"
    },
    "doc_17": {
        "url": "https://habr.com/ru/post/117193/",
        "title": "Очнитесь, на дворе XXI век",
        "text": "Начать статью я хотел бы с констатации того факта, что прямо за окном находится 2011 год (пруфлинк), середина апреля. Напоминаю я это в первую очередь себе, поскольку меня периодически посещают в этом сомнения. Дело в том, что как по работе, так и ради хобби я часто читаю код на С++, написанный лет 10-20 назад (но поддерживаемый и поныне) или код написанный совсем недавно, но людьми, которые учились программировать на С++ те же 20 лет назад. И вот после этого у меня и возникает ощущение, что никакого прогресса за эти годы не было, ничего не менялось и не развивалось, а по Земле до сих пор бродят мамонты.ВступлениеИз КВН:-А где тут у вас в Сочи, бабушка, можно комнатку снять долларов за 25 в день?-А, так тут недалеко, ребятки. В 90-ом году.Специфика программирования 20 лет назад была совсем другой. Счет памяти и ресурсов процессора шел на байты и такты, многие вещи еще не были изобретены и приходилось выкручиваться. Но это вовсе не повод и сегодня писать код исходя из этих предпосылок. Мир меняется. Я чувствую это в воде. Я чувствую это в земле. Вот, уже и в воздухе этим запахло… Нужно не отставать.Все, что я буду дальше писать касается только программирования на С++ и только mainstream-компиляторов (gcc, Intel, Microsoft) — с другими языками и компиляторами я работал меньше и говорить о положении вещей в них не могу. Также я буду говорить только о прикладном программировании под десктоп-операционки (в кластерах, микропроцессорах и системном программировании тенденции могут отличаться).TR1Для тех, кто был в танке последний пяток лет я расскажу великую военную тайну (токо тссс!). Есть такая штука, как TR1. Это может стать откровением, но почти во всех современных компиляторах есть встроенные умные указатели, неплохие генераторы случайных чисел, много специальных математических функций, поддержка регулярных выражений и другие интересные вещи. Вполне неплохо работает. Пользуйтесь.C++0xДля тех, кто приобщился к кружку сидения в тяжелой бронетехнике всего пару лет назад я сообщу еще одну благую весть. Есть такая штука, как C++0x. Возрадуйтесь, братья! Да, официально на нём еще не стоят несколько высоких подписей и церемония разбития бутылки шампанского о борт стандарта еще не состоялась, но релиз-кандидат утвержден и поддержка в компиляторах уже есть. Уже сейчас к Вашим услугам:Лямбда-выраженияRvalue ссылкиОбобщённые константные выраженияВнешние шаблоныСписки инициализацииFor-цикл по коллекцииУлучшение конструкторов объектовnullptrЛокальные и безымянные типы в качестве аргументов шаблоновЯвные преобразования операторовСимволы и строки в Юникоде«Сырые» строки (Raw string literals)Статическая диагностикаTemplate typedefsКлючевое слово autoи куча других полезных вещей.Ну вот посмотрите хотя бы на следующие примеры:Вместо  теперь можно написать  — и это будет работать! Более того, даже строгая типизация никуда не девается (auto — это не указатель и не Variant, это просто синтаксический сахар) Теперь можно ходить по коллекциях аналогом цикла for_eachНу красота же, правда? Напомню, это поддерживается в основных, стабильных (не альфа\\бета) ветках всех основных компиляторов. И это работает. Почему Вы этого до сих пор не используете?Передача всего и везде по указателям (ссылкам)Возможность передавать сущности в функции и методы как по ссылке так и по значению — очень мощный механизм и не стоит его использовать однобоко. Часто я вижу, как по указателю передаётся вообще все и всегда. Аргументы у людей такие: Указатель передаётся быстрее, чем структура данных — прирост скорости. При передаче по указателю нет нужны в дополнительной копии — экономия памяти.Оба аргумента несущественны. Выигрыш часто составляет пару байт и тактов (его даже не получается экспериментально измерить), но вылазит целая куча недостатков:Функция-приемник вынуждена проверять все аргументы как минимум на NULL. Да и тот факт, что указатель не NULL тоже еще ничего не гарантирует.Функция-приемник вправе сделать с передаваемой сущностью все, что угодно. Изменить, удалить — всё. Аргумент о ключевых словах «const» — не аргумент. В С++ масса хаков, дающих возможность изменить данные по константному указателю или ссылке.Вызывающая функция вынуждена либо доверять вызываемой в части изменения данных, либо валидировать их после каждого вызова.Значительная часть объектов, передачу которых пытаются оптимизировать использованием указателей сами по себе являются почти чистыми указателями. Это касается как минимум классов строк, работа с которыми оптимизировано везде и давно.Я приведу аналогию: у Вас дома вечеринка, присутствует десяток хороших друзей + пару случайных личностей (как всегда). Вдруг одна из таких личностей замечает на Вашем компьютере забористое порно познавательный фильм о природе и просит дать посмотреть. А Вы вместо того, чтобы записать кино на флешку\\DVD выключаете компьютер из розетки и отдаёте со словами: «На, забирай — смотри». Ну чушь ведь, правда? Так почему Вы в коде отдаёте все свои данные на поругание какой-то непонятной функции, которую вообще не пойми кто писал.Вычисление константВот кусочек кода:Может быть для кого-то я открою великую тайну, но константы нынче вычисляются компилятором при компиляции, а не на рантайме. Так что «PI/2» будет читаться легче, места занимать меньше, а работать так же быстро, как и 180 дефайнов в примере выше. Не недооценивайте компилятор.Собственные велосипедыИногда я вижу в коде что-то типа: В этот момент меня пронимает дрожь. Существуют STL, Boost (и многие другие библиотеки), в которых лучшие умы планеты уже который десяток лет совершенствуют множество прекрасных алгоритмов и структур данных. Писать что-то своё стоит только в 3-ех случаях:Вы учитесь(лабораторная, курсовая)Вы пишете серьёзную научную работу именно на эту темуВы наизусть знаете коды STL, Boost, десятка аналогичных библиотек, 3 томика Кнута и четко уверены, что решения для Вашего случая в них нет.В реальности происходит следующее:Люди понятия не имеют о наличии библиотекЛюди нифига не читают умные книгиЛюди имеют завышенную самооценку, считают себя умнее всех«Чукча не читатель, чукча — писатель»В результате имеем смешные баги, дикие тормоза и искреннее удивление автора при мордобое критике.Ненужные оптимизацииПример:Что тут написано? Я верю в читателей Хабра и думаю почти все знают, что это побитовый сдвиг. И многие знают еще и о том, что эти операции для целых чисел эквивалентны умножению и делению на 2. Так было модно писать раньше, поскольку операция побитового сдвига выполняется быстрее, чем операции умножения и деления. Но вот они факты на сегодня:Все компиляторы достаточно умны, чтобы самостоятельно заменять умножение и деление на сдвиг в подобных случаях.Не все люди достоточно умны, чтобы понимать этот код. В результате Вы получите хуже читаемый код, без преимуществ в скорости работы и периодические (в зависимости от количества и квалификации коллег) вопросы: «А че за хрень?». Зачем это Вам?Ненужная экономия памятиЯ дам пару ссылок на случаи, когда люди пытались сэкономить 1-2 байта памяти и что из этого вышло. Y2kРесурс IPv4Therac-25Уже сегодня у нас есть в среднем от 2 до 4 Гб ОЗУ. Еще пару лет и все вокруг будет 64-битное и памяти будет еще больше. Думайте наперед. Экономьте мегабайты, а не отдельные биты. Если речь идет о количестве людей, предметов, транзакций, температуре, дате, расстоянии, размерах файлов и т.д. — пользуйтесь типами long, longlong или чем-то специализированным. Забудьте о byte, short и int. Это всего-лишь несколько байт, а переполнение в будущем может стоить очень дорого. Не поленитесь завести отдельные переменные для разных сущностей, а не использовать одну временную с мыслью «а, все равно они никогда одновременно использоваться не будут».ВыводыНе программируйте наскальную живопись. Потомки не оценят."
    },
    "doc_18": {
        "url": "https://habr.com/ru/post/132668/",
        "title": "Нифига себе сходил за хлебушком, или история одного взлома",
        "text": "Всё началось с того, что ко мне (как к фрилансеру) обратились за помощью и попросили настроить exim4 так, чтобы почтовая рассылка не попадала в спам. Даже заботливо ссылку прислали на замечательную статью.Работы на пару часиков включая обновление DNS, но не тут то было. Залогинившись под рутом я включил свой любимый screen по привычке командой screen -x и лицезрел прелюбопытнейшее действо в любимой многими папке /dev/shm. Злоумышленник не удосужился прикрыть сессию screen, либо всё еще работал в ней. И тут начинается квест:Первое, что я сделал — просмотрел, чем же занимался злоумышленник:wget http://ravenul.zzl.org/it/noi/up/8.txtmv 8.txt list.txtphp lol.phpphp lol.phpnetstat -an | grep :22wrm -rf list.txtwrm -rf .xnetstat -an | grep :22Судя по всему рассылал спам и запускал некий файл \".x\" (или это была папка?), а еще проверял ssh соединение. Там же лежал архив с php скриптом lol.php, который я к сожалению забыл сохранить.Вывод команды last и who не показали ничего сверхестественного, root сессий за месяц не было, что и подтвердил владелец сервера. Однако…$ lsof -ni | grep sshпоказал established соединение с IP 172.190.125.14, которое я тут же прибил.Обратил внимание на /usr/sbin/sshd$ ls -la /usr/sbin/sshd-rwxr-xr-x 1 root root 320724 Oct 11 23:29 /usr/sbin/sshdРядом с sshd валялся sshd0$ ls -la /usr/sbin/sshd0-rwxr-xr-x 1 root root 757356 Jul 31  2010 /usr/sbin/sshd0Удаление файла ни к чему ни привело:$ rm -f /usr/sbin/sshdrm: cannot remove `/usr/sbin/sshd': Operation not permittedИдем дальше$ lsattr /usr/sbin/sshd-u--ia------------- /usr/sbin/sshd$ chattr -aui /usr/sbin/sshd$ rm /usr/sbin/sshd$ lsattr /usr/bin/* | grep -v -- '-------------------'-u--ia------------- /usr/bin/ssh$ chattr -aui /usr/bin/ssh$ rm /usr/bin/sshПереустанавливаю openssh-server и openssh-client. Вроде всё хорошо, угрозы нет, больше ничего подозрительного не нашлось. Решил заодно обновить систему, да и tzdata старый был (привет Медведеву!). Проверил /etc/apt/sources.list и /etc/apt/sources.d. Все файлы в порядке, никаких левых строк, даты не менялись с год. И после apt-get update наложил все security обновления на Debian Lenny, включая новое ядро. Ну что. Нужно перезагружаться. Попросил на всякий случай KVM (как оказалось не зря) и начал ждать.На следующий день предоставили KVM. Набрал «reboot» и тут на тебе: десятки segmentation fault. Волосы начинают седеть, руки трястись. В общем я думаю многие представляют мою ситуацию. Как говорится «если работает — не ТРОЖЬ!», но после обнаружения проникновения пришлось наложить обновления и перезагрузиться.Короче говоря взял себя в руки, начал изучать в чем дело и загрузился в single user. Команда mount каждый раз при вызове вызывает segmentation fault, даже без параметров. Файловая система readonly, сделать ничего нельзя. /etc/fstab в порядке, df тоже работает. Команда date почему-то тоже сегфолтится. Запустил проверку диска (софтварный raid1) fsck.ext3 /dev/md0 — всё в порядке, никаких отклонений. В чем же дело? Тут я начинаю думать, что систему положил я, т.к. обновил пакет tzdata, который как раз таки связан со временем. И тут рвется DSL соединение с моим провайдером… Ребутаю модем — соединение поднимается, ну и славненько!Владелец сервера негодует, т.к. сервер в дауне уже несколько часов, и решает написать тикет в суппорт «Инфобокса». Я же на измене, продолжаю ковыряться в системе. Самым вменяемым решением мне кажется перезагрузить машину и загрузиться с liveusb, чтобы диск был RW, а далее по обстоятельствам. Начал дебажить mount возможными на данный момент способами. gdb установлен не был, был лишь ldd, который ничего серьезного не показал и export LD_DEBUG=all, который тоже ничего сверхестественного не выявил. Сегфолт тупо начинался после инициализации всех библиотек. Тут KVM мне говорит, что его отключили. Ясно, суппорт подбежал. Ушел от ноутбука и начал думать дальше…Пока стоял и дышал свежим воздухом, ко мне в голову забежал очень образованный таракан и сказал «А что если файлы, которые вызывают сегфолт, подмененные?». Сказано сделано. Жду что скажет клиент насчет тикета суппорту. Через несколько минут он пересылает мне ответ суппорта:Повреждена таблица разделов, экспресс-методами восстановить ее не представляется возможным.Если хотите, мы можем привлечь наших системных администраторов (стоимость работ составляет 870 рублей в час) для восстановления.Либо же Вы можете это сделать самостоятельно. В таком случае рекомендуем воспользоваться Gpart (http://packages.debian.org/ru/sid/gpart)Хрена себе подумал я… Говорю клиенту, что не может такого быть, т.к. fsck произвел проверку диска и никаких нарушений в файловой системе не выявил. Клиент пишет ответ суппорту, а в это время возвращается доступ к KVM, где я вижу всё те же тщетные попытки вызвать mount, hdparm, который в системе не установлен, и работа с fdisk.Последняя же вывела ни что иное как:$ fdisk -lDisk /dev/sda: 160.0 GB, 160041885696 bytes255 heads, 63 sectors/track, 19457 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesDisk identifier: 0x000f0571Device Boot      Start         End      Blocks   Id  System/dev/sda1               1       18480   148440568+  fd  Linux raid autodetect/dev/sda2           18481       19457     7847752+  fd  Linux raid autodetectDisk /dev/sdb: 160.0 GB, 160041885696 bytes255 heads, 63 sectors/track, 19457 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesDisk identifier: 0x00000000Device Boot      Start         End      Blocks   Id  System/dev/sdb1   *           1       18480   148440568+  fd  Linux raid autodetect/dev/sdb2           18481       19457     7847752+  fd  Linux raid autodetectDisk /dev/md0: 152.0 GB, 152003018752 bytes2 heads, 4 sectors/track, 37110112 cylindersUnits = cylinders of 8 * 512 = 4096 bytesDisk identifier: 0x00000000Disk /dev/md0 doesn't contain a valid partition tableDisk /dev/md1: 8036 MB, 8036024320 bytes2 heads, 4 sectors/track, 1961920 cylindersUnits = cylinders of 8 * 512 = 4096 bytesDisk identifier: 0x00000000Disk /dev/md1 doesn't contain a valid partition tableВот на основе последних Disk /dev/md0 doesn't contain a valid partition table суппорт и выяснил, что проблема то оказывается в таблице разделов. Действительно, как я раньше не догадался. Ведь fdisk никогда не видел таблицы разделов программного raid. Отписываю все мои мысли клиенту и начинаю разрабатывать коварный план того самого таракана. Представляю чем бы закончилась эпопея суппорта и сколько бы она заняла, согласись клиент на их помощь. Да и сумму подсчитать не сложно.Смотрю на дату изменения /bin/mount — время последней загрузки сервера. Перезагружаюсь, опять проверяю дату — время последней загрузки сервера. Странно. Значит что-то при загрузке модифицирует этот файл и с этим «что-то» нужно что-то делать./tmp — в readonly. Чтобы загрузить файл на сервер, нужна файловая система с правом записи. Вспоминаю о /dev/shm. Поднимаю сетевой интерфейс, присваиваю IP, и скачиваю deb пакет mount для lenny. Распаковываю, запускаю — вуаля! Работает! Перемонтирую файловую систему, теперь она RW. Дело пошло!Проверяю файлы в /bin/ и вижу следующую картину:$ ls -latr /bin-rwxr-xr-x  1 root root  96408 Nov 15 18:11 vdir-rwxr-xr-x  1 root root  30896 Nov 15 18:11 pwd-rwxr-xr-x  1 root root  30712 Nov 15 18:11 ping6-rwxr-xr-x  1 root root  24252 Nov 15 18:11 nc.traditional-rwxr-xr-x  1 root root   8612 Nov 15 18:11 mountpoint-rwxr-xr-x  1 root root  68208 Nov 15 18:11 mount-rwxr-xr-x  1 root root  32244 Nov 15 18:11 mknod-rwxr-xr-x  1 root root  39144 Nov 15 18:11 loadkeys-rwxr-xr-x  1 root root  17244 Nov 15 18:11 kill-rwxr-xr-x  1 root root   9764 Nov 15 18:11 fgconsole-rwxr-xr-x  1 root root  26216 Nov 15 18:11 false-rwxr-xr-x  1 root root   8524 Nov 15 18:11 dmesg-rwxr-xr-x  1 root root  96408 Nov 15 18:11 dir-rwxr-xr-x  1 root root  51988 Nov 15 18:11 dd-rwxr-xr-x  1 root root  59148 Nov 15 18:11 date-rwxr-xr-x  1 root root  49440 Nov 15 18:11 chgrp-rwxr-xr-x  1 root root  30956 Nov 15 18:11 cat-rwxr-xr-x  1 root root  12252 Nov 15 18:11 bzip2recoverПричем дата изменения файлов меняется каждые 3 минуты и 10 секунд. Начинаю просматривать crontab'ы, ничего не нахожу. Отловить lsof'ом какой процесс изменяет файлы не получается. Вывожу ps auxww и вижу, что висит некий процесс cat /sys/class/net/lo/operstateСкачиваю пакет с утилитой kill, переименовываю файл /bin/cat в /bin/cat_ и прибиваю процесс. Файлы перестают модифиццироваться. Победа. Теперь остаётся заменить все модифицированные файлы оригинальными. Скачиваю нужные пакеты и устанавливаю через dpkg -i *deb, предварительно проверив дату создания самого dpkg. После всех сделанных замен, скрестя пальцы, ввожу reboot и наблюдаю за окном KVM. Загрузка проходит успешно, сайт работает. Далее провожу сканирование скопированных мною зараженных файлов с помощью clamav и обнаруживаю Linux.RST.B-1 FOUND. Кто там говорил, что нет под Linux вирусов? Кстати 2001 года вирус…Сканирование sshd и ssh ни к чему не приводят. Видимо это просто модифицированные ssh и sshd. Первый скорее всего отсылает логин и пароль при успешном подключении к серверу, второй скорее всего пускает на сервер всех с определенным паролем. Сейчас копать эти файлы нет сил, но желающие могут их скачать и покопаться: zalil.ru/32063611P.S. Если в командах что-то не так, то прошу прощения, многие из них писал на память. Настраивать exim4 тоже отпало желание. Денег еще не просил. Да и за что? Основную задачу то не выполнил =)P.P.S. Привет Infobox'у!"
    },
    "doc_19": {
        "url": "https://habr.com/ru/post/543174/",
        "title": "Как выжить, если вы падаете со скоростью 190 км/ч с высоты 10 000 метров, и у вас в запасе есть три минуты",
        "text": "Вы оказались на высоте десяти километров, и падаете без парашюта. Шансов у вас немного, однако небольшое количество людей, оказавшись в подобной ситуации, сумели выжить6:59:00, высота 10 000 мВчера вы рано легли, а сегодня у вас был ранний рейс. Вскоре после взлёта вы засыпаете. И вдруг вы резко просыпаетесь – вокруг вас свистит холодный воздух и раздаётся шум. Ужасный и громкий. Где я? – думаете вы. Где самолёт?Вы на высоте 10 км. Один. И вы падаете.Неприятная ситуация. Самое время сконцентрироваться на положительных сторонах (да, кроме той, что вы выжили после разрушения самолёта). Гравитация работает против вас, зато другая сила на вашей стороне: время. Хотите — верьте, хотите – нет, но эта ситуация лучше той, в которой вы упали с балкона верхнего этажа отеля, приняв на грудь слишком много.Ну, по крайней мере, она станет лучше. На таких высотах недостаточно кислорода, и у вас начинается гипоксия. Скоро вы потеряете сознание, и пролетите не меньше полутора километров до того момента, как очнётесь снова. А после этого вспомните этот текст. Ведь ваша следующая остановка – поверхность Земли.Конечно, шансы выжить после падения с десятикилометровой высоты чрезвычайно малы, однако оказавшись в подобной ситуации, вы ничего не потеряете, если хорошенько в ней разберётесь. С самолёта можно упасть двумя способами. Первый – свободное падение, без всякой защиты и средств для замедления спуска. Второй – стать «наездником на обломках», как назвал эту ситуацию историк-любитель из Массачусетса Джим Гамильтон, собравший страничку исследований случаев свободного падения. Это что-то вроде онлайн-базы по всем случаям падений людей с высоты, после которых они выжили.Во втором случае вы можете получить преимущество, если прицепитесь к какой-то части развалившегося самолёта. В 1972 году сербская стюардесса Весна Вулович находилась в самолёте McDonnell Douglas DC-9, летевшем над территорией Чехословакии, и внезапно взорвавшемся в воздухе. Она упала с высоты 10 160 метров, будучи зажатой между сиденьем, тележкой с едой, частью фюзеляжа и телом ещё одного члена экипажа. Она приземлилась на заснеженном склоне, и перед полной остановкой соскользнула с него. В результате она получила серьёзные травмы, но выжила.Выжить после падения, будучи окружённым немного защищающими тебя предметами, получалось чаще, чем выжить после падения без посторонних предметов. Известен случай Алана Маги, героя американского сборника удивительных фактов «Ripley's Believe It or Not!». В 1943 году его самолёт B-17 сбили над Францией. Лётчик из Нью-Джерси упал с высоты 7 000 м, и столкнулся с крышей железнодорожного вокзала, после чего провалился внутрь. Впоследствии его взяли в плен немецкие войска, поражённые тем, что он выжил.Прицепились ли вы к обломку фюзеляжа, или падаете свободно, больше всего вас интересует концепция предельной скорости. Под воздействием гравитации вы падаете всё быстрее. Но, как и любой движущийся объект, вы испытываете сопротивление воздуха – тем большее, чем быстрее вы двигаетесь. Когда сила гравитации сравняется с сопротивлением воздуха, ускорение прекращается – вы достигаете максимума.В зависимости от вашего размера и веса, и факторов типа плотности воздуха, ваша максимальная скорость окажется равной примерно 190 км/ч. Достигнете вы её удивительно быстро – пролетев всего порядка 450 м (высота Останкинской башни – 540 м). А равенство скорости означает, что вы врежетесь в тротуар с одинаковой силой. Разница только в промежутке времени. Спрыгнув с Останкинской башни, вы упадёте через 13 секунд.После того, как вы выпадете из самолёта, у вас будет столько времени, что вы сможете прочитать почти всю эту статью.7:00:20, высота 6700 м Вы спустились достаточно низко для того, чтобы спокойно дышать. Ваше сознание резко вернулось. На такой высоте до падения остаётся около 2 минут. Ваш план простой: вам нужно войти в состояние дзена и решить выжить. Вы поймёте, что, как отметил Гамильтон, «вас убивает не падение, а приземление».Не теряя присутствия духа, вы прицеливаетесь.Но во что? Падение Маги на каменный пол французского вокзала смягчила его стеклянная крыша. Стекло наносит травмы, но и помогает вам. Как и трава. Стога сена и кусты смягчали падение людей, которые потом удивлялись, что выжили. Деревья тоже подойдут, хотя на дерево можно и нанизаться, как на шампур. Снег? Конечно. Болота? С грязной поверхностью, покрытой растительностью – ещё лучше.У Гамильтона описан один случай с парашютистом, который после полного отказа парашюта спасся, спружинив от проводов линии электропередачи. А вот вода – ужасный выбор, несмотря на популярное заблуждение. Жидкость, как и бетон, не сжимается. Упасть в океан – по сути, то же самое, что упасть на тротуар. Только тротуар не «раздвинется, поглотив ваше разбитое тело», как поясняет Гамильтон.Выбрав цель, можно переходить к правильному положению тела. Чтобы замедлить спуск, изобразите парашютиста. Расправьте руки и ноги, грудь поверните к земле, выгните спину и голову вверх. Вы увеличите трение, и вам будет легче маневрировать. Но не расслабляйтесь – эта поза не для приземления.К сожалению для вас в такой ситуации, вопрос о наилучшей позе для приземления остаётся предметом споров. В исследовании от 1942 года в журнале War Medicine отмечалось, что «распределение и компенсация давления играют большую роль в уменьшении травм». Рекомендация: приземление всей площадью тела. Однако в отчёте от 1963 года федерального агентства авиации утверждается, что переход в классическую позу парашютиста – ноги вместе, пятки вверх, колени и бёдра сжать – увеличивает шансы на выживание. В том же исследовании отмечалось, что людям помогают выживать навыки акробатики и борьбы. Особенно полезными для падения на твёрдые поверхности признаны занятия единоборствами. «Обладатель чёрного пояса может, по отзывам, ломать дерево одним ударом», пишут авторы, считающие, что подобные навыки пригодятся в рассматриваемой ситуации.Лучшим уроком по методу «обучение методом проб и ошибок» будет история японского парашютиста Ясухиро Кубо, обладателя мирового рекорда в «банзай»-категории парашютного спорта. Этот парашютист выбрасывал из самолёта парашют, затем прыгал следом за ним, выжидал максимально возможное время, потом догонял его, надевал и дёргал за кольцо. В 2000 году Кубо прыгнул с высоты в 3000 метров, и падал 50 секунд перед тем, как схватить свой парашют. Более безопасный метод обучения – использования симуляторов-аэротруб, которые можно найти в различных парках аттракционов.Но эти методы не помогут вам натренировать самую сложную задачу – приземление. Для этого можно рассмотреть такой вариант – хотя не сказать, что мы его советуем – как прыжок с самого высокого моста в мире (на момент строительства), виадука Мийо. Одна из его опор имеет высоту в 341 метр, а внизу расположена упругая пашня.Если вам приходится приземляться в воду, нужно очень быстро принимать решение. Изучение случаев, когда люди выжили после прыжка с моста, показывает, что максимизирует шансы выжить поза «ноги вперёд, вытянувшись» («карандашиком» или «солдатиком»). При этом знаменитые прыгуны со скал в Акапулько [профессиональные артисты, участвующие в ежедневном шоу по прыжкам с высоты 30-40 м в воду в мексиканском местечке ла Кебрада / прим. пер.] предпочитают позу «головой вперёд», со сжатыми вместе ладонями и вытянутыми руками для защиты головы. Что бы вы ни выбрали, сначала как можно дольше удерживаете позицию парашютиста. Затем, если вход в воду ногами вперёд неизбежен, самым важным в этой ситуации, по причинам как очевидным, так и неприличным, будет посильнее сжать ягодицы.Какой бы ни была поверхность, определённо не стоит приземляться на голову. В «исследовании о переносе ударных нагрузок при свободном падении» 1977 года исследователи Института изучения безопасности шоссе установили, что основной причиной смерти при падениях – а изучали они падения со зданий, мостов и в шахту лифта – было повреждение затылка. Если уж вам приходится падать горизонтально, пожертвуйте красотой и приземляйтесь на лицо, а не на затылок. Также можете подумать над тем, чтобы брать с собой в полёт защитные очки – Гамильтон говорит, что иначе при падении вам будет сложно прицелиться, поскольку из-за сильного потока воздуха у вас будут слезиться глаза.7:02:19, высота 300 мУчитывая вашу первоначальную высоту, к моменту, когда вы дочитаете до этого места в статье, вы уже будете подлетать к земле.Прим. пер.: автор оригинала основывает расчёты на объёме английского текста и среднюю скорость чтения в 250 слов в минуту; на самом деле количество слов в оригинальном тексте статьи к этому моменту приближается к 1250, что отняло бы 5 минут на чтение, а речь идёт о трёхминутном падении. В русском переводе слов к этому моменту примерно столько же, но средняя скорость чтения по-русски оценивается в 180 слов в минуту. Всё-таки лучше прочитать эту статью до того, как вы упадёте с высоты. Всё необходимое мы уже рассмотрели, поэтому можете концентрироваться на главной задаче. Однако, если что, вот вам дополнительная информация – хотя, к этому моменту она уже мало вам поможет.Статистически в данной ситуации шансов больше у члена команды воздушного судна, у ребёнка или у пассажира военного самолёта. За последние сорок лет произошло около десяти авиакатастроф с единственным выжившим. Среди описанных случаев четыре человека относились к команде воздушного судна, как, к примеру, стюардесса Вулович, а семерым не исполнилось 18. К ним относится и двухлетний Мохаммед эль-Фате Осман, прокатившийся на обломке реактивного самолёта Boeing, упавшего в Судане в 2003.Возможно, члены команды выживают чаще из-за того, что их ремни лучше работают. А вот о том, почему детям удаётся чаще выжить, пока идут споры. В исследовании федерального авиационного агентства отмечается, что у детей, в особенности до 4 лет, скелет более гибкий, мускулы более расслабленные, а пропорция подкожного жира по отношению к весу тела больше – это помогает защитить внутренние органы. Люди маленького роста – когда голова оказывается ниже, чем спинка переднего сиденья – лучше защищены от обломков разваливающегося самолёта. Меньший вес уменьшает предельную скорость падения, меньшая площадь тела уменьшает шансы наткнуться на что-либо при падении.7:02:25, высота 0 мЗемля. Вы, как мастер из Шаолиня – спокойны и подготовлены. Удар. Вы живы. Что дальше? Если повезёт, травмы будут не очень серьёзными, и вы сможете встать и выкурить в честь этого сигаретку, как британский хвостовой стрелок Николас Алкемейд в 1944-м. Он упал с высоты в 5500 м и приземлился на заснеженные кусты. Но скорее всего, вас ждёт тяжёлая работа.Возьмём пример Джулианы Кёпке. Накануне рождества 1971 года её самолёт Lockheed Electra взорвался над Амазонкой. На следующее утро 17-летняя немка очнулась в джунглях, всё ещё будучи пристёгнутой к сиденью, и окружённой горой упавших рождественских подарков. Одна, с травмами, она сумела отвлечься от мыслей о гибели матери, сидевшей с ней рядом. Вместо этого она вспомнила совет отца, биолога: потерявшись в джунглях, в поисках цивилизации следуй за водой. Кёпке переходила от небольших ручейков к более крупным. Она обходила крокодилов, и тыкала палкой в грязи перед собой, чтобы распугивать электрических скатов. Во время падения она потеряла один ботинок, а её юбка была разорвана. Единственной едой, которую она нашла, был пакетик с конфетами, а пить ей приходилось только грязную воду. Ей приходилось не обращать внимания на сломанную ключицу и открытые раны, кишащие личинками.На десятый день она присела отдохнуть на берегу реки Шибонья. Когда она встала, она вдруг увидела привязанное к берегу каноэ. Много часов у неё ушло на то, чтобы забраться на высокий берег, где стояла хижина, в которой её на следующей день нашли дровосеки. В Перу это случай посчитали чудом, и по статистике тут действительно не обошлось без божественного вмешательства. Согласно женевскому управлению регистрации авиакатастроф, в период с 1940 по 2008 года в 15 463 катастрофах погибло 118 934 людей.Даже если включить в список выживших парашютистов, счёт подтверждённых или хотя бы убедительных случаев выживания в базе Гамильтона идёт на 157 человек – из них только 42 случая произошли при падении с высоты более 3 км.Однако Кёпке никогда не считала, что выживание зависит только от судьбы. Она ещё может вспомнить первые моменты падения с самолёта, когда она вертелась в своём кресле. В этой ситуации она ничего не контролировала, зато после того, как она очнулась, всё было в её руках. «Я смогла принять верное решение – покинуть место аварии», — говорит она теперь. И благодаря опыту, полученному при работе на исследовательской станции её родителей, она говорит: «Я не чувствовала страха. Я знала, куда идти в лесу, как идти по реке, где мне приходилось плыть бок о бок с такими опасными животными, как кайманы и пираньи».Или к этому моменту вы уже давно не спите, а колёса самолёта безопасно коснулись посадочной полосы. Вы понимаете, что вероятность катастрофы коммерческого самолёта невероятно мала, и что только что прочитанная информация вам вряд ли пригодится."
    },
    "doc_20": {
        "url": "https://habr.com/ru/post/129640/",
        "title": "Node.js — раковая опухоль",
        "text": "Если и есть что-то, что веб-разработчики любят, так это знать что-то, что лучше традиционного. Но традиционное является таковым по одной причине: это дерьмо работает. Что-то давно беспокоило меня во всей этой шумихе вокруг Node.js, но у меня не было времени разобраться, что именно, пока я не прочитал полный боли в жопе пост от Райана Дала, создателя Node.js. Я бы забыл его, как любое очередное нытьё какого-то осла о том, что Unix слишком сложен. Но, как полицейскому, который, жопой чуя, что что-то не так с этой семьёй в микроавтобусе, останавливает его и находит пятьдесят килограммов героина, мне показалось, что что-то не так с этой слезливой историей, и возможно, просто возможно, он понятия не имеет, что делает, и много лет программирует, никем не контролируемый.Поскольку вы читаете это, вы, возможно, уже поняли, что моя догадка подтвердилась.Node.js — это опухоль на программистском сообществе, не только оттого, что он совершенно безумен, но и оттого, что люди, использующие его, инфицируют других людей, не умеющих думать самостоятельно, пока, в конце концов, каждый встречающийся мне мудак не начинает читать проповеди об event loop'ах. Принял ли ты epoll в своё сердце?Крах масштабируемости ждёт своего часаДавайте начнём с самой ужасной лжи: Node.js масштабируем, потому что он «никогда не блокирует» (Радиация приносит пользу! Теперь в вашей зубной пасте!). На сайтe Node.js сказано:В Node практически нет функций, напрямую выполняющих операции ввода-вывода, так что процесс никогда не блокируется. Из-за того, что ничего не блокируется, менее-чем-эксперты могут разрабатывать быстрые системы.Это утверждение заманчиво, ободряюще и полностью, блядь, неверно.Давайте начнём с определения, ведь ваша, хабровские всезнайки, специфика — педантизм. Вызов функции называется блокирующим, когда выполнение вызывающего потока будет приостановлено до завершения этой функции. Как правило, мы думаем об операциях ввода-вывода как о «блокирующих», например, если вызвать socket.read(), программа будет ожидать завершения этого вызова, так как ей нужно что-то сделать с возвращаемыми данными.Вот вам забавный факт: вызов любой функции, использующей процессор, тоже блокирующий. Эта функция, вычисляющая N-ное число Фибоначчи, заблокирует текущий поток, потому что она использует процессор:(Да, я знаю про замкнутое решение. А ты разве не должен сейчас репетировать перед зеркалом то, что скажешь, когда всё-таки решишься подойти к Ней?)Посмотрим, что происходит с программой для Node.js, с вот этим маленьким бриллиантом в качестве обработчика запроса:На моём предыдущем ноутбуке результат таков:Время ответа — 5 секунд. Круто. Итак, мы все знаем, что JavaScript не офигенно быстрый язык, но что в этом страшного? А то, событийная модель Node и ёбнутые на всю голову фанатики заставили вас думать, что всё хорошо. Вот простенький псевдокод, показывающий, как работает event loop:Это все, конечно, хорошо, если вы знаете, что вы делаете, но, применяя это для серверных задач, вы множите это дерьмо. Если этот цикл работает в том же потоке, что и handle_request, любой адекватный программист заметит, что обработчик запроса может заблокировать цикл, и без разницы, насколько асинхронна ваша библиотека.Итак, учитывая вышесказанное, давайте посмотрим, как мой маленький node-сервер ведёт себя при самой скромной нагрузке — 10 запросов, 5 одновременных:0.17 запросов в секунду. Зверь. Конечно, Node позволяет рожать дочерние процессы, но сейчас потоковая и событийная модель настолько сильно связаны, что вы уже получили гораздо большие проблемы, чем масштабируемость.Учитывая оригинальную маркетинговую политику Node, я, чёрт побери, боюсь любых «быстрых систем», которые «менее-чем-эксперты» подарят этому миру.Отрицая философию Unix, Node наказывает разработчикаДавным-давно стоявшие у истоков бородатые парни решили, что собирать в цепочку маленькие программы, каждая из которых выполняет специфическую задачу — отличная идея, а универсальным интерфейсом для них должен стать текст.Если вы разрабатываете на платформе Unix, придерживаясь этого принципа, операционная система отблагодарит вас простотой и процветанием. К примеру, когда веб-приложения только появились, веб-приложение было просто программой, отдающей текст в стандартный вывод. Веб-сервер отвечал за принятие входящих запросов, выполнение этой программы и возврат результата клиенту. Мы назвали это CGI, и это был хороший способ выполнять работу, пока микро-оптимизаторы не сунули в него свои грязные пальцы.Концептуально, любая архитектура веб-приложения, не являющаяся раком мозга, работает именно так и сейчас: у вас есть веб-сервер, работа которого — принять запрос, разобрать его и решить, что с ним делать дальше. Это может быть отдача статического файла, вызов CGI-скрипта, проксирование соединения куда-либо ещё, что угодно. Дело в том, что HTTP-сервер не должен выполнять работу приложения. Разработчики обычно называют это разделением ответственности, и оно существует по одной причине: слабосвязанные архитектуры очень просты в обслуживании.И всё же, кажется, Node не обращает на это внимания. У Node есть (и не смейтесь, я не придумываю) свой собственный HTTP-сервер, и его вы должны использовать, чтобы обслуживать входящий трафик. Да, в примере выше, где я вызвал http.createServer(), это из документации.Если вы поищете «node.js deployment» в интернете, вы найдёте кучу людей, сующих Nginx перед Node, а некоторые используют штуку под названием Fugue. Это другой JavaScript HTTP-сервер, рожающий кучу процессов для обработки входящих запросов, ведь никто не подумал, что вся эта «неблокирующая» чушь может иметь проблемы с производительностью CPU.Если вы используете Node, есть 99-процентный шанс, что вы и разработчик, и сисадмин, потому что любой системный администратор первым делом отговорил бы вас от использования Node. Таким образом, вы, разработчик, будете наказаны этой оргией с HTTP-проксированием, если захотите поставить настоящий веб-сервер перед Node для штук типа отдачи статического контента, перезаписи запросов, ограничения скорости, балансировки нагрузки, SSL или любых других футуристичных вещей, которые умеют делать современные HTTP-серверы. Да, в вашей системе будет ещё один уровень, требующий мониторинга.Хотя, будем честны сами с собой, если вы Node-разработчик, вы, вероятно, запускаете приложение прямо из Node, запущенной в вашей экранной сессии под вашей учётной записью.Это блядский JavaScriptВозможно, худшее, что можно сделать с серверным фреймворком, — написать его на JavaScript.Что это, я даже не…Ниасилил?Node.js — неприятное ПО, и я его использовать не буду.Update: от переводчикаЯ тоже JavaScript-разработчик, давно с интересом присматривающийся к Node.js. Мне тоже обидно и больно за любимый язык. Однако, если отвлечься от боли, в вышеизложенном тексте можно найти смысл, аргументы и доказательства. Я бы очень хотел внятной дискуссии, ибо переводил я его только ради этого. По неизвестно кем установленной традиции, сообщу, что это мой первый перевод и всё такое."
    },
    "doc_21": {
        "url": "https://habr.com/ru/post/185510/",
        "title": "Самодельный трекинг посылок, или Туда и Обратно",
        "text": "Наверняка многие, кто заказывал товар из-за границы, задавались вопросом: что происходит с посылками от экспорта до импорта? В каком потустороннем пространстве они иногда проводят месяцы своего путешествия? Какими самолетами прилетают в Новосибирск посылаемые авиапочтой в Москву отправления?ИдеяПроследить, как движутся посылки из-за границы в Москву, подробнее, чем официальный трек. Для этого отправить устройство, способное сообщать свои координаты.Один мой друг послал почтой другому моему другу… Реализация Необходимо выбрать устройство, способное сообщать свои координаты по расписанию и имеющее автономное питание хотя бы на месяц такой работы.СмартфонСамое очевидное решение. Плюсы: можно запрограммировать почти на любое поведение, например, пользоваться точным позиционированием по спутникам, измерять заодно ускорение, освещенность, температуру, да мало ли что ещё, и сразу же докладывать в твиттер.Минусы: без внешнего аккумулятора не проживёт и срока доставки международных почтовых отправлений, а с оным много весит и привлекает внимание. А вдруг задержится в пути? Самодельный “смартфон”Что, если взять аккумулятор от ноутбука (или автомобильный, в зависимости от прогнозируемых сроков доставки), GSM-модуль, ARM-процессор, GPS-чип, да приставить к носу Ивана Кузьмича… Такое устройство имеет все плюсы смартфона, а из минусов только необычный внешний вид (примут ли на почте?) и вероятную цену разработки и изготовления. Возможно, это будет следующим экспериментом, а пока мы решили ограничиться вариантом попроще.Плюсы: все плюсы смартфона, большое время жизни от аккумулятора, возможность маскировки, например, под кирпич.Минусы: необычный внешний вид (примут ли на почте?) и, вероятно, цена+сроки разработки и изготовления.Надо отметить, что к пересылке вообще неохотно принимаются включенные устройства с вставленными аккумуляторами. Хотя все планшеты и прочие айфоны именно такими устройствами и являются.Специальные трекерыТо же, что прошлый пункт, но уже кем-то спроектированное и изготовленное. Плюсы: готовое специальное устройство.Минусы: цена кусается. Если посылка не дойдёт, бесполезно.UPD: Есть вариант дешевле: dx.com/p/168496.+Маленькое+Можно подключить внешний источник, и будет работать вечно+Присылает СМС сразу со ссылкой на гугл картыОптимальный вариантКак сильно снизить требования к ёмкости аккумулятора? Выходить на связь пореже (находясь в глубоком сне большую часть поездки), и использовать менее точное позиционирование (по сотовой сети, без использования спутников GPS/Глонасс). Плюсы: геопозиционирование по сотам даже внутри железного вагона или ангара недоступное для GPS, долгий срок работы при маленькой батарее.Минусы: низкая точность позиционирования в сравнении с GPS, низкая частота измерений. И такое устройство, не привлекающее лишнего внимания, есть!На старт! В столе нашёлся “походный” телефон Philips E102, заслуженный, давно не работавший, но удовлетворявший всем требованиям: сверхъёмкая батарея на 650мА·ч, способность работать с одной сим-картой, а также включаться или выключаться до четырёх раз в сутки по расписанию. Эту ключевую особенность редко можно встретить в описании аппарата.Выбрали режим: два сеанса связи в день по пятнадцать минут (с запасом на поиск сети). Если просто в режиме ожидания телефон работал дней пять, то максимум можно было ожидать в 48 раз больше, или восемь месяцев. Настоящие цифры будут другими из-за слабого приёма, затрат на включение и поиск сети, возможных морозов, а также саморазряда батареи (по википедии около 3% в месяц). В общем, была неплохая вероятность, что батарейки хватит на время пути.В рамках подготовки телефона к запуску, он был разобран и реанимирован — в нем были зачищены контакты кнопки включения, которые окислились и не давали ему включаться.Если бы телефон умел писать в логи LAC и Cell ID подключения, чтобы впоследствии обработать и получить местоположение сот по их идентификаторам, то она была бы дедушкой мы могли бы построить карту перемещений после прибытия (если такое случится). Телефон этого делать не умел, и было принято решение использовать внешний сервис для контроля его местоположения. Да и отслеживание в режиме он-лайн добавляет интереса.На вокзале была куплена сим-карта, которую добавили в доверенный список МТС-поиска другого номера, с которого и происходило отслеживание. МТС-локатор умеет определять местоположение абонента по расписанию — то что надо для данного проекта! Единственный минус, действует услуга только на территории России, так что заграничную часть пути проследить не получится.Аналогичные услуги Билайн-Локатор и Мегафон-Локатор есть у других сотовых операторовПрямо перед отправкой телефон зарядили и проверили бесшумное включение и выключение по расписанию дважды в день. Включили также наиболее экономичный режим. Все настройки:включение в 7:50 и 19:50выключение в 8:05 и 20:05минимальная громкость звонка, без вибрацииминимальная яркость подсветки экранавремя подсветки — пять секундотключённые звуки приветствияДемаскировать телефон в непрозрачной коробке могли только невовремя пришедшие смс или звонок (если считать, что противник не умеет пеленговать нас по радио). Эта модель телефона не умеет отключать все сигналы, остаётся или виброзвонок, или мелодия, но есть несколько способов: Административный: включить запрет смс и входящих у оператораПофигистичный: отправить без отключения сигналов, что и было сделаноОбычный: закачать по wap беззвучный mp3 или midi сигналЖелезячный: отпаять виброзвонок или вытащить динамик (у данного Philips он не припаян и легко снимается при разборке)В один прекрасный день (далее — день 1) в одном курортном городе телефон был упакован в коробку, работники почты на просьбу снять аккумулятор получили заверения, что он выключен (правда) и разряжен (неправда), и отправлен авиапочтой в Москву. ПутешествиеПрибытие в ШереметьевоЧерез три дня после отправки посылка исчезла с украинского трекинга (відправлене з місця міжнародного поштового обміну України за межі України. Дякуємо, що скористались нашими послугами), и вскоре появилась на радаре! “Локатор” не работает в роуминге, поймать самолёт в воздухе мало шансов, так что это ожидаемая первая точкаНа этом кончился первый, и, вероятно, последний сегмент полета авиапочты. Казалось, что ещё пара дней — и путешествие закончится, как и предрекали все знакомые, не верившие в чудеса. Но впереди маленький отважный телефон ждало ещё много приключений!Тур по РоссииУже на девятый день телефон вдруг сдвинулся, но не к пункту назначения, а начал стабильно удаляться от Москвы, судя по точкам — авиапочта уступила место железнодорожной почте, а на 13-й день — и вовсе почтовой черепахе. Сначала мы думали, что точка под Владимиром — это ошибка позиционирования (мало ли, как этот сервис работает), потом — что сортировка в соседней области дешевле, чем в Москве, наконец уже делали ставки, дойдёт ли посылка до Байкала, Тихого океана, или отправится на родину в Китай.Крупная остановка случилась в Новосибирске, где телефон пролежал до 29 дня, исправно выходя на связь дважды в сутки. Впрочем, это не рекордный срок доставки, и мы надеялись, что батарейки хватит до конца. Только один сеанс связи не состоялся (склевал почтовый голубь или нет сотового покрытия?), один раз закончилось настроенное расписание на мпоиске, и один раз — оплата услуги “локатор”.Возможно, в течение этого времени телефон совершил еще несколько полетов авиапочтой?На тридцатый день появилась первая запись российского трекинга (Импорт 630982 Новосибирск PI-2), посылка успешно прошла таможню, а на тридцать пятый — Обработка 630982 Новосибирск PI-2 покинуло место международного обмена — телефон поехал обратно домой. Спустя ещё пять железнодорожных дней он оказался на Казанском вокзале, и больше Москву не покидал.Тур по Москве После Казанского вокзала посылка оказалась на сортировочном пункте на юге Москвы (Москва, пересечение ш. Варшавское и ул. Дорожная, район ст.м.Южная по геокодингу МТС). Оттуда бы ей, наконец, направиться в нужное почтовое отделение, но почтальон, похоже, по дороге уснул в метро: ДеньМестоположение40Южная43Южная44Алтуфьево45Алтуфьево46Южная47ЮжнаяВ каждом месте было зафиксировано минимум пять точек, так что на ошибку не похоже. Тем более, оба места есть в официальном треке: 111948 Москва МСП-3 Мпко-Север и 111987 Москва МСП-3 Мпко-Юг. Наш ответ этому видеоПриехали!Утром сорок восьмого дня случилось долгожданное событие, посылка покинула Южную и прибыла в место вручения. Для чистоты эксперимента мы дождались уведомления (доведя срок доставки до юбилейных 50 дней) и получили стойкого оловянного солдатика:Остаточный заряд батареи. Хватит на путешествие вокруг света!За время пути с посылки почти облетел штрихкод, так что женщине на выдаче пришлось вбивать его руками. Увидев окончание UA, она хмыкнула и сказала, “Украина...” Так завязался диалог о том, как вышло, что посылка шла авиапочтой почти 2 месяца. Женщина сказала, что благодарить надо в первую очередь недавние изменения в системе таможни, которая теперь не справляется с потоком посылок, и они стройными рядами едут в отдаленные города, чтобы там полежать на складах в ожидании таможни, пройти таможню, и потом в большинстве случаев вернуться назад в Москву.Немного статистики: телефон провёл в дороге 48 дней, пройдя более семи тысяч километров из необходимых 1300км со средней скоростью не меньше шести километров в час. Правда, если пересчитать 48 дней на 1300 км, вообще 1.3 км/ч.РасходыЧасть денег вернулась в виде дошедшего телефона и баланса на его счету, так что я считаю эти затраты нулевыми. Телефон Philips E1021120р0рСим-карта с 250р на счету300р250рОтправка посылки200р200рМТС-Локатор200р200рИтого450рВыводыТелефон за тысячу рублей может полтора месяца выходить на связь и развлекать хозяина.Предложите в комментариях интересное направление, куда ещё послать этот заслуженный телефон. Впрочем, эксперимент легко повторить и самостоятельно.UPD: встречайте на Хабре соавтора эксперимента, VValentin!UPD2: Добавили более наглядную картинку, чем гифкаUPD3: Кто может подвердить, что у lenovo p700i «есть функция включения и выключения питания по расписанию. Есть по одному пункту включения/выключения в день и больше добавить нельзя»? Опция есть, как и ещё у некоторых смартфонов Fly, программный доступ к ней под вопросом.UPD4: Минута славы в телевизоре: www.m24.ru/videos/23489."
    },
    "doc_22": {
        "url": "https://habr.com/ru/post/316912/",
        "title": "Как Skype уязвимости чинил",
        "text": "Короткий ответ: никак, им пофиг.В статье описываются мои безуспешные попытки убедить сотрудников Microsoft, что их сервис уязвим, а также унижения, которые приходится выносить пользователям Skype. Под катом невежество, боль и отчаяние.UPDСтатья на английском hub.zhovner.com/geek/how-skype-fixes-security-vulnerabilities/Пост на HackerNews news.ycombinator.com/item?id=13227480TL;DR:Любой может заблокировать ваш аккаунт навсегда так, что вы больше не сможете им пользоваться. Для этого достаточно знать только имя аккаунта. В большинстве случаев Skype откажет вам в восстановлении доступа. Microsoft знает об этой проблеме несколько лет.Механизм генерации восьмизначных одноразовых кодов аутентификации (Microsoft Security Code), которые используются для восстановления пароля к аккаунту Microsoft, уязвим. Атакующий может угадать код.Техподдержка Skype уязвима для атак социальной инженерии. Microsoft считает это нормальным.Техподдержка Skype не знает, что на самом деле происходит с вашим аккаунтом, и почему он заблокирован. В любом случае вы получите стандартный ответ, что ваш аккаунт заблокирован за нарушение правил, даже если аккаунт был удален по вашему запросу.Skype по-прежнему раскрывает ваш IP-адрес, в том числе и локальный (тот, что на сетевом интерфейсе). В некоторых случаях возможно раскрытие контактов, подключенных с того же внешнего IP-адреса, что и вы. Например, членов семьи, подключенных к домашнему роутеру.Атакующий может скрыть активную сессию из списка авторизованных клиентов (команда /showplaces) используя старые версии SDK. Таким образом, зная пароль, можно незаметно просматривать переписку жертвы. Обо мнеЯ пользуюсь скайпом около десяти лет. Раньше я мог назвать себя настоящим фанбоем скайпа.Когда был доступен публичный баг-трекер jira.skype.com, я активно пытался улучшить Skype, рапортовал о багах. Например, SCW-2778 Remote DoS exploit. Эта уязвимость позволяла удаленно обрушить десктопную версию Skype для Windows так, что программа не запускалась без очистки истории.Или SCW-3328, которая позволяла удаленно включить отключенный микрофон во время звонка.Уже тогда Skype настораживал своим подходом к исправлению багов. Мне приходилось буквально умолять разработчиков исправить проблему, которую не могли починить годами! Вот как это выглядело.Я пользовался всеми продуктами Skype, инструментами для разработки Skype4Com, Skypekit. Покупал premium-подписки. Продвинул на работе идею купить Skype For Business. Писал ботов, сервис для генерации собственных смайлов и т.д.Но сегодня могу сказать, что я искренне ненавижу Skype. Это отвратительный сервис, погрязший в бюрократии и невежестве сотрудников, абсолютно игнорирующий проблемы и занятый только созданием 3D Видеосмайлов. На сегодняшний день Skype не просто не безопасен, он представляет угрозу для пользователей, потому что его механизмы обеспечения безопасности не работают.Хронология событийУже на протяжении нескольких лет существуют уязвимости, приводящие к блокировке произвольного Skype-аккаунта. Их несколько, ими активно пользуются злоумышленники и предоставляют в качестве сервиса.Раньше я много писал про уязвимости скайпа, и ко мне стали обращаться жертвы блокировок, которые находили меня через поиск.Я видел разные случаи блокировок Skype-аккаунтов. Пытался помочь людям восстановить доступ и умолял Skype сделать с этим хоть что-то. Обычно это были блокировки через массовые жалобы. Это давно известный способ, который существует уже много лет. Он настолько старый, что стал частью детской субкультуры, ведущей войны друг с другом в Skype. Но за последний год случилось нечто вопиющее, о чем я не могу молчать. Способ 1 — абузы (классический)В Skype аккаунт блокируется автоматически, если на него поступило достаточное количество жалоб от других пользователей. Предположительно, более 20 штук. Для того, чтобы отправить жалобу, не нужно даже добавлять аккаунт в контакт-лист, это можно сделать, найдя аккаунт через поиск и кликнув «заблокировать → сообщить о нарушении».Таким образом, жертва может не знать об отправленных в ее адрес жалобах.Этой технике уже много лет. О ней писали на Хабре, о ней знают даже дети, которые собираются в группы для совместного накручивания жалоб.Вот, например, найденные беглым поиском по vk.com:vk.com/block_pidaram_skypevk.com/skype_deletevk.com/blacklistskypevk.com/blockskypvk.com/eds_snosvk.com/club58649499vk.com/club49404483Таких сообществ много и в самом Skype. Существует даже отдельная субкультура «вкачивателей». Обычно это дети 12-19 лет, которые объединяются в кланы. Суть их деятельности состоит в максимальном нанесении вреда оппоненту, который выбирается случайным образом.Основные баталии происходят в виде словесных дуэлей в групповых звонках. Смысл в том, чтобы максимально унизить собеседника за короткий период времени и зафиксировать это на видео.Видеозаписи дуэлей (Осторожно: мат и крики)www.youtube.com/watch?v=F3mDFk5m_Hswww.youtube.com/watch?v=cwNixaAML4Iwww.youtube.com/watch?v=zWhCcqTnjxwЗапечатлен момент блокировки skype-аккаунта www.youtube.com/watch?v=4vhy-J-kQtkНекоторые кланы вкачиваетелей выпускают свой фирменный софт для автоматизации вредоносной деятельности.Демонстрация программы для массовой рассылки жалоб (Видео). Получается подобие ботнета из собственного контакт-листа, который добровольно абузит присланные аккаунты. Напомню, что для жалобы не нужно добавлять аккаунт жертвы к себе в контакты. То есть на вас может пожаловаться сотня школьников, с которыми вы никогда не общались, и вы этого не узнаете.Я лично знаю десяток жертв, чьи аккаунты были удалены таким образом. На все обращения в поддержку Skype отвечают стандартной отпиской:I understand that your Skype account was blocked. I apologize for any inconvenience that this may have caused, but I will be more than happy to look into this for you.Our automatic systems detected that activities which are contrary to Skype’s Terms and Conditions have taken place via your Skype account. As a result, your account has been restricted and will remain restricted until further notice.Перевод Я понимаю, что ваш аккаунт был заблокирован, и извинюсь за доставленные неудобства. Я буду БОЛЕЕ ЧЕМ СЧАСТЛИВ посмотреть, чем я могу помочь.Наша автоматическая система определила, что вы чмо и нарушаете все правила. Поэтому мы удалили нафиг ваш аккаунт, до свидания.Угадайте, исправлена ли эта уязвимость на текущий момент? Конечно же нет!Блокировка через техподдержкуОсенью 2015 года мне стали писать люди, пострадавшие от нового вида атаки. На этот раз перед блокировкой аккаунта жертве приходили письма от Microsoft с восьмизначным кодом. Письма были отправлены с ящика verifyme@microsoft.com и имели корректную DKIM-подпись, то есть были точно от Microsoft.Проведя с друзьями собственное расследование, мы нашли исполнителя атаки. Его объявлениями были заполнены все форумы для малолетних кулхацкеров. Вот его реквизиты:Вот одно из объявлений удалятора:Чтобы проверить, как происходит удаление, я заказал у него удаление моего тестового аккаунта. Для чистоты эксперимента были соблюдены такие условия:Аккаунт был зарегистрирован на свежесозданный почтовый ящик, никак не связанный с аккаунтом. Угадать или найти почту от аккаунта в открытых источниках было невозможно.Был установлен сложный пароль из длинной последовательности цифр и букв в разном регистреВ контакт-листе были добавлены только доверенные контакты.Аккаунт не состоял в конференциях и почти не использовался для переписки и звонковНа протяжении всего процесса удаления я мониторил почтовый ящик и был авторизован в десктопном Skype клиенте.Через несколько часов после оплаты на почту посыпались письма с Microsoft Security Code, как на скриншоте выше. За 10 часов пришло 24 письма с кодами. Забегая вперед скажу, что атакующий в итоге угадывал код подтверждения.Вот все коды из писем, пришедшие за время атаки, с привязкой ко времени получения письма.Видно, что отправка происходит короткими всплесками в пределах нескольких минут.После того, как письма прекратились, в профиле аккаунта удалились личные данные (имя, фамилия, пол). Остался только логин. В настройках аккаунта на сайте skype.com почтовый ящик сменился с моей почты на deleted@skype.com. Меня разлогинило из десктопного клиента.На тот момент мы имели следующие данные:Атакующий не знает почту от аккаунта. Учитывая предыдущие инциденты со взломом аккаунтов, от которых была известна почта, можно было предположить похожую атаку.Пароль от аккаунта достаточно надежен и подбор исключен.Запросов авторизации от незнакомых контактов не происходило. В Skype-клиенте никакой активности не было. Атакующий никак не контактировал с жертвой.Из этого не было понятно, как именно происходит удаление. Не удавалось найти форму, которая генерирует письма с Microsoft Security Code. Ничего не оставалось, кроме как пытаться выудить информацию у взломщика. Мы с друзьями продолжили заказывать удаление тестовых аккаунтов, и в один момент взломщик, в качестве доказательства выполнения атаки, показал скриншот, на котором оператор техподдержки подтверждает, что аккаунт успешно удален:Имя аккаунта заблюрено.Это была форма Live Chat Support, доступная аккаунтам с подпиской. Найти ее можно на сайте skype.com, пройдя несколько раз мастер решения проблем. Если выбирать все время «проблема не решена», то на последнем шаге предлагается открыть чат. Чат открывался со стороннего домена https://sales.liveperson.net. Из описания на сайте видно, что это сторонняя компания, предлагающая услуги поддержки для вашего продукта.В итоге процедура удаления аккаунта через чат тех. поддержки выглядела так:Атакующий говорит: «Пожалуйста, удалите мой аккаунт accountname, потому что я завел другой.Оператор просит подтвердить владение аккаунтом, назвав код, который был выслан на почту, привязанную к аккаунту. При этом оператор не называет почты, а только ожидает правильный код.После того, как оператор получит правильный код, аккаунт удаляется. При этом оператор соглашается выслать код повторно несколько раз и не возражает, если названный ему код не подходит.Забавно, что в форму чата с поддержкой передается логин, под которым был авторизован клиент на skype.com. То есть оператор, в теории, должен видеть, с каким именно пользователем он общается. От того особенно странно, что можно назвать совершенно любой аккаунт для удаления и оператор послушно согласится начать процедуру удаления. В этот момент все еще неясно, как конкретно атакующий успешно завершает процедуру удаления. Эй, Microsoft!Уязвимость очевидна. Бежим кричать тревогу в Skype. Ведь такую серьезную уязвимость обязательно должны исправить, не так ли?Так как у Skype нет каких-то публичных контактов для сообщений об уязвимостях, пробую написать на форум. Никто не реагирует, зато в теме отметились другие жертвы этой атаки.Через друзей мне удалось связаться напрямую с сотрудниками Microsoft. Я подробно описал все этапы уязвимости, приложил скриншоты, листинги кодов. Меня заверили, что начато внутреннее расследование. Серьезная компания ведь.Однако спустя месяц ко мне снова обратились новые жертвы этой атаки. Сотрудники Microsoft сообщили, что расследование еще не закончено.Пробую написать в secure@microsoft.com. Это специальный ящик для быстрого реагирования на критические уязвимости. Гарантируется ответ в течение 24 часов. В письме я подробно описываю этапы удаления аккаунта со скриншотами.Ответ Microsoft Security Response Center:Вольный перевод: это не уязвимость, вы просто дурак.Раз в неделю я спрашивал, как продвигается расследование у ребят из Microsoft, на что получал ответ, что результата нет. Так продолжалось около ШЕСТИ МЕСЯЦЕВ!!!. Было достоверно известно, что атакующий называет правильный код оператору. Иногда со второй-третьей попытки. Стыдно признаться, но мне так и не удалось выяснить как, именно это происходило. Сперва мне казалось, что код генерируется от времени, и поэтому атакующий пытается запросить как можно больше кодов в течение одной минуты, что видно по времени получения писем, но я не смог найти зависимости кода от времени. Возможно, был уязвим сам сервис чатов liveperson.net. Недавно Skype отказались от сервиса liveperson.net, и чат с агентом поддержки происходит на домене microsoft.com. Процедура удаления скайп-аккаунта теперь недоступна оператору тех. поддержки, и ее нужно выполнять самостоятельно через форму.Наверное, тут вы подумаете, что уязвимость закрыта. Как бы не так.Эксперимент — умереть за ваши грехиСпустя год после описанных выше событий, ко мне снова обратились жертвы нашего удалятора скайпов. Теперь письма с Security Code не приходили, очевидно был найден другой способ. Признаться, мне вся эта история уже порядком надоела. Я устал умолять, унижаться и выпрашивать исправить уязвимости по многу месяцев.Как я уже говорил, я пользуюсь скайпом около десяти лет. Моему основному аккаунту zhovner примерно столько же. Мне показалось, что будет нечестно только смотреть на страдания других людей, не пережив этого самому. Тогда я решил провести эксперимент и заказать сразу удаление своего аккаунта.Заказ удаления Стоимость работ — 2 тысячи рублей (примерно $30). На этот раз удалятор обозначил три дня на выполнение работы. И действительно, через несколько дней меня разлогинило из скайпа, и больше я не мог в него войти. Общение с техподдержкой SkypeСразу после блокировки аккаунта я написал в техподдержку Skype. Предположив, что аккаунт был заблокирован старым добрым способом через массовые жалобы, я подробно описал ситуацию.Оригинал переписки можно посмотреть здесь: telegra.ph/Account-blocked-by-mass-abuse-reporting (Читать сверху вниз)Я рекомендую прочитать именно оригинал, чтобы ощутить полностью унижение, которое испытывают невинные жертвы блокировок.Краткая выдержка из переписки:<Я> Почему мой аккаунт заблокирован? Я предполагаю, что это результат массовых поддельных жалоб. <Skype> Наша автоматическая система заблокировала ваш аккаунт за нарушение правил использования Skype.<Я> Ваша система уязвима, с помощью поддельных жалоб можно заблокировать чужой аккаунт, даже если он не выполняет никаких действий и не нарушает правила. Мой аккаунт был заблокирован именно таким образом. Пожалуйста, проверьте тщательно.<Skype> Мы проверили, наша система не ошибается, вы точно нарушили правила. Наша система очень точна, и все действия логируются. Мы точно видим, что вы нарушили правила, ваш аккаунт не будет разблокирован никогда. Если хотите пользоваться скайпом дальше — заводите новый.<Я> Ваша система подвержена мошенническим манипуляциям. Вот доказательства.<Skype> Нет, наша система не ошибается, инфа 100%<Я> Хорошо, назовите мои конкретные действия, которые привели к блокировке.<Skype> Вы уже описали эти действия в предыдущих письмах. Вы правы насчет причин блокировки.<Я> Вы что, сумасшедшие? Получается, вы подтверждаете, что любой аккаунт может быть удален, если злоумышленник отправит достаточное количество жалоб? И вы даже не знаете о причинах этих жалоб? Вы знаете, что эти абузы могут быть отправлены даже без добавления жертвы в контакт-лист. То есть их можно отправить с аккаунта, который никогда даже не общался с тем, на кого он жалуется. Получается, вы фактически подтверждаете существование такой уязвимости. Это вообще законно? Я планирую обратится в суд.<Skype> Мы считаем, что предоставили вам достаточно информации. Вы просто говно и все тут.<Я> Это очень серьезная уязвимость. Я считаю, что вы должны тщательно расследовать ее. У меня достаточно данных для воспроизведения этой уязвимости. Мы можем повторить ее на аккаунте, который вы предоставите, который точно не нарушает правила, и который вы полностью контролируете. Я оплачу удаление этого аккаунта атакующему, и вы сможете расследовать эту проблему.<Skype> Мы понимаем, что вы хотите узнать точную причину удаления вашего аккаунта. Мы уже сообщали вам ранее, что наша автоматическая система выявления мудаков очень точна. Так вот, вы — мудак. У нас все записано!<Я> Хорошо, что если я хочу сообщить об уязвимости? Вот ее подробное описание…<Skype> Да нам пофиг вообще, идите в суд или полицию.ИтогНа текущий момент, прошло 15 дней с момента блокировки моего аккаунта. Из переписки с поддержкой видно, что возвращать его не собираются. Но я все-таки рассчитываю его вернуть, и получить извинения от Skype за все унижения, которые мне приходится терпеть, пытаясь сделать их сервис безопаснее.К сожалению, Skype на сегодняшний день — огромная неповоротливая бюрократическая машина, которая из-за своих размеров и плохой организации не способна выявлять и реагировать на проблемы. Я сильно сомневаюсь, что в ближайшее время что-то изменится. В статье описаны уязвимости, которые известны лично мне. По опыту, можно предположить, что существует еще огромное число проблем, о которых я просто не знаю, и которые активно эксплуатируются.Важно понимать, что таким проблемам подвержен ЛЮБОЙ мессенджер с централизованным управлением, где вся безопасность строится на доверии к администрации. Если вы считаете, что ваш любимый мессенджер более безопасен чем Skype, потому что его сотрудники хорошие ребята, то это большое заблуждение.Люди, которые имеют неограниченный доступ к информации всех своих пользователей, могут быть уязвимы к давлению, шантажу или обману. Вряд ли кто-либо готов сидеть в тюрьме или отдать жизнь за сохранность сообщений своих пользователей. И пока существует такой неограниченный доступ, всегда будет соблазн этот доступ использовать неправомерно.По-настоящему безопасный мессенджер должен быть построен не на доверии к какой-то группе людей, а на невозможности неправомерного доступа к информации на уровне спецификации."
    },
    "doc_23": {
        "url": "https://habr.com/ru/post/439766/",
        "title": "Увеличь это! Современное увеличение разрешения",
        "text": "Я уже перестал вздрагивать и удивляться, когда звонит телефон и в трубке раздается жесткий уверенный голос: «Вас беспокоит капитан такой-то (майор такой-то), вы можете ответить на пару вопросов?» Почему бы не поговорить с родной полицией…Вопросы всегда одни и те же. «У нас есть видео с подозреваемым, пожалуйста, помогите восстановить лицо»… «Помогите увеличить номер с видеорегистратора»… «Здесь не видно рук человека, пожалуйста, помогите увеличить»… И так далее в том же духе.Чтобы было понятно о чем речь — вот реальный пример присланного сильно сжатого видео, где просят восстановить размытое лицо (размер которого эквивалентен примерно 8 пикселям):И ладно бы только русские дяди Степы беспокоили, пишут и западные Пинкертоны. Вот, например, письмо из полиции Англии <*****@*****.fsnet.co.uk>:I have used your filters privately for some time to rescue my poor videos of family holidays but I would like to use the commercial filters for my work. I am currently a Police Officer in a small police force and we are getting a lot of CCTV video, which sometime is very poor quality and I can see how your filters would make a real difference. Can you tell me the cost and if I could use them.Thank youПереводЯ уже пользовался вашими фильтрами для личных целей, чтобы спасти свои плохие видео с семейных праздников. Но мне бы хотелось использовать коммерческие фильтры в своей работе. В данный момент я офицер полиции в небольшом подразделении. Мы получаем большое количество видео с камер видеонаблюдения, иногда очень плохого качества, и ваши фильтры действительно помогут. Не могли бы вы сказать мне их стоимость, и могу ли я их использовать?СпасибоИли вот полицейский из Австралии пишет:Hi,I work for the Victoria Police in Australia, in the Video and Audio forensics unit. We occasionally receive video from either hand-held or vehicle-mounted cameras. Often these capture interlaced footage of fast-moving events. In particular, the footage which usually has the most «promise», is footage of vehicle number plates. We often find that the subject vehicle will have moved significantly between the first and last field being captured. As a result, we try and reconstruct the whole frame from the two fields, with the second being translated, sometimes rotated, and occasionally the size will be different too (as the vehicle is travelling away or towards the camera.) Marrying these two fields, preferably to sub-pixel accuracy, and reconstructing the frame containing the number plate, can be difficult.From what I've see of you deinterlacing footage, it may be that your filter can do some, if not all, of what we need. To be honest, as our budget is rather small, it is unlikely that we can afford a commercial license. We do not sell the product, of course, we use it for evidence in police cases. In any case, I thought I would write an email and ask anyway. How much would it cost for a license? Is it possible to test the product on footage, to see if it is appropriate? Does it do some of what we need? Lastly, has the algorithm been published? Working with unknown algorithms is dangerous practice for a court of law. If the evidence results in a man going to gaol for 20 years, it is good practice to know why!Any information you can offer would be appreciated.Regards,CaseworkerAudio Visual UnitVictoria Police Forensic Services DepartmentПереводПривет, Я работаю в полиции Виктории в Австралии в отделе видео и аудио криминалистики. Время от времени мы получаем видео с ручных камер и видеорегистраторов. Часто эти видео — чересстрочная съемка быстродвижущихся объектов. В частности, наиболее важный материал — номерные знаки транспортных средств. Мы часто обнаруживаем, что рассматриваемое транспортное средство сильно перемещается между первым и последним отснятым полем. В результате мы пытаемся восстановить целый кадр из двух полей, причем второе — сдвинутое, иногда повернутое и время от времени отличающееся размером (когда автомобиль едет к или от камеры). Объединение этих двух полей, желательно в полупиксельной точности, и восстановление целого кадра, содержащего номерной знак, может быть затруднительным.Я вижу, как вы применяете деинтерлейсинг к кадрам, и может быть ваши фильтры могут сделать что-то, если не все, что нам нужно. Честно говоря, возможно, мы не сможем позволить себе коммерческую лицензию, потому что наш бюджет достаточно мал. Мы не продаем продукт, конечно, мы используем его для доказательств в полицейских делах. В любом случае, я думал, что напишу письмо и все равно спрошу. Сколько будет стоить лицензия? Можно ли протестировать продукт на материале, чтобы узнать, подходит ли он? Делает ли он часть того, что нам нужно? Наконец, был ли опубликован алгоритм?.. Работа с неизвестными алгоритмами — опасная практика в суде. Если доказательства приводят к тому, что человек садится в тюрьму на 20 лет, полезно знать, почему. Будем благодарны за любую информацию, которую вы можете предоставить нам.С уважением, СледовательОтдела аудио и видео Департамента судебно-медицинской экспертизы полиции ВикторииЗаметим, что письмо очень продуманное, человек беспокоится о том, чтобы алгоритм был опубликован и об ответственности за неверное восстановление.Иногда они только в процессе переписки признаются, что они из полиции. Вот, например, карабинеры Италии хотели бы получить помощь:Dr. VatolinThanks for the answer.The answer is worth also for the police forces (Carabinieri investigationscientific for PARMA ITALY)?To which software they have been associates your algorithms to you.We would be a lot.ПереводДр. ВатолинСпасибо за ответ.Подходит ли это для полиции (Подразделение расследований Карабинеров для PARMA ITALY)?Они интересуются, в каком программном обеспечении используются ваши алгоритмы?Будем признательны.И, конечно, много обращений обычных людей… Увеличь это! Что, вам жалко правильную кнопку нажать? Понятно, что весь этот поток обращений появляется не на пустом месте. «Виноваты» в первую очередь фильмы и сериалы.Например, тут за 3 секунды кадр сжатого видео увеличивают в 50 раз и из отражения в очках видят улику:И таких моментов в современных фильмах и сериалах много. Например, в этом ролике совершенно эпично собрали подобные эпизоды из пачки сериалов, не пожалейте двух минут на просмотр: И когда вы подобное видите в каждом фильме, то последнему ежу становится понятно, что все, что вам нужно — это иметь грамотного компьютерного гения, комбинацию современных алгоритмов, и остается только вовремя скомандовать «STOP!» and «Enhance it!». И вуаля! Чудо произойдет!Впрочем, на этом уже избитом приеме сценаристы не останавливаются, и их безудержная фантазия идет дальше. Вот совсем чудовищный пример. Бравые детективы по отражению в ЗРАЧКЕ жертвы получили фото преступника. Действительно, отражение в очках уже было. Это банально. Давайте пойдем дальше! Просто у камеры видеонаблюдения в подъезде разрешение совершенно случайно оказалось как у телескопа Хаббл: В «Пророке» (00:38:07): В «Аватаре» (1:41:04–1:41:05) алгоритм увеличения резкости, кстати, какой-то необычный по сравнению с другими фильмами: он сначала повышает резкость в отдельных местах, а через долю секунды подтягивает остальное изображение, т.е. сначала левая половина рта, а потом правая:В общем, в очень популярных фильмах, которые смотрят сотни миллионов, увеличение резкости картинки делается в один клик. Все люди (в фильмах) делают это! Так почему вы, такие умные специалисты, не можете это сделать???— Я же знаю, это делается легко! И мне точно сказали, что вы этим занимаетесь! Вам что, лень нажать эту кнопку? // О боже… Проклятые сценаристы с их буйной фантазией… — Я понимаю, что вы загружены, но речь идет о вашей помощи государству в раскрытии важного преступления!// Мы понимаем.— Может дело в деньгах? Сколько вам нужно заплатить? // Ну как кратко объяснить, что дело не в том, что нам не нужны деньги… А потом еще раз, а потом еще...Любые совпадения цитат выше с реальными диалогами являются абсолютно случайными, но, в частности, этот текст пишется для того, чтобы отправлять человека сначала внимательно прочитать его, и только потом перезвонить.Вывод: Из-за того, что сцена с увеличением изображений с камер видеонаблюдения в один клик стала штампом современного кино, огромное количество людей искренне убеждены, что увеличить фрагмент кадра дешевой камеры или дешевого видеорегистратора — это очень просто. Главное — как следует попросить (ну или скомандовать, это как повезет).Откуда растут ногиПонятно, что весь этот поток обращений берется не на пустом месте. Мы действительно занимаемся улучшением видео уже около 20 лет, в том числе разными видами восстановления видео (а их несколько видов, к слову) и ниже в этом разделе будут наши примеры. «Умное» увеличение разрешения в научных статьях обычно называют Super Resolution (сокращенно SR). Google Scholar на запрос Super Resolution находит 2,9 миллиона статей, т.е. тема как бы достаточно хорошо прокопана, и ей занималось огромное количество людей. Если пойти по ссылке, то там какое-то море результатов, один краше другого. Впрочем, стоит копнуть глубже, картина, как водится, становится не столь пасторальна. В теме SR выделяют два направления:Video Super Resolution (0,4 миллиона статей) — собственно восстановление с использованием предыдущих (а иногда и последующих) кадров, Image Super Resolution (2,2 миллиона статей) — «умное» увеличение разрешения с использованием только одного кадра. Так как в случае одной картинки взять информацию о том, что было в этом месте на самом деле неоткуда, алгоритмы тем или иным способом достраивают (или, условно говоря, «додумывают») картинку — что там могло бы быть. Основной критерий при этом — результат должен смотреться максимально естественно, либо быть как можно ближе к оригиналу. И понятно, что для восстановления того, что было «на самом деле», подобные методы не годятся, хотя увеличить картинку для того, чтобы она получше выглядела, например, при печати (когда у вас есть уникальное фото, но нет версии в большем разрешении) подобными методами очень даже можно.Как видно, 0,4 миллиона против 2,2 — то есть в 5 раз меньшее число людей занимается собственно восстановлением. Благо, тема «сделай побольше, просто красиво» весьма востребована, в том числе в индустрии (пресловутый цифровой зум смартфонов и цифровых мыльниц). Причем, если погрузиться еще глубже, быстро выяснится, что заметное количество статей по Video Super Resolution — это тоже повышение разрешения видео без восстановления, ибо восстановление — это сложно. В итоге можно говорить о том, что тех, кто «делает красиво», примерно в 10 раз больше тех, кто действительно пытается восстановить. Довольно частая ситуация в жизни, кстати.Идем еще глубже. Очень часто результаты алгоритма очень хороши, но ему нужно, например, 20 кадров вперед и 20 кадров назад, а скорость обработки одного кадра — около 15 минут при использовании самого продвинутого GPU. Т.е. на 1 минуту видео нужно 450 часов (почти 19 суток). Упс-с-с… Согласитесь, это совсем не похоже на мгновенный «Zoom it!» из фильмов. Регулярно встречаются алгоритмы, работающие несколько дней на один кадр. Для статей более качественный результат обычно важнее времени работы, ибо ускорение — отдельная сложная задача, а большого слона проще кушать по частям. Так выглядит разница жизни и кино…Запрос на алгоритмы, работающие на видео с разумной скоростью породил отдельное направление Fast Video Super Resolution — 0,18 миллиона статей, включая «медленные» статьи, которые сравниваются с «быстрыми», т.е. реальное число статей о таких методах завышено. Заметим, что среди «быстрых» подходов процент спекулятивных, т.е. без реального восстановления, выше. Соответственно, процент честно восстанавливающих — ниже. Картина, согласитесь, проясняется. Но и это, конечно, далеко не все.Какие еще моменты существенно сказываются на получении хорошего результата?Во-первых, очень сильно влияют шумы. Ниже пример двукратного восстановления разрешения на очень зашумленном видео:Источник: материалы автораОсновная проблема на этом фрагменте даже не с обычными шумами, а с цветным муаром на рубашке, который сложно обрабатывать. Кто-то может сказать, что сегодня большие шумы не проблема. Это не так. Посмотрите на данные с автомобильных видеорегистраторов и камер видеонаблюдения в темное время суток (как раз тогда, когда они оказываются чаще востребованы). Впрочем, муар может возникать и на относительно «чистых» с точки зрения шума видео, типа приведенного ниже города (примеры ниже идут на основе этой нашей работы):Источник: материалы автораВо-вторых, для оптимального восстановления нужно близкое к идеалу предсказание движения между кадрами. Почему это сложно — отдельная большая тема, но это объясняет, почему сцены с панорамным движением камеры часто восстанавливаются очень хорошо, а сцены с относительно хаотичным движением крайне сложно восстановить, однако и с ними можно в некоторых ситуациях получить вполне неплохой результат:Источник: материалы автораИ, наконец, приведем пример восстановления текста:Источник: материалы автораЗдесь фон движется достаточно плавно, и у алгоритма есть возможность «разгуляться»:В частности, если сравнивать совсем мелкую надпись справа от руки, в том числе на увеличении с классической бикубической интерполяцией, то предельно хорошо видна разница: Видно, что у бикубической интерполяции прочитать год практически нереально, у Lanczos4, который любят за большую резкость те, кто полупрофессионально изменяет разрешение видео, края четче, конечно, однако прочитать год по-прежнему невозможно. Коммерческий Topaz не комментируем, а у нас четко читается надпись и можно увидеть, что это с большой вероятностью 1809 год. Выводы:Увеличением разрешения занимаются тысячи исследователей в мире, и на эту тему опубликованы миллионы статей. Благодаря этому в каждом смартфоне есть «цифровой зум», который обычно объективно лучше, чем алгоритмы увеличения обычных программ, а каждый FullHD телевизор умеет показывать SD видео, часто даже без характерных артефактов изменения разрешения.Восстановлением реального изображения из видео занимается сильно меньше 10% из занимающихся Super Resolution, более того, большинство алгоритмов восстановления крайне медленные (вплоть до нескольких дней вычислений на один кадр).В большинстве случаев восстановление рассчитано на то, что высокие частоты в видео более-менее сохранены, и поэтому не работают на видео с существенными артефактами сжатия. А поскольку в настройках камер видеонаблюдения степень сжатия нередко выбирают исходя из желания сохранить побольше часов (т.е. видео сжимается сильнее, и высокие частоты «убиваются»), восстановить такое видео становится практически невозможно.Как SR выглядит в индустрииСправедливости ради заметим, что свои (или как минимум купленные) алгоритмы увеличения разрешения сегодня есть у всех производителей телевизоров (нужно из SD картинки на лету делать HD), у всех производителей смартфонов (то, что в рекламе называют «цифровой зум») и т.д. Мы поговорим о результатах Google (и не только). Во-первых, потому что Google очень неплохо и без особого пафоса и маркетинга описывает результаты в своем блоге — и это крайне приятно. Во-вторых, потому что производители смартфонов (например, одна очень известная корейская компания) не чураются использовать, скажем так, Photoshop в рекламе своих технологий (какая разница — пипл все равно проглотит) — и это неприятно. В общем, поговорим про тех, кто описывает свои технологии достаточно честно. Еще в 2016 году Google опубликовал довольно интересные результаты алгоритма RAISR (Rapid and Accurate Image Super Resolution), использованного в смартфоне Pixel 2. На наиболее удачных картинках результат выглядел просто великолепно:Источник: AI блог GoogleАлгоритм представлял из себя набор фильтров, применяемых после ML классификации, и по сравнению с бикубической интерполяцией (традиционным мальчиком для битья) результат радовал:По порядку: оригинал, бикубическая интерполяция, RAISRНо это был Single Frame Interpolation, и на «неудачных» примерах, как листва ниже, картинка становилась весьма неприятно искажена — после увеличения фотография становилась заметно «синтетической». Проявлялся ровно тот эффект, за который не любят цифровой зум современных смартфонов:Чуда, по сути, не произошло, и Google честно и сразу опубликовали контр-пример, т.е. сразу обозначили границы применимости их подхода и избавили людей от избыточных ожиданий (характерных для обычного маркетинга).Впрочем, не прошло и двух лет, как было опубликовано продолжение работы, использованное в Google Pixel 3 и кардинально улучшающее качество его съемки, являющееся уже честным многокадровым Super Resolution, т.е. алгоритмом восстановления разрешения по нескольким кадрам:Источник: AI блог Google На картинке выше приведено сравнение результатов Pixel 2 и Pixel 3, и результаты выглядят очень хорошо — картинка действительно стала намного четче и хорошо видно, что это не «додумывание», а действительно восстановление деталей. Причем у внимательного профессионального читателя возникнут вопросы по поводу двух вертикальных сдвоенных труб слева. Разрешение явно выросло, при этом шаг алиайсинга (признак реального разрешения) выглядит странно близким. Что это было?В двух словах разберем алгоритм. Коллеги пошли от изменения интерполяции байеровского шаблона: Дело в том, что 2/3 информации в реальном изображении на самом деле информация интерполированная. Т.е. ваша картинка УЖЕ размыта и «замылена», но при реальном уровне шумов это не столь существенно. К слову, возможность использовать более сложные алгоритмы интерполяции сделала популярными программы максимально качественного преобразования RAW для фотографий (разница между простым алгоритмом, встроенным в каждый фотоаппарат, и сложным алгоритмом специализированной программы, как правило, хорошо заметна на глаз при увеличении картинки).Коллеги из Google используют тот факт, что подавляющее большинство фотографий смартфона делают с рук, т.е. камера будет слегка дрожать:Источник: AI блог Google (изображение нескольких кадров выровнено на пиксельном уровне, чтобы показать субпиксельный сдвиг)В результате, если снять несколько кадров и оценить сдвиг (а железо, которое в состоянии строить карту motion estimation с четвертьпиксельной точностью есть в любом смартфоне с поддержкой H.264), получаем карту сдвигов. Правда по анимации выше хорошо видно, что с реальным уровнем шумов построение карты сдвигов с субпиксельной точностью — весьма нетривиальная задача, но за последние 20 лет в этой области появились очень хорошие алгоритмы. Конечно, временами и им приходится несладко. Например, в примере выше что-то бликует на одном кадре наверху поручня лестницы. И это еще статическая сцена, нет движущихся объектов, которые иногда не просто движутся, а вращаются, меняют форму, движутся быстро, оставляя большие области открытия (шлейф которых не должно быть видно после обработки). На примере ниже хорошо видно, что происходит с быстро движущимися объектами, если отключить специальную обработку таких случаев (слева отключена, справа включена, если кликнуть — хорошо видны блоки обработки):Источник: AI блог Google (рекомендуется нажать и посмотреть в большом разрешении)Жесткие примеры — это пламя, рябь, блики солнца на воде и т.д. В общем, даже в «простой» задаче определения сдвига есть много нетривиальных моментов, заметно осложняющих жизнь алгоритму. Впрочем, сейчас речь не об этом.Интересно, что даже если камера совершенно неподвижна (например, закреплена на штативе), то можно заставить сенсор двигаться через управление модулем оптической стабилизации (OIS — Optical Image Stabilization). В итоге мы получим искомые субпиксельные сдвиги. В Pixel 3 поддержка OIS реализована, и можно прижать телефон к стеклу и с интересом наблюдать, как OIS начнет по эллипсу перемещать картинку (примерно, как по этой ссылке), то есть даже в этом сложном для него случае закрепления на штативе Super Resolution сможет отработать и поднять качество. Впрочем, львиная доля съемки со смартфонов — это съемка с рук.В итоге у нас появляется дополнительная информация для построения фотографии большего разрешения:Как уже говорилось выше, прямым следствием SR является сильное понижение уровня шумов, в некоторых случаях — очень ощутимое:Источник: AI блог GoogleЗаметим, что восстановление означает также и восстановление по числу бит на компоненту. Т.е. формально решая задачу увеличения разрешения, тот же самый engine при определенных условиях может не только подавлять шумы, но и превращать кадр в HDR. Понятно, что сегодня HDR используется пока редко, но это, согласитесь, неплохой бонус. На примере ниже приведено сравнение изображений, полученных при съемке на Pixel 2 и на Pixel 3 после SR при сравнимом качестве сенсора. Хорошо видна разница по шумам и разница по четкости: Для любителей разглядывать детали выложен альбом, в котором Super Resolution от Google (маркетинговое название Super Res Zoom) можно оценить во всей красе в спектре шкалы приближения изображения на смартфоне (изменение FoV):Как они скромно пишут — они еще на шаг приблизили качество съемки смартфонов к качеству профессиональных фотоаппаратов.Справедливости ради заметим, что профессиональные фотоаппараты тоже на месте не стоят. Другое дело, что при меньших масштабах продаж те же технологии для пользователя обойдутся дороже. Тем не менее, SR в профессиональных фотоаппаратах уже появляются.UPD:В качестве примера (последняя ссылка — сравнение):Testing Sony’s New Pixel Shift Feature in the a7R III, про увеличение разрешения в 2 раза по обоим измерениям (и рекламное видео в котором красиво рисуется, как мы волшебным образом сдвигаемся ровно на пиксел в каждом направлении при накоплении байеровского паттерна),Повышение разрешения в Olympus E-M5 Mark II с 16 до 40 мегапикселов, Статья с описанием Super Resolution в фотоаппарате Pentax K-1,Великолепная статья: Pixel-Shift Shootout: Olympus vs. Pentax vs. Sony vs. Panasonic — сравнение повышения разрешения Pentax K-1, Sony a7R III, Olympus OM-D E-M1 Mark II и Panasonic Lumix DC-G9. Характерно, что обработка движущихся объектов, про которую речь шла выше и которая весьма нетривиальна, есть только у Pentax K-1.Выводы:Алгоритмами Super Resolution сегодня обзаводятся все компании, чьи продукты профессионально работают с видео и фото, особенно хорошо это видно по производителям телевизоров и смартфонов.Простой SR: Image Super Resolution — порождает заметные артефакты (неестественная картинка), поскольку не является алгоритмом восстановления.Основные бонусы алгоритмов восстановления — уменьшение шума, уточнение деталей, «более честный» HDR, хорошо видимое более высокое качество картинки на телевизорах с большой диагональю.Все это великолепие стало возможно благодаря кардинальному (примерно на 3 порядка в числе операций) увеличению сложности алгоритмов обработки фотографии, или точнее — одного кадра видео.Результаты ЯндексПоскольку все равно в комментариях спросят, пару слов скажу про Яндекс, который в прошлом году опубликовал свой вариант Super Resolution:Источник: https://yandex.ru/blog/company/oldfilms А тут несколько примеров на мультфильмах:Источник: https://yandex.ru/blog/company/soyuzmultfilm Что это было? Яндекс повторил технологию Google 2016 года?На странице описания технологии от Яндекс (маркетинговое название DeepHD) ссылки только на Image Super Resolution. Это означает, что заведомо существуют контрпримеры, на которых алгоритм портит картинку и они встречаются чаще, чем для алгоритмов «честного» восстановления. Зато теме посвящено примерно 80% статей и алгоритм проще реализовать.На хабре эта технология тоже описывалась (интересно, что автор статьи — выпускник нашей лаборатории), но, как можно заметить по комментариям, авторы не ответили ни на один мой вопрос, при том на другие отвечали. И это, скорее, не авторы злодеи, а политика компании (в других постах, если присмотреться, тоже часто нет ответов на вопросы специалистов). Ибо в блогах технологических компаний нежелание идти глубже в обсуждение деталей реализаций или технологий является нормальным явлением. Особенно, если при этом создается лучшее впечатление о технологии/продукте. Или конкуренты могут запилить то же самое быстрее. Опять же, за посты отвечает маркетинг, и это их непосредственная работа — создание благоприятного впечатления о продуктах компании вне зависимости от качества самих продуктов. Отсюда частое недоверие к информации, исходящей от маркетинга.Вообще, стоит весьма скептично относиться к картинкам компаний из серии «как мы сделали всем всё хорошо» по следующим причинам:Авторы алгоритмов обработки хорошо знают, что практически не бывает алгоритмов, которые в некоторых случаях не порождали бы артефакты. И, собственно, одна из ключевых задач разработчика — уменьшить процент таких случаев (или заметность артефактов в таких случаях) при сохранении качества в остальных случаях. И очень часто это НЕ удается:Либо артефакты столь сильны и сложно исправляемы, что весь подход бракуется. Собственно это случай, пожалуй (сюрприз-сюрприз!), большинства статей. Божественные картинки в некоторых случаях (на которые точились) и «it does not work at all» в остальных.Либо (и это частая ситуация для практических технологий компаний) приходится несколько пожертвовать качеством в среднем ради того, чтобы артефакты в худших случаях можно было терпеть. Соответственно, когда плохие примеры не публикуются (классика для компаний) или публикуются ограниченно и с умолчаниями (классика для статей) — это самый распространенный случай введения людей в заблуждение касательно свойств технологии/алгоритма.Другой частый пример введения в заблуждение относительно алгоритмов обработки — это использование параметров (в т.ч. внутренних параметров) алгоритма. У алгоритмов, так сложилось, есть параметры, а пользователи — и это тоже норма — любят, чтобы была максимум одна кнопка «включить». И даже если настройки есть, то массовый пользователь их не использует. Именно поэтому компании при покупке технологии «стопятьсот» раз переспрашивают «Это точно полный автомат?» и просят много примеров. Соответственно, частая история — публикация результата, который был получен при определенных параметрах. Благо разработчик хорошо их знает, и даже когда их под полсотни (реальная ситуация!), очень быстро подбирает их так, чтобы картинка была волшебна. Ровно эти картинки зачастую и идут в рекламу.Причем разработчик может даже быть против. Маркетинг видит новые присланные примеры и говорит «на них ничего не видно, в прошлой презентации у вас же были нормальные примеры!». И дальше им можно пытаться объяснить, что новые примеры — это то, что люди реально увидят, а в прошлой презентации показывались потенциальные результаты, которых можно достичь по предварительным исследованиям начала проекта. Это никого не волнует. Пипл получит картинку «где видно». В некоторых случаях даже крупные компании используют «photoshop». Хавать подано, господа пипл! )Кроме того, если речь идет про видео — открывается просто огромные просторы для махин… хорошего маркетинга! Ибо, как правило, выкладываются кадры, а качество сжатого видео всегда осциллирует и зависит от массы параметров. Опять же — можно несколько технологий грамотно применять, время обработки, опять же, может быть разным. И это не все, простор велик.В рекламе Яндекса указано, что технология DeepHD работает в реальном времени, поэтому уже сегодня с ее использованием можно смотреть телевизионные каналы. Выше объяснялось, что скорость работы — ахиллесова пята Super Resolution. Достоинство нейросетей, безусловно, в том, что обучаясь долго, работать они в некоторых случаях могут очень быстро, но все равно я бы посмотрел (с огромным профессиональным интересом), в каком разрешении и с каким качеством алгоритм работает в реальном времени. Обычно создается несколько модификаций алгоритма и на больших разрешениях при real-time многие «фишки» (критичные для качества) приходится отключать. Очень многие.В черно-белых примерах при внимательном рассмотрении видно, что меняется локальная яркость. Поскольку правильный SR яркость не меняет, то это, похоже, работал еще какой-то алгоритм, возможно не один (по результатам видно, что это не Single Frame Processing, точнее похоже не только). Если посмотреть кусок большего размера (хотя бы 100 кадров), картина будет понятна. Впрочем, измерение качества видео — это отдельная очень большая тема.Выводы:Надо понимать, что маркетологи часто используют свои приемы ровно потому, что это работает (и еще как!). Подавляющее большинство людей не читают хабр не желают глубоко разбираться в теме и даже не ищут мнения эксперта, им достаточно рекламы (иногда — голимой рекламы). Что регулярно приводит к разного рода перекосам. Желаю всем поменьше вестись на рекламу, особенно когда storytelling на высоте и будет очень хотеться поверить в чудо! И, безусловно, очень хорошо, что в Яндексе тоже работают над темой и делают свой SR (точнее, свое семейство SR).ПерспективыВернемся к тому, с чего начинали. Что же делать тем, кто хочет увеличить сжатое видео? С этим совсем все плохо?Как было описано выше, алгоритмам «честного» восстановления критично даже слабое изменение изображения в области, буквально на уровне шумов. То есть, критичны высокие частоты в изображении и их изменение между кадрами.При этом главное, за счет чего производится сжатие видео — это удаление межкадровых шумов. На примере ниже межкадровая разница шумного видео до компенсации движения, после компенсации (при слабом сжатии) и после ощутимого сжатия — почувствуйте разницу (контраст поднят примерно в 6 раз, чтобы было видно детали):Источник: лекции автора по алгоритмам сжатияХорошо видно, что с точки зрения кодека идеальная область — это область, движение в которой было полностью скомпенсировано и на которую более не надо тратить ни бита. Ну чуть-чуть бит можно потратить, что-то минимально подправить. И таких областей может быть довольно много. Поэтому Super Resolution лишается своего «основного хлеба» — информации о том, что в этом месте находится в других кадрах с учетом субпиксельного сдвига. Если посмотреть по статьям, то даже для относительно простого JPEG на jpeg restoration находится 26 тысяч результатов, а для jpeg recovery — 52 тысячи, причем это вместе с восстановлением битых файлов и т.д. Для видео ситуация похуже mpeg restoration — 22 тысячи, т.е. работы, конечно, ведутся, но масштабы с масштабами работ по Super Resolution не сравнимы. Работ примерно на порядок меньше, чем по восстановлению разрешения видео и на два порядка меньше, чем Image Super Resolution. Два порядка — это много. Мы подход к снаряду тоже делали (поскольку и сжатием, и обработкой занимаемся давно), там есть с чем работать, особенно если качество осциллирует или используется что-то типа M-JPEG (еще недавно — частая картина в видеонаблюдении). Но это все будут частные случаи. По результатам статей по ссылками выше также видно, что результаты иногда очень красивые, но получены для очень частных случаев. Т.е. завтра в каждом смартфоне эта функция, увы, не появится. Это плохая новость. Хорошая — послезавтра и на компьютере с хорошим GPU — появится точно. Причины:Постепенно дешевеют устройства накопления (SD-карты для регистраторов, диски для камер видеонаблюдения и т.д.) и повышается средний битрейт сохранения видео. Также при сжатии постепенно переходят на стандарты следующих поколений (например, на HEVC), что означает заметное повышение качества при том же битрейте. Последние 2 пункта означают, что постепенно качество видео будет все выше, и начиная с какого-то момента начнут работать хорошо проработанные алгоритмы Video Super Resolution.Наконец, совершенствуются алгоритмы. Особенно хороши достижения алгоритмов на основе машинного обучения за последние 4 года. В этом плане с большой вероятностью можно ожидать что-то типа такого:Т.е. в алгоритме будет явным образом использоваться информация о движении, полученная от кодека, и далее эти данные будут скармливаться нейросети, обученной на восстановлении артефактов, характерных для конкретных кодеков. Такая схема выглядит на данный момент вполне достижимой.Но в любом случае нужно четко понимать, что текущее восстановление — это, как правило, увеличение разрешения в 2 раза. Реже в некоторых случаях, когда исходных материал не сжимался или почти не сжимался, речь может идти о 3-4 разах. Как видите, это даже близко не 100-1000 раз увеличения из фильмов, когда 1,5 пиксела убитой шумами ночной записи превращаются в превосходного качества номер машины. Жанр «научная фантастика» следовало бы присваивать по факту большему проценту фильмов и сериалов.И, конечно, будут попытки сделать что-то универсальное, в рамках модного тренда «главное запилить слоев побольше». И тут стоит предостеречь от «ура-ура» реакции на рекламные материалы на эту тему. Ибо нейросети — это самый удобный framework для демонстрации чудес и разного рода спекуляций. Главное — грамотно подобрать обучающую выборку и финальные примеры. И вуаля! Зрите чудо! Очень удобно в плане окучивания инвесторов, кстати. То есть крайне важно, чтобы работоспособность технологий подтверждалась кем-то независимым на большом количестве разнородных примеров, что демонстрируется крайне редко. Для компаний даже привести один-два примера, когда технология не работает, приравнивается сегодня к гражданскому подвигу.Ну и чтобы жизнь медом не казалась — напомню, что сегодня популярен так называемый транскодинг, когда на деле приходится работать с видео, которое изначально было пожато каким-то одним алгоритмом, а потом пережато другим, при этом используются другие вектора движения, снова уничтожаются высокие частоты и т.д. И то, что человек там все видит хорошо, не означает, что обрабатывающему такое видео алгоритму будет реально совершать чудеса. Восстанавливать сильно пережатые видео получится не скоро, хотя в целом Super Resolution будет бурно развиваться в следующие 10 лет.Выводы:Помните, что то, что вы видите в фильмах и то, как оно в реальной жизни — сильно отличается. И не только в плане восстановления сильно сжатого видео!Обычно современные алгоритмы повышают разрешения в 2 раза, реже — чуть больше, т.е. никаких 50 раз, привычных по фильмам, скоро ждать не приходится. Область Super Resolution бурно развивается и можно ожидать активного развития Video Restoration в ближайшие годы, в том числе восстановление после сжатия.Но первое, что мы увидим — это разного рода спекуляции на тему, когда демонстрируемые результаты будут сильно преувеличивать реальные возможности алгоритмов. Be careful!В конце прошлого года нами была сделана лекция «Нейросети в обработке видео — мифы и реальность». Возможно, доберемся ее сюда положить. Stay tuned! БлагодарностиХотелось бы сердечно поблагодарить:Лабораторию Компьютерной Графики ВМК МГУ им. М.В.Ломоносова за вычислительные мощности и не только,наших коллег из видеогруппы, благодаря которым представленные выше алгоритмы были созданы, и, особенно, Карена Симоняна, автора статьи, результаты которой демонстрировались выше и который сейчас работает в Google DeepMind,персонально Константина Кожемякова, который сделал очень много для того, чтобы эта статья стала лучше и нагляднее,компанию Google за великолепный блог и относительно корректные описания созданных технологий и компанию Яндекс за то, что они на широком фронте очень неплохо составляют конкуренцию Google — практически единственный успешный пример в стране, где сервисы Google не запрещены, хабровчан denisshabr, JamboJet и iMADik за наводку и ссылки на многокадровый SR профессиональных фотоаппаратов, и, наконец, огромное спасибо Вячеславу Нападовскому, Евгению Купцову, Станиславу Грохольскому, Ивану Молодецких, Алексею Соловьеву, Евгению Ляпустину, Егору Склярову, Денису Кондранину, Александре Анзиной, Роману Казанцеву и Глебу Ишелеву за большое количество дельных замечаний и правок, сделавших этот текст намного лучше!"
    },
    "doc_24": {
        "url": "https://habr.com/ru/post/131386/",
        "title": "Обновление версий Android: печальная статистика",
        "text": "Вчера Google развеяла все надежды владельцев Nexus One на обновление системы до Android 4.0. И надо сказать, что владельцам первого Нексуса еще повезло — ведь большинство андроидо-владельцев были бы рады даже такой «продолжительности жизни».Мишель ДеГуста, владелец блога, Theunderstatement.com ведет забавную статистику: он скрупулезно записывает дату выхода очередного андроид-смартфона (речь идет о крупных релизах на территории США и не включает в себя большинство китайцев), его цену и т.н. «период актуальности». И знаете, получается очень интересно:— 7 из 18 смартфонов никогда не имели актуальной (т.е. последней) версии Android;— 12 из 18 имели актуальную версию Android всего несколько недель или меньше;— 10 из 18 отставали на две версии системы к тому моменту, когда подходил срок окончания их двухгодичного контракта с сотовым оператором;— 11 из 18 телефонов перестали получать обновления менее чем через год после выхода;— 13 из 18 перестали получать поддержку еще в том момент, когда они еще продавались, или сразу же после;— 15 из 18 не получили обновления до версии 2.3 (Gingerbread), хотя она была выпущена в декабре 2010-го;— в течение нескольких недель после выхода Android 4.0 (Ice Cream Sandwic), все рассмотренные на графике аппараты получат по минус одной версии ОС;— по крайней мере 16 из 18 рассмотренных аппаратов никогда не получат Ice Cream Sandwich официально.Ну как тут не вспомнить «дайте 2.1 на Hero!». Сама инфографика под катомP.s. кстати, ради интереса можно засечь мою карму. Сейчас она равна 80-ти при 196 голосах. Прогнозирую резкое уменьшение :)UPD: кармический эксперимент идет очень показательно. За пару часов существования топика, карма незначительно выросла (спасибо), но минусануть ее успели уже 9-ть человек. И это при том, что сам пост минусанули два раза. Так сказать, к вопросу о фанатичности."
    },
    "doc_25": {
        "url": "https://habr.com/ru/post/273249/",
        "title": "Как попасть на дачу президента в пять часов утра",
        "text": "Этот пост о том, как обычный взлом обернулся муками совести и душевными терзаниями. Исходников будет не много, больше фоток и анализа. Итак, некто Вася работает «плохим парнем». Степень падения Васи такова, что средства на жизнь ему приносит поиск и разбор информации, доступ к которой был скомпрометирован вследствие неграмотного обслуживания, безалаберности или экономии на обслуживающем персонале.Так повелось с момента возникновения группы, где Вася проводит большую часть времени, его профилем является анализ добытых данных и составление некоторого отзыва, если того просит заинтересованное лицо. Будень московскийОбычное московское утро, офис-подвал, кофе, Вася с друзьями обсуждает новый заказ от старого знакомого. Все стандартно, надо достать инфу, всю до чего можно дотянуться. Адреса, сайты, места жительства персонала, страницы в соцсетях и т.д. получены заранее, и чем больше соберет покупатель сведений заранее, тем быстрее и качественнее будет результат. Подопытная фирма оказалась из северной столицы, без сайта (таких еще полно в России-матушке) и занимается поставками некоторого (какого будет разобрано ниже) оборудования, контора вроде как развалилась, но еще агонизирует, и некто мистер Х хочет получить остатки разработок данных. В командировку уехал самый молодой, ибо квалификации, чтобы поснифать wifi-трафик на предмет паролей, явок, ссылок и другой инфы, много не нужно.В результате этих исследований были добыты секретные слова к почте, далее из переписки выянилось, что для хранения арендован дедик, который стоял на территории подопытного. Сервер иногда удаленно админился извне, на нем крутится старая убунта 12.04 LTS версии (это к вопросу об экономии на оборудовании и персонале). Просканировали на наличие уязвимостей, доступ по ssh настроен только на конкретные ip (достаточно грамотно), открыты с десяток портов, в том числе 21(FTP), 39, 41 и 95, нашлось несколько дырок, сервер сдался на уязвимости CVE-2014-0196, через нее подняли рута с третьей попытки, два раза сервак падал, но никто даже не шевельнулся, чтобы узнать в чем дело. Искали все, что было похоже на исходники, документацию и т.д. Зашли, осмотрелись, собрали урожай, почистили, проверили, еще раз почистили, ушли. Продолжаем копатьПросматривая слитые каталоги, были обнаружены папки Confluence, Repositories и Secrets со всякой фигней и парочка неинтересных бэкапов, общий объем данных немногим больше 70 гигов. Папка Secrets, равно как и бэкапы, содержала «нежно розовый фарш» из данных, фоток, обрезков текста — такое чувство, что прошлись шредером. Открываем «Repositories», как наиболее интересного кандидата на изучение: тут оказалась куча SVN репозиториев, созданных в период с 2006 по 2013 года. Те папки, которые Вася распаковывал, отличаются по датам создания от основного архива.Ловля удалась — вот он «Язь» программерский: куча сорцов из приватного репозитория, добытые в «бессонные ночи». Вася шарится по папкам, попутно спрашивая у гугла некоторые названия, на большинство запросов последний отвечает рекламой бессвязным бормотанием, а вот на некоторые — вполне конкретными событиями и координатами:— moskva_postanovka: ну тут понятно, что-то ставили в столице;— sochi_bruche_postanovka: гугл не знает, что такое sochi_bruche, зато ответит на вопрос «sochi b ruche». Можете глянуть;— sosnbor_aes_postanovka: тут гугл с ходу выдал ответ по такой замене «сосн бор аэс постановка»;— valdai_rosino_postanovka: опять попадание с первого раза — «валдай рощино постановка»;— volgodonsk_aes_postanovka: ну тут и ежу понятно, что-то ставили на волгодонской атомной станции, Вася там служил в молодости и с местами знаком не понаслышке.Видимо, серьезные ребята, самое время посмотреть, что за рыбка попалась в наши сети. И да, Васю, как старого сишника очень коробит русский транслит в исходниках (сарказм).«moskva_postanovka_r»Смотрим репу — матерь божья, кто же так пишет? Сорцы вперемешку с временными файлами и объектниками, видимо, разработчик находится (находился на момент 2008 года) на первых курсах института… стоп, студент-разработчик большой софтины? Вы серьезно? Удалив временные файлы получим такую картину:В папке Capture картиночка завалялась от 30 сентября 2008 года. Похоже на снимок с гугл-карт. Отличительных чертами этого места является расположение возле воды, и необычность формы набережной. Дальнейший поиск по карте златоглавой привел к такому результату:«Копаем дальше»Также в репозитории обнаружился док, объясняющий для чего сделана программа и сорцы, собственно, какого продукта Вася получил.«Пасхалки»Разобравшись примерным назначением проги, Вася стал более внимательно изучать исходники в поисках чего-нить необычного. Все ведь знают, что разработчики, необремененные корпоративным этикетом, могут вставить что-нибудь эдакое для развлечения себя любимых. Какие критерии поиска задавались? Прежде всего искались комментарии типа: «WTF,TODO,f*ck и другие смешные слова». И попытки были вознаграждены на третий день дзен-созерцания: были найдены следующие куски кода: 1. Защита от начальства (файл UMainForm.cpp):Если не найдена либа со специальным названием в папке Windows, то программа будет выдавать следующее предупреждение: «ОАО НПП „ХХХ“ не оплатило разработку это приложения! Приложение будет закрыто!»Забавное предупреждение, рассчитанное видимо, на начальника-дурака.2. Граница на замке (файл UBChannel.cpp).Данный участок кода в период с 5.00 до 5.30 утра, видимо, засылает дальше в программу рандом вместо реальных данных, полученных от оборудования.3. Черная дыра (файл UBsoDevice.cpp).Третий подозрительный участок был выявлен здесь. Если сетевой адрес машины установлен в 192.168.88.88, то приходящая информация не отдается дальше (закладка/тестовая машина?).Что стоит (предположительно)Поиск в гугле выдает следующие результаты по запросам «ГУПО, Трал М, Галс, Нерпа М, НПП XXX».Описанный в репозитории софт обслуживает вот это оборудование: раз, два, почитать можно еще тут.Косвенно подтверждает правильность скомпрометированной информации следующая страница — три, в репозитории также находятся папки с названиями \"nerpa-m,nerpau,nerpa-sdp,nerpa_vs,nerpa_sc\". Их Вася не изучал, так что останавливаться на них не будем, но стиль программирования похожий. Там же на сайте указано, что срок службы данных изделий не менее 10 лет, т.е. если проги были поставлены в 2008 году, то они еще работают и, возможно, такие же дырявые (или это программные закладки, или перед выпуском в продакшн не закоментили тестовые строки).Где стоит (предположительно)Немного покопавшись в репозиториях, удалось выяснить следующие места обитания этого шедевра программисткой мысли.1. Валдай (предположительно дом отдыха в Рощино, рядом правительственный объект;2. Калининская АЭС;3. Ленинградская АЭС;4. Сочи (предположително дом отдыха «Бочаров Ручей», рядом правительственный объект, предположительно правительственная дача);5. Москва (предположительно Дом Правительства Московской области);6. Волгондоская АЭС.Предположительно общий список мест установки устройств:Правда жизниПосле озвучивания количества желаемых плюшек, заинтересованное лицо как-то пропало из поля видимости, оставив Васю в глубоких раздумьях о смысле бытия в современном мире и растущих без меры цен на оперативку. На общем совете было решено указать незадачливым админам на недостатки в безопасности, с указанием методов их возможного исправления. Также в адрес руководителя ОАО «НПП» ХХХ было направлено письмо с описанием найденных уязвимостей. Как обычно был дан двухнедельный интервал перед обнародованием написанной статьи, однако пришедший ответ Васю несколько обескуражил, приводится с некоторыми ремарками (аудитория все-таки культурная):«Послушай м[аз]ило мне глубоко по[б]ую как ты получил или спи[н]дил эту информацию. Ты не представляешь в какое г[уа]но вляпался и если об этом узнает кто-нибудь еще то искать тебя будут всей страной а я лично тебя [покараю].» Пунктуация оставлена без изменений.ЭпилогНа общем совете было решено обнародовать часть информации в виде этой статьи, не сливая при этом сорцы в инет, хотя сторонники показать миру «это» почти победили.Вася, конечно же, удалил сорцы, и забыл все, что увидел и откопал. За державу обидно только, если софт для армии и режимных объектов пишут [студенты] малопрофессиональные программисты, умудрившись при этом запихнуть пару-тройку закладок, а потом неадекватные и грубые люди, которые их наняли, продают «это» за немалые суммы государству. По информации с профильных форумов, стоимость подобного оборудования для армии и других ведомств составляет несколько миллионов деревянных. Надеюсь, что существующие уязвимости изготовитель устранил, но кто гарантирует что там нет других, не таких явных? P.S.: На момент написания статьи сервак без проблем сканится со старыми дырками. RIP. ИсходникиUBChannel.cpp — pastebin.com/xnA9p80FUKernel.cpp — pastebin.com/7AZpqkRXUMainForm.cpp — pastebin.com/PJgdKGcY"
    },
    "doc_26": {
        "url": "https://habr.com/ru/post/206742/",
        "title": "Подарок от Skype на новый год",
        "text": "Вероятно, в качестве рождественского и новогоднего подарков, Microsoft запустила акцию Skype Collaboration Project, в рамках которой Skype дарит пользователям возможность на весь следующий год возможность пользоваться функциями групповой работы (видеочат и разделение экрана), а также отключить отображение рекламы. Еще вы получаете годовой абонемент на обмен картинками рабочего стола в групповых звонках, полным отсутствием рекламы и бесплатную техническую поддержку на период прохождения акции.Для участия в акции переходим по этой ссылке и вводим туда почту на которую придет письмо с кодом (Вводить почту на которую зарегистрирован аккаунт скайпа не обязательно).Далее переходим на skype.com/go/voucher, логинимся там, и вводим код подтверждения который пришел нам на почту (может приходить с задержкой).Всё! Активация успешно завершена.via КО"
    },
    "doc_27": {
        "url": "https://habr.com/ru/post/415841/",
        "title": "Как мы научились подключать китайские камеры за 1000р к облаку. Без регистраторов и SMS (и сэкономили миллионы долларов)",
        "text": "Всем привет!Наверное, ни для кого не секрет, что в последнее время облачные сервисы видеонаблюдения набирают популярность. И понятно почему так происходит, видео — это \"тяжелый\" контент, для хранения которого необходима инфраструктура и большие объемы дискового хранилища. Использование локальной системы видеонаблюдения требует средств на эксплуатацию и поддержку, как в случае организации, использующей сотни камер наблюдения, так и в случае индивидуального пользователя с несколькими камерами. Облачные системы видеонаблюдения решают эту задачу — предоставляя клиентам уже существующую инфраструктуру хранения и обработки видео. Клиенту облачного видеонаблюдения достаточно просто подключить камеру к интернету и привязать к своему аккаунту в облаке.Есть несколько технологических способов подключения камер к облаку. Бесспорно, наиболее удобный и дешевый способ — камера напрямую подключается и работает с облаком, без участия дополнительного оборудования типа сервера или регистратора.Для этого необходимо, чтобы на камере был установлен модуль ПО работающий с облаком. Однако, если говорить про дешевые камеры, то у них очень ограничены аппаратные ресурсы, которые почти на 100% занимает родная прошивка вендора камеры, а ресурсов необходимых для облачного плагина — нет. Этой проблеме разработчики из ivideon посвятили статью, в которой говорится почему они не могут установить плагин на дешевые камеры. Как итог, минимальная цена камеры — 5000р ($80 долларов) и миллионы потраченных денег на оборудование.Мы эту проблему успешно решили. Если интересно как — велком под катНемного историиВ 2016 году мы стартовали разработку платформы облачного видеонаблюдения для Ростелекома. В части ПО камер на первом этапе пошли \"стандартным\" для таких задач путем: разработали свой плагин, который устанавливается в штатную прошивку камеры вендора и работает с нашим облаком. Однако, стоит отметить, что при проектировании мы использовали наиболее легковесные и эффективные решения (например, plain C реализацию protobuf, libev, mbedtls и полностью отказались от удобных, но тяжелых библиотек типа boost)Сейчас на рынке IP камер нет универсальных решений по интеграции: у каждого вендора свой способ установки плагина, свой набор API для работы прошивки и уникальный механизм обновления.Это означает, что для каждого вендора камер необходимо индивидуально разрабатывать объемный слой интеграционного ПО. И на момент старта разработки целесообразно работать только с 1-ним вендором, что бы сосредоточить усилия команды на разработке логики работы с облаком.Первым вендором был выбран Hikvision — один из мировых лидеров на рынке камер, предоставляющий хорошо документированное API и грамотную инженерную техническую поддержку.На камерах Hikvision мы и запустили наш первый пилотный проект облачное видеонаблюдение Видеокомфорт. Практически сразу после запуска наши пользователи стали задавать вопросы о возможности подключении к сервису более дешевых камер других производителей.Вариант с реализацией слоя интеграции под каждого вендора я отбросил практически сразу — как плохо масштабируемый и предъявляющий к железу камеры серьезные технические требования. Стоимость камеры, удовлетворяющий таким требованиям на входе: ~60-70$ Поэтому, я принял решение копать глубже — сделать полностью свою прошивку для камер любых вендоров. Этот подход существенно снижает требования к аппаратным ресурсам камеры — т.к. слой работы с облаком на порядок более эффективно интегрирован с video application, и в прошивке нет лишнего не используемого жирка.И что важно, при работе с камерой на низком уровне есть возможность использовать аппаратный AES, который шифрует данные, не создавая дополнительной нагрузки на маломощный CPU.В тот момент у нас не было вообще ничего. Вообще ничего.Практически все вендоры не были готовы работать с нами на таком низком уровне. Информации о схемотехнике и компонентах — нет, официальных SDK чипсетов и документации сенсоров — нет.Технической поддержки так же нет.Ответы на все вопросы приходилось получать реверс инжинирингом — методом проб и ошибок. Но мы справились. Первыми моделями камер, на которых мы набивали шишки стали камеры Xiaomi Yi Ants, Hikvision, Dahua, Spezvision, D-Link и несколько сверх дешевых безымянных китайских камер.ТехникаКамеры на чипсете Hisilicon 3518E. Аппаратные характеристики камер такие:Xiaomi Yi AntsNonameSoCHisilicon 3518EHisilicon 3518ERAM64MB64MBFLASH16MB8MBWiFimt7601/bcm43143-Sensorov9732 (720p)ov9712 (720p)Ethernet-+MicroSD++Microphone++Speaker++IRLed++IRCut++С них мы начинали. Сейчас поддерживаем чипсеты Hisilicon 3516/3518, а так же Ambarella S2L/S2LM. Количество моделей камер — десятки.Состав прошивкиubootuboot — это начальный загрузчик, после включения питания загружается первым, инициализирует оборудование и загружает ядро linux.Скрипт загрузки камеры достаточно тривиален:Из особенностей — два раза вызывается , подробнее об этом чуть позже, когда дойдем до подсистемы обновления. Обратите внимание на строчку . Да, да, это не опечатка — ядру Linux и всем-всем-всем приложениям доступно всего лишь 38 мегабайт оперативной памяти.Так же рядом с uboot находится специальный блок, называемый , в котором находится низкоуровневый скрипт инициализации DDR и ряда системных регистров SoC. Содержимое  зависит от модели камеры, и если оно будет не корректным, то камера даже не сможет загрузить uboot, а зависнет на самом раннем этапе загрузки.Первое время, когда мы работали без поддержки вендоров, мы просто копировали этот блок из оригинальной прошивки камеры.Ядро linux и rootfsНа камерах используется ядро Linux, входящее в состав SDK чипа, обычно это не самые свежие ядра из ветки 3.x, поэтому часто приходится сталкиваться с тем, что драйвера дополнительного оборудования не совместимы с используемым ядром, и нам приходится их бэк-портировать под ядро камеры.Другая проблема — это размер ядра. Когда размер FLASH всего 8MB, то каждый байт на счет и наша задача — аккуратно отключить все не используемые функции ядра, что бы сократить размер до минимума.Rootfs — это базовая файловая система. В нее включены , драйвера wifi модуля, набор стандартных системных библиотек, типа  и , а так же ПО нашей разработки, отвечающее за логику управления светодиодами, управление сетевыми подключениями и за обновление прошивки.Корневая файловая система подключена к ядру как initramfs и в результате сборки мы получаем один файл , в котором есть и ядро и rootfs.Video applicationНаиболее сложная и ресурсоемкая часть прошивки — приложение, которое обеспечивает видео-аудио захват, кодирование видео, настраивает параметры картинки, реализует видео-аналитики, например, детекторы движения или звука, управляет PTZ и отвечает за переключения дневного и ночного режимов.Важная, я бы даже сказал ключевая особенность — каким образом видео приложение взаимодействует с облачным плагином. В традиционных решениях 'прошивка вендора + облачный плагин', которые не могут работать на дешевом железе, видео внутри камеры передается по протоколу RTSP — а это огромный оверхед: копирование и передача данных через socket, лишние syscall-ы.Мы в этом месте используем механизм shared memory — видео не копируется и не пересылается через socket между компонентами ПО камеры, тем самым оптимально и бережно используя скромные аппаратные возможности камеры.Подсистема обновленияПредмет отдельной гордости — подсистема fault-tolerant онлайн обновления прошивки. Поясню проблематику. Обновление прошивки — это технически не атомарная операция и в случае если посередине обновления произойдет сбой питания, то на флеш памяти будет часть \"недозаписанной\" новой прошивки. Если не предпринять специальных мер, то камера после этого станет \"кирпичом\", который нужно нести в сервисный центр.Мы справились и с этой проблемой. Даже если камеру выключить в момент обновления, она автоматически и без участия пользователя скачает прошивку из облака и восстановит работу.Разберем технику подробнее:Наиболее уязвимый момент — перезапись раздела с ядром Linux и корневой файловой системой. В случае, если один из этих компонентов окажется поврежденным, то камера вообще не загрузиться дальше начального загрузчика uboot, который не умеет скачивать прошивку из облака.Значит, нам нужно обеспечить гарантию наличия на камере работоспособного ядра и rootfs в любой момент процесса обновления. Казалось бы самым простым решением было бы постоянно хранить на флеш памяти две копии ядра с rootfs и в случае повреждения основного ядра загружать его из резервной копии. Годное решение — однако, ядро с rootfs занимает около 3.5MB и для постоянной резервной копии нужно выделить 3.5MB. На самых дешевых камерах просто нет столько свободного места под backup ядра.Поэтому для backup ядра во время обновления прошивки используем application партицию.А для выбора нужной партиции с ядром как раз и используется две команды  в uboot — в начале пытаемся загрузить основное ядро и если оно повреждено, то резервное.Это гарантирует, что в любой момент времени на камере будет корректное ядро с rootfs, и она сможет загрузиться и восстановить прошивку.CI/CD система сборки и деплоя прошивокДля сборки прошивок мы используем gitlab CI, в котором автоматически собираются прошивки под все поддерживаемые модели камер, после сборки прошивки автоматически деплоятся на сервис обновления ПО камер.Из сервиса обновления ПО прошивки доставляются на тестовые камеры наших QA, а по завершению всех этапов тестирования и на камеры пользователей.Информационная безопасностьНи для кого не секрет, что в наше время информационная безопасность — это важнейший аспект любого IoT устройства, в том числе и камеры. По интернету гуляют ботнеты типа Mirai, поражающие миллионы камер со стандартными прошивками от вендоров. При всем уважении к вендорам камер, не могу не отметить, что в стандартных прошивках заложено много функционала, который не востребован для работы с облаком, однако содержит в себе много уязвимостей, которыми пользуются ботнеты.Поэтому, весь не используемый функционал в нашей прошивке отключен, все tcp/udp порты закрыты и при обновлении прошивки проверяется цифровая подпись ПО.И кроме этого, прошивка проходит регулярное тестирование в лаборатории информационной безопасности.ЗаключениеСейчас наша прошивка активно используется в проектах по видеонаблюдению. Пожалуй самый масштабный из них — трансляция голосования в день выборов Президента Российской Федерации.В проекте было задействовано более 70 тысяч камер с нашей прошивкой, которые были установлены по избирательным участкам нашей страны.Решив ряд сложных, а местами, даже на тот момент практически невозможных задач, мы, конечно, получили огромное удовлетворение как инженеры, но кроме этого, и сэкономили миллионы долларов на закупке камер. И в данном случае, экономия — это не только слова и теоретические расчёты, а результаты уже случившегося тендера на закупку оборудования. Соответственно, если говорить про облачное видеонаблюдение: есть два подхода — стратегически заложиться на низкоуровневую экспертизу и разработку, получив на выходе огромную экономию на оборудовании или использовать дорогое оборудование, которое, если смотреть именно на потребительские характеристики, практически ничем не отличается от аналогичного дешевого.Почему стратегически важно принять решение относительно выбора подхода к способу интеграции как можно раньше? При разработке плагина, разработчики закладываются на те или иные технологии (библиотеки, протоколы, стандарты). И если выбран набор технологий только под дорогое оборудование, то в дальнейшем попытка перехода на дешевые камеры с большой вероятностью, как минимум, займет безумно большое время или вообще потерпит неудачу и произойдет возврат к дорогому оборудованию."
    },
    "doc_28": {
        "url": "https://habr.com/ru/post/117367/",
        "title": "Что случилось с сайтом фонда «Сколково» вкратце",
        "text": "Все началось с поста хабраюзера oyaso, в котором он сравнил сумму денег заложенную на разработку сайта фонда инноваций «Сколково» и результатом полученным в виде сайта i-gorod.com Информация ниже рекомендуется к прочтению журналистам, помощникам всяческих руководителей разных рангов и тем кто ленился читать интересные комментарии к исходному посту.За считанные часы тема привлекла огромное внимание как хабросообщества, так и интернета в целом. Очень быстро выяснилось, что:Сайт был собран наспех на системе управления контентом UMI, к которой куплен дешевый шаблон без выкупа авторских прав (т.е. он повторно может быть использован любым желающим).Сайт был размещен на старой версии серверного ПО без обновлений, уязвимого к атакам и запущен на web-сервере Apache не приспособленном к высоким нагрузкам.Это привело к ожидаемому результату, который называется \"Хабраэффект\". Это когда переходы читателей habrahabr.ru по интересной ссылке приводят к перегрузке и падению упоминаемого сервера.Однако, хабраэффект был только началом. Пытливые исследователи нашли дыры в сайте, через которые были получены исходные коды, а так же пароли к административной панели и базе данных. Осторожнее, не умрите от смеха! Пароль к админке: 1В сети стали появляться как грибы клоны сайта i-gorod.com с правками остроумными и не очень, а исходные коды доступны всем желающим.http://j-gorod.com/http://www.skolkoffo.ru/http://www-i-gorod-com.dyndns.org:8000/Другое открытие заключалось в том, что корпоративная почта сайта была размещена на gmail.com. Да, на том самом вражеском gmail, который недавно хотел запретить один высокопоставленный сотрудник ФСБ. Мне нравится gmail тем, что 50 почтовых аккаунтов там можно завести абсолютно бесплатно. Видимо тем же он понравился фонду «Сколково».Очень быстро был найден предполагаемый исполнитель сайта, им оказался так же хабраюзер. Мир тесен, увы. Бедняге мгновенно накидали минусов в карму. Я считаю что не совсем справедливо, может быть он поработал на ту сумму, которую заплатили? Запахло жареным!В результате, администраторы сайта стали предпринимать действия по спасению ситуации — сменили пароли, переставили систему, начали устанавливать frontend сервер. Однако, кроме этой безусловно нужной работы, было размещено официальное объявление, в котором говорится:.И вот СМИ понесли весть о таинственных врагах инноваций.Оперативно появился человек, представляющий фонд «Сколково», попросил писать вопросы и предложения и обещал дать ответы на вопросы. Я написал ему письмо, предупредил об этом посте и хотел задать и обсудить вопросы. Увы, мое обращение осталось без ответа. Надеюсь что он был занят срочным делом по восстановлению сайта и сможет ответить позже. Вопросы выкладываю тут.Когда был сделан сайт i-gorod, сколько времени было потрачено на его разработку и какую сумму заплатили непосредственному разработчику?Как потрачены выделенные из бюджета 3 млн рублей на создание сайта?Какие параметры хостинга были до падения и сейчас? Планировали ли высокую посещаемость проекта или он был сделан для галочки?Какие выводы сделаны по итогам ситуации?Вы по прежнему считаете хабра-сообщество злыми хакерами, которые DDOS-ят сайт? Если да, то планируете ли подавать заявление в полицию, а если нет, то будет ли вывешен пресс-релиз с признанием ошибки?Вы готовы отблагодарить хабраюзера, который сделал вам отличную рекламу и провел шикарное нагрузочное тестирование?В завершение хотел бы отдельно упомянуть инициативу хабрасообщества по созданию социально значимых проектов общественными силами.Люди хотят прикладывать свои силы и менять общество к лучшему, а не тянуть деньги. Интересно, найдется ли им место в текущих модернизационных программах?И последняя просьба. Народ, не стоит под раздачу определять сайт www.skolkovo.ru Он хоть созвучен по имени и так же «страшно далек от народа», но к нашей теме все же отношения не имеет.Данный пост будет апдейтится в случае получения информации от представителей фонда «Сколково», либо в случае появления животрепещущих вопросов от народа, которые будут выбраны традиционным плюсованием комментариев.Update1. К сожалению по состоянию на 18:00 13 апреля мы не увидели никакой информации от администрации фонда «Сколково». Поэтому пытаемся разобраться самостоятельно. Ссылка на шаблон для CMS Joomla на котором запущен сайт. Стоимость от 65$store.templatemonster.com/joomla-templates/28038.html Меня лично впечатлили зеленые поля и ветряные мельницы.Update2. Читаем ответы: habrahabr.ru/blogs/internet/117452"
    },
    "doc_29": {
        "url": "https://habr.com/ru/post/543688/",
        "title": "Судьба предателя, угнавшего новейший МиГ-25 в Японию",
        "text": "Сегодня в воздушном пространстве США летают около пятидесяти истребителей российского производства — от устаревших МИГ-15 и до современных МИГ-29. Большая их часть приобретена на открытом рынке после распада Советского Союза и расторжения Варшавского Договора. В советское время у американцев не было шансов приобрести наши боевые машины, хотя Штаты ради этого были готовы на все.6 сентября 1976 года произошло ЧП: во время учебного полета на одном из дальневосточных аэродромов в Приморье, старший лейтенант Виктор Беленко поднялся в воздух на суперсовременном МИГ-25, и не вернулся на базу.МИГ-25 был не простым самолетом, а настоящей гордостью советских инженеров. Высотный истребитель-перехватчик по натовской классификации носил название «Летучая лисица». На Западе этому самолету приписывались уникальные характеристики, но проверить их возможности не было: Советский Союз умел хранить свои секреты. В побег Беленко долго не верили: надеялись, что произошла поломка, техническая ошибка или самолет попал в зону плохой видимости и мог сбиться с курса. Поиски пилота были прерваны звонком из МИД Японии. Советским военачальникам сообщили, что Беленко приземлился в аэропорту Хакодате на острове Хоккайдо, и попросил политического убежища в США. Но что же произошло в действительности?Юность и служба в Вооруженных Силах Родился Виктор Беленко в Нальчике, 15 февраля 1947 года, в рабочей семье. В 1965 окончил среднюю школу с серебряной медалью. В 1967 году поступил в Армавирское высшее военное авиационное училище лётчиков, которое окончил в 1971 году. Был направлен на службу лётчиком-инструктором в Ставропольское высшее военное авиационное училище лётчиков и штурманов. В служебных характеристиках и аттестациях на всём протяжении службы в армии характеризовался положительно. Член КПСС. Избирался членом комсомольского и партийного бюро. В 1975 году переведён на Дальний Восток (по его желанию) и получил назначение в 530-й истребительный авиационный полк 11-й отдельной армии ПВО (Чугуевский район Приморского края) на должность старшего лётчика. Летал на истребителе-перехватчике МиГ-25П.Побег6 сентября 1976 года в 6:45 Беленко вылетел с аэродрома Соколовка (возле села Соколовка, рядом с райцентром Чугуевка) для выполнения полётного упражнения. В 7:40 истребитель перелетел советско-японскую границу. В 9:15 японское радио передало, что самолёт МиГ-25П (бортовой номер «31»), пилотируемый советским лётчиком Беленко, совершил посадку в аэропорту Хакодате (остров Хоккайдо). Впоследствии японскими властями было сделано официальное уведомление, что Беленко попросил политического убежища. 9 сентября он был вывезен в США. После отставания от ведущего пары Беленко снизился до высоты примерно 30 метров, что позволило ему избежать обнаружения как советскими, так и японскими радарами. Углубившись в воздушное пространство Японии, Беленко поднялся на высоту около 6000 м и был засечён японскими средствами ПВО. Связаться с Беленко японцам не удалось, поскольку рация МиГ-25 была настроена на другую частоту. На перехват неизвестного нарушителя были подняты истребители, однако, к моменту их появления Беленко вновь снизился и пропал с радаров. Беленко планировал совершить посадку на авиабазе Титосе, но из-за недостатка топлива был вынужден садиться на ближайшем аэродроме, которым оказался Хакодате. Из-за недостаточной длины ВПП Хакодате МиГ-25 выкатился за пределы полосы и приблизился к границе территории аэропорта. Выбравшись из кабины, Беленко произвёл два предупредительных выстрела из пистолета — автомобилисты на близлежащей автостраде фотографировали происходящее. Реакция МИД СССР 28 сентября 1976 года в 12:05 по московскому времени ТАСС распространило пресс-релиз с текстом официальной реакции МИД СССР по поводу инцидента, где утверждалось, что, во-первых, В. И. Беленко совершил «вынужденную» посадку на аэродроме Хакодате, во-вторых, он был «вывезен» в США против своей воли, в-третьих, действия японской стороны в отношении как самолёта, так и пилота нельзя квалифицировать иначе как «недружественными» по отношению к СССР и «противоречащими нормам международного права». Двадцатью минутами позже вышел уточняющий материал ТАСС, в котором посадка Беленко в Хакодате описывалась как сделанная «при невыясненных обстоятельствах». Публикации в западной прессе о том, что перелёт Беленко был преднамеренным, а не вынужденным, назывались «кампанией пропаганды», а предположения на тему, что полёт Беленко, по всей вероятности, был побегом, названы «лживыми». Официальный представитель МИД СССР Л. В. Крылов заявил: «Всё это ложь, от начала и до конца».Причины побегаВсестороннее изучение личности Беленко, его поведения на службе и в быту показало, что у него неоднократно складывались острые конфликтные ситуации с командованием. Так, в период службы в Ставропольском авиационном училище он выражал настойчивое желание уйти с инструкторской работы, и в связи с этим изыскивал различные возможности для перевода в боевой полк. Однако эти попытки успеха не имели, так как командование, как правило, лётчиков-инструкторов из училища в войска не отпускало. По этой причине он стал проявлять недовольство и резко обострил отношения с командирами. В 1975 году обратился с рапортом к начальнику училища с просьбой уволить его из Советской Армии, мотивируя тем, что не желает служить с командирами, которые постоянно злоупотребляют спиртными напитками.В 1975 году переведён на Дальний Восток. За первые полгода службы на новом месте Беленко зарекомендовал себя с положительной стороны, успешно прошёл курс переподготовки на новом для него типе самолёта МиГ-25П, был назначен исполняющим обязанности начальника штаба эскадрильи, избран заместителем секретаря партийного бюро эскадрильи. К служебным обязанностям относился добросовестно. Недовольства своим положением или неустроенностью не высказывал.Примерно с июля 1976 года стали замечаться странности в его поведении. Он стал нервозным, взвинченным. Болезненно переживал задержку с присвоением очередного воинского звания капитан и назначением на обещанную при переводе должность начальника штаба эскадрильи.6 сентября, несмотря на конфликтную ситуацию, он был включён в плановые полёты и прибыл на аэродром. По иронии судьбы, документы о присвоении ему звания «капитан» пришли именно в тот день, когда он угнал самолет в Японию.Действия японских властей Советское правительство потребовало немедленно вернуть самолет. Однако японские власти заявили, что МИГ-25 нарушил государственную границу Японии, поэтому возвращен будет только после досконального осмотра. Истребитель перевезли на американскую военную базу, где разобрали по винтику. Вся секретная информация оказалась в руках американцев.СССР пригрозил Японии далеко идущими последствиями за несвоевременный возврат самолёта. Начались переговоры между советской делегацией во главе с Министром иностранных дел СССР А. А. Громыко и Министром иностранных дел Японии Дзэнтаро Косакой. Громыко потребовал незамедлительного возврата самолёта и пилота (который к тому времени уже находился в США), на что Косака ответил, что японская сторона готова к переговорам о возвращении самолёта, для этого он попросил Посла СССР в Японии Д. С. Полянского связаться с МИД Японии. 2 октября 1976 года в порту Хитачи состоялась передача МИГ-25 советской стороне. Самолет привезли в разобранном виде в тринадцати контейнерах, в которых к тому же не хватало деталей. За нанесенный ущерб, японцам вчинили иск в размере 7 миллионов рублей. Но это было слабым утешением: убытки Советского Союза составили по меньшей мере 2 миллиарда рублей. Возвращая самолёт в СССР, Япония выставила счёт в $40 тыс. за организацию непредусмотренной стоянки иностранного самолёта в японском аэропорту, оплату услуг охраны, технического обслуживания, транспортировки и другие расходы, включая ремонт повреждений аэродромной инфраструктуры, имевших место во время приземления самолёта. Счёт советской стороной оплачен не был. Жизнь беглеца в США9 сентября 1976 года, менее чем через трое суток после перелёта, Беленко был вывезен в США и получил разрешение на постоянное проживание в Америке, а вскоре получил и политическое убежище. Разрешение на предоставление гражданства подписал лично президент Джимми Картер. 14 октября 1980 года, Закон № 96-62 «О предоставлении Виктору Ивановичу Беленко гражданства США» был принят Конгрессом США. Беленко работал инженером по аэрокосмической технике и консультировал ВВС США. Его военный билет и полётный журнал хранятся в музее ЦРУ в Вашингтоне.С Беленко в первые месяцы его пребывания в США работали практически круглосуточно не только сотрудники ЦРУ, но также специалисты по вопросам советской авиации из Разведывательного Управления МО и РУ ВВС США, а также профессиональные доктора и психоаналитики (с целью установления его физического и психологического состояния, так как американские власти не сразу поверили в столь крупную удачу).Попутно с этим он начал изучать английский язык по программе учащихся колледжей, и быстро достиг успехов на этом поприще. Это было необходимо для того, чтобы работавшие с ними сотрудники спецслужб могли обходиться без переводчиков. Как охарактеризовал его один из офицеров разведки, который с ним работал, кроме предоставления американцам передового советского истребителя с массой секретного оборудования на борту, он сам по себе был «золотой жилой» технической, тактической и оперативной информации о советской авиации. Помимо перечисленного, разведслужбы занялись уточнением картографической информации и топографических данных дальневосточных пунктов базирования советской авиации, организации службы, ежедневных мероприятий боевой учёбы и проверки боевой готовности, почасовой и поминутный график несения службы советскими лётчиками и т. д.Беленко большую часть времени проводил в Вашингтоне, где работал по совместительству на нескольких высокооплачиваемых должностях: консультантом федеральных правительственных структур по вопросам советской авиации и консультантом авиастроительных компаний военной промышленности, которым он помогал совершенствовать вооружение и бортовую аппаратуру американских военных самолётов для борьбы против советской авиации, снимался в рекламе для различных американских компаний, был приглашён читать лекции в американских военных учебных заведениях, нередко приглашался в качестве эксперта для телевидения и печатных средств массовой информации по различным вопросам.В 2000 году Беленко дал интервью американскому корреспонденту на авиашоу в шт. Висконсин, США, в котором, в частности, сказал: «Я встретился (в США) с космонавтом Игорем Волком. Он говорит: «Ты же вроде бы умер!», — я ответил: «Не так быстро». КГБ распространил слухи о моем убийстве, чтобы отбить охоту у других.На основе рукописи, написанной Беленко вскоре после натурализации в США, на английском и русском языках в нескольких нью-йоркских книжных издательствах, — «Макгроу-Хилл» (на английском), «Ридерз дайджест пресс» (на английском) и через несколько лет в «Эффект паблишинг» (на русском), — вышла книга «Пилот МиГа», где описываются причины, побудившие его к перелёту за рубеж, а также подробности инцидента, описываемые с его точки зрения. В СССР книга в русскоязычном варианте была доступна только в спецхране для лиц, имеющих соответствующий допуск.Виктор Беленко на обложке книги «Пилот МиГа» Стратегические и внешнеэкономические последствия угона самолета По итогам анализа самолёта, американские технические специалисты пришли к заключению, что МиГ-25 не годится для перехвата высотных разведчиков SR-71, в первую очередь уступая ему по целому ряду лётно-технических характеристик, а скоростные параметры самолёта были в большей степени пропагандистским штампом для повышения его экспортной привлекательности как «второго самого быстрого самолёта на планете». Кроме того, американцам удалось ознакомиться с системой управления вооружением самолёта и получить достоверные технические данные о его реальных боевых возможностях, что было ценным приобретением в плане доводки собственных военных летательных аппаратов до уровня, позволяющего эффективно противостоять МиГам или даже превосходить их в том или ином аспекте. В плане баланса сил и их диспозиции, побег Беленко повлиял на перераспределение авиапарка истребителей-перехватчиков в рамках вооружённых сил стран Советского блока, — в то время как для нужд ВВС и истребительной авиации ПВО СССР интенсифицировалась разработка новых перехватчиков, МиГ-25 было решено спешно экспортировать в соцстраны и страны социалистической ориентации, пока он не устарел окончательно. Косвенно, побег Беленко повлиял на ход работ (в сторону интенсификации) и ускорил принятие на вооружение МиГ-31. Союзу пришлось менять всю техническую составляющую передового базирования всех ВВС СССР.Советское руководство пыталось осуществить нажим на Японию, угрожая в случае невозврата пилота вместе с самолётом прервать в одностороннем порядке выполнение им договорных обязательств по двусторонним внешнеторговым соглашениям, в частности, закрыть доступ для японских инвестиций в советскую экономику и народно-хозяйственный комплекс, прекратить японское участие в строительстве предприятий советской деревообрабатывающей, целлюлозно-бумажной промышленности, обмене технологиями ядерной энергетики и др. Это сразу отразилось на инвестиционном климате. В долгосрочном плане экономические последствия возникшей напряжённости (и убытки СССР из-за позиции занятой советским руководством) ещё длительное время давали о себе знать в советско-японской торговле.Для деятелей советского искусства и эстрады побег Беленко надолго закрыл дорогу в Японию. У советских музыкальных коллективов сорвались гастроли в Японии, даже у тех из них, которые уже получили советские выездные и японские въездные визы, гастроли были отменены без разъяснения причин органами управления советской эстрады.ЗаключениеВиктора Беленко за измену Родине заочно приговорили к высшей мере наказания. Вероятно, из-за этого он даже не искал контактов с родными. В Советском Союзе у него остались мать, жена и маленький сын. Но и после распада СССР Беленко так и не вышел на связь со своими близкими. Жена долгое время жила на Дальнем Востоке, потом переехала в Армавир."
    },
    "doc_30": {
        "url": "https://habr.com/ru/post/507498/",
        "title": "Как дочка Роснано, продавшая с Ростехом тысячи камер в школы, делает «российские» камеры c дырявой китайской прошивкой",
        "text": "Всем привет! Я занимаюсь разработкой прошивок камер видеонаблюдения для b2b и b2c сервисов, а также участвующих в проектах видеонаблюдения федерального масштаба.О том, как мы начинали, я писал в  статье.С тех пор многое изменилось — мы стали поддерживать еще больше чипсетов, например, таких как mstar и fullhan, познакомились и подружились с большим количеством как иностранных, так и отечественных производителей IP камер. Вообще, к нам часто приходят разработчики камер, показать новое оборудование, обсудить технические моменты работы прошивок или техпроцесс производства.Но, как всегда, иногда приходят странные ребята — приносят откровенный китай неприемлемого качества с прошивкой полной дыр, и наспех замазанной эмблемой третьесортной фабрики, но при этом утверждая — что разработали все сами: и схемотехнику, и прошивку, и у них получился типа полностью российский продукт.Об одних таких ребятах я сегодня и расскажу. Если честно, я не сторонник публичной порки нерадивых «импортозаместителей» — обычно принимаю решение, что отношения с такими компаниями нам не интересны, и на этом с ними расстаемся.Но, однако, сегодня, читая новости в фейсбуке и попивая утренний кофе — чуть не разлил его, прочитав новость о том, что дочка Роснано, компания ЭЛВИС-НеоТек, совместно с Ростехом поставит десятки тысяч камер в школы.Под катом — детали того, как мы их тестили.Да, да — это те самые ребята, которые приносили мне откровенный дешевый и плохой китай, под видом собственной разработки. Итак, давайте по фактам: К нам принесли камеру «VisorJet Smart Bullet», из отечественного — в ней была коробка и листик приемки ОТК (:-D), внутри оказалась типовая китайская модульная камера на базе чипсета Hisilicon 3516.После того, как сделали дамп прошивки, очень быстро стало понятно, что реальный производитель камеры и прошивки — некая контора «Brovotech», которая специализируется на поставке IP камер с кастомизацией. Отдельно, возмутило второе название этой конторы «ezvis.net» — топорная подделка названия компании Ezviz — b2c дочки одного из мировых лидеров Hikvision. Мда, все в лучших традициях Abibas и Nokla.В прошивке все оказалось ± стандартно, незатейливо по-китайски:Файлы в прошивке├── alarm.pcm├── bvipcam├── cmdserv├── daemonserv├── detectsns├── font├── lib…│   └── libsony_imx326.so├── reset├── start_ipcam.sh├── sysconf│   ├── 600106000-BV-H0600.conf│   ├── 600106001-BV-H0601.conf…│   └── 600108014-BV-H0814.conf├── system.conf -> /mnt/nand/system.conf├── version.conf└── www…├── logo│   ├── elvis.jpg│   └── qrcode.pngОт отечественного производителя видим файлик elvis.jpg — неплохо, но с ошибкой в названии фирмы — судя по сайту они называются «elvees».За работу камеры отвечает bvipcam — основное приложение, которое работает с A/V потоками и является сетевым сервером. Теперь про дыры и бэкдоры:1. В bvipcam очень просто находится бэкдор: strcmp (password,«20140808») && strcmp (username,«bvtech»). Он не отключаемый, и работает на не отключаемом порту 60002. В /etc/shadow статический пароль root и открытый порт telnet. Не самый мощный макбук брутфорснул этот пароль меньше чем за час. 3. Все сохраненные пароли камера может отдать по управляющему интерфейсу в открытом виде. То есть зайдя на камеру при помощи бэкдорного логопаса из (1), можно взять и запросто узнать пароли всех пользователей.Все эти манипуляции проделал лично — вердикт очевиден. Третьесортная китайская прошивка, которую и близко нельзя использовать в серьезных проектах.Кстати, чуть позже нашел статью — в ней проделали более глубокую работу по исследованию дыр в камерах от brovotech. М-да.По итогам обследования, мы написали в ЭЛВИС-НеоТек заключение со всеми обнаруженными фактами. В ответ получили от ЭЛВИС-НеоТек шикарный ответ: «Прошивка для наших камер базируется на Linux SDK от производителя контроллеров HiSilicon. Т.к. эти контроллеры используются в наших камерах. При этом поверх данного SDK разработано наше собственное ПО, отвечающее за взаимодействие камеры по протоколам обмена данными. Специалистам, проводившим тестирование, было затруднительно выяснить это, так как мы не предоставляли root-прав к камерам. И при оценке со стороны могло сложиться ошибочное мнение. При необходимости мы готовы продемонстрировать вашим специалистам весь процесс производства и прошивки камер на нашем производстве. В том числе показать часть исходных кодов прошивки.»Естественно, исходников никто не показал. Я принял решение с ними больше не работать. И вот, два года спустя, планы компании Elvees по производству дешевых китайских камер с дешевой китайской прошивкой под видом российской разработки нашли свое применение.Сейчас зашел к ним на сайт и обнаружил, что они обновили линейку камер и она перестала быть похожа на Brovotech. Вау, может быть ребята осознали и исправились — сами все сделали, на этот раз по-честному, без дырявой прошивки.Но, увы, простейшее сопоставление инструкции по эксплуатации «российской» камеры инструкциям в интернете дало результат. Итак, встречайте оригинал: камеры неизвестного вендора milesight. Чем этот milesight лучше brovotech? С точки зрения безопасности, скорее всего, ничем — дешевое в закупке решение.Достаточно взглянуть на скриншот Веб-интерфейса камер milesight и ЭЛВИС-НеоТек — не останется никаких сомнений: «российские» камеры VisorJet — клон камер milesight. Совпадают не только картинки web интерфейсов, а и дефолтный IP 192.168.5.190, и чертежи камер. Даже дефолтный пароль похож: ms1234 vs en123456 у клона.В завершении могу сказать, что я отец, у меня дети учатся в школе и я против того, чтобы в их образовании использовались китайские камеры с дырявыми китайскими прошивками, с троянами и бэкдорами."
    },
    "doc_31": {
        "url": "https://habr.com/ru/post/206264/",
        "title": "Изобретаем JPEG",
        "text": "Вы правильно поняли из названия, что это не совсем обычное описание алгоритма JPEG (формат файла я подробно описывал в статье «Декодирование JPEG для чайников»). В первую очередь, выбранный способ подачи материала предполагает, что мы ничего не знаем не только о JPEG, но и о преобразовании Фурье, и кодировании Хаффмана. И вообще, мало что помним из лекций. Просто взяли картинку и стали думать как же ее можно сжать. Поэтому я попытался доступно выразить только суть, но при которой у читателя будет выработано достаточно глубокое и, главное, интуитивное понимание алгоритма. Формулы и математические выкладки — по самому минимуму, только те, которые важны для понимания происходящего.Знание алгоритма JPEG очень полезно не только для сжатия изображений. В нем используется теория из цифровой обработки сигналов, математического анализа, линейной алгебры, теории информации, в частности, преобразование Фурье, кодирование без потерь и др. Поэтому полученные знания могут пригодиться где угодно.Если есть желание, то предлагаю пройти те же этапы самостоятельно параллельно со статьей. Проверить, насколько приведенные рассуждения подходят для разных изображений, попытаться внести свои модификации в алгоритм. Это очень интересно. В качестве инструмента могу порекомендовать замечательную связку Python + NumPy + Matplotlib + PIL(Pillow). Почти вся моя работа (в т. ч. графики и анимация), была произведена с помощью них.Внимание, трафик! Много иллюстраций, графиков и анимаций (~ 10Мб). По иронии судьбы, в статье про JPEG всего 2 изображения с этим форматом из полусотни.Каков бы ни был алгоритм сжатия информации, его принцип всегда будет один — нахождение и описание закономерностей. Чем больше закономерностей, тем больше избыточности, тем меньше информации. Архиваторы и кодеры обычно «заточены» под конкретный тип информации, и знают где можно их найти. В некоторых случаях закономерность видна сразу, например картина голубого неба. Каждый ряд его цифрового представления можно довольно точно описать прямой. Будем тренироваться на кошках енотах. В качестве примера взято серое изображение, приведенное выше. Оно хорошо совмещает как однородные области, так и контрастные. А если мы научимся сжимать серое, то и с цветным не будет проблем.Векторное представлениеДля начала проверим насколько зависимы два соседних пикселя. Логично предположить, что скорее всего, они будут очень похожи. Проверим это для всех пар изображения. Отметим их на координатной плоскости точками так, что значение точки по оси X — значение первого пикселя, по оси Y — второго. Для нашего изображения размером 256 на 256 получим 256*256/2 точек:Предсказуемо, что большинство точек находится на или рядом с прямой y=x (а их там еще больше, чем видно на рисунке, так как они многократно накладываются друг на друга, и, к тому же, они полупрозрачные). А раз так, то было бы проще работать, повернув их на 45°. Для этого нужно выразить их в другой системе координат.Базисные вектора новой системы, очевидно, такие: . Вынуждены делить на корень из двойки, чтобы получить ортонормированную систему (длины базисных векторов равны единичке). Здесь показано, что некоторая точка p = (x, y) в новой системе будет представлена как точка (a0, a1). Зная новые коэффициенты, мы легко можем получить старые обратным поворотом. Очевидно, первая (новая) координата является средним, а вторая — разностью x и y (но деленные на корень из 2). Представьте, что вам предложено оставить только одно из значений: либо a0, либо a1 (то есть другое приравнять нулю). Лучше выбрать a0, так как значение a1 и так, скорее всего, будет около нуля. Вот, что получится, если мы восстановим изображение только по a0:Увеличение в 4 раза:Такое сжатие не очень впечатляет, честно говоря. Лучше аналогично разобьем картинку по тройкам пикселей и представим их в трехмерном пространстве.Это один и тот же график, но с разных точек зрения. Красные линии — оси, которые напрашивались сами собой. Им соответствуют вектора: . Напоминаю, что приходится делить на некоторые константы, чтобы длины векторов стали равны единице. Таким образом, разложив по такому базису, мы получим 3 значения a0, a1, a2, причем a0 важнее a1, а a1 важнее a2. Если мы выбросим a2, то график «сплющится» в направлении вектора e2. Этот и так довольно не толстый трехмерный лист станет плоским. Он потеряет не так много, зато мы избавимся от трети значений. Сравним изображения, восстановленные по тройкам: (a0, 0, 0), (a1, a2, 0) и (a0, a1, a2). В последнем варианте мы ничего не выбросили, поэтому получим оригинал.Увеличение в 4 раза:Второй рисунок уже хорош. Резкие участки немного сгладились, но в целом картинка сохранилась очень неплохо. А теперь, точно так же поделим на четверки и визуально определим базис в четырехмерном пространстве… А, ну да. Но можно догадаться, каким будет один из векторов базиса, это: (1,1,1,1)/2. Поэтому можно посмотреть проекцию четырехмерного пространства на пространство, перпендикулярное вектору (1,1,1,1), чтобы выявить другие. Но это не лучший путь.Наша цель — научиться преобразовывать (x0, x1, ..., xn-1) к (a0, a1, ..., an-1) так, что каждое значение ai все менее важно, чем предыдущие. Если мы сможем так делать, то, возможно, последние значения последовательности вообще можно будет выбросить. Вышеприведенные опыты намекают, что можно. Но без математического аппарата не обойтись.Итак, нужно преобразовать точки к новому базису. Но сначала необходимо найти подходящий базис. Вернемся к первому эксперименту разбиения на пары. Будем считать обобщенно. Мы определили базисные векторы:Выразили через них вектор p:или в координатах:Чтобы найти a0 и a1 нужно спроецировать p на e0 и e1 соответственно. А для этого нужно найти скалярное произведениеаналогично:В координатах:Часто бывает удобнее проводить преобразование в матричной форме. Тогда A = EX и X = ETA. Это красивая и удобная форма. Матрица E называется матрицей преобразования и является ортогональной, с ней мы еще встретимся. Переход от векторов к функциям.С векторами малых размерностей работать удобно. Однако мы хотим находить закономерности в бОльших блоках, поэтому вместо N-мерных векторов удобнее оперировать последовательностями, которыми представлено изображение. Такие последовательности я буду называть дискретными функциями, так как следующие рассуждения применимы и к непрерывным функциям.Возвращаясь к нашему примеру, представим такую функцию f(i), которая определена всего в двух точках: f(0)=x и f(1)=y. Аналогично зададим базисные функции e0(i) и e1(i) на основе базисов e0 и e1. Получим:Это очень важный вывод. Теперь во фразе «разложение вектора по ортонормированным векторам» мы можем заменить слово «вектор» на «функция» и получить вполне корректное выражение «разложение функции по ортонормированным функциям». Не беда, что мы получили такую куцую функцию, так как такие же рассуждения работают и для N-мерного вектора, который можно представить как дискретную функцию с N значениями. А работа с функциями нагляднее, чем с N-мерными векторами. Можно и наоборот, представить такую функцию как вектор. Более того, обычную непрерывную функцию можно представить бесконечномерным вектором, правда уже не в евклидовом, а гильбертовом пространстве. Но мы туда не пойдем, нас будут интересовать только дискретные функции.А наша задача нахождения базиса превращается в задачу нахождения подходящей системы ортонормированных функций. В следующих рассуждениях предполагается, что мы уже как-то определили набор базисных функций, по которым и будем раскладывать.Допустим, у нас есть некоторая функция (представленная, например, значениями), которую мы хотим представить в виде суммы других. Можно представлять этот процесс в векторном виде. Для разложения функции нужно «спроецировать» ее на базисные функции по очереди. В векторном смысле вычисление проекции дает минимальное сближение исходного вектора к другому по расстоянию. Помня о том, что расстояние вычисляется с помощью теоремы Пифагора, то аналогичное представление в виде функций дает наилучшее среднеквадратичное приближение функции к другой. Таким образом, каждый коэффициент (k) определяет «близость» функции. Более формально, k*e(x) — лучшее среднеквадратичное приближение к f(x) среди l*e(x).В следующем примере показан процесс приближения функции только по двум точкам. Справа — векторное представление.Применительно к нашему эксперименту разбивания на пары, можно сказать, что эти две точки (0 и 1 по абсцисс) — пара соседних пикселей (x, y). То же самое, но с анимацией:Если мы возьмем 3 точки, то нужно рассматривать трехмерные вектора, однако приближение будет точнее. А для дискретной функции с N значениями нужно рассматривать N-мерные вектора.Имея набор полученных коэффициентов, можно легко получить исходную функцию, просуммировав базисные функции, взятые с соответствующими коэффициентами. Анализ этих коэффициентов может дать много полезной информации (в зависимости от базиса). Частным случаем этих соображений является принцип разложения в ряд Фурье. Ведь наши рассуждения применимы к любому базису, а при разложении в ряд Фурье берется вполне конкретный.Дискретные преобразования Фурье (ДПФ)В предыдущей части мы пришли к выводу, что неплохо было бы разлагать функцию на составные. В начале 19 века Фурье тоже задумался над этим. Правда картинки с енотом у него не было, поэтому ему пришлось исследовать распределение тепла по металлическому кольцу. Тогда он выяснил, что очень удобно выражать температуру (и ее изменение) в каждой точке кольца как сумму синусоид с разными периодами. «Фурье установил (рекомендую к прочтению, интересно), что вторая гармоника затухает в 4 раза быстрее, чем первая, а гармоники более высоких порядков затухают с ещё большей скоростью».В общем, вскоре оказалось, что периодичные функции замечательно раскладываются на сумму синусоид. А так как в природе существует много объектов и процессов, описывающимися периодичными функциями, то появился мощный инструмент их анализа.Пожалуй, один из самых наглядных периодических процессов — это звук.1-й график — чистый тон частотой 2500 герц.2-й — белый шум. Т. е. шум c равномерно распределенными частотами по всему диапазону.3-й — сумма первых двух.Если бы мне дали значения последней функции на тот момент, когда я не знал про ряды Фурье, и попросили проанализировать их, то я бы точно растерялся и не смог бы сказать ничего путного. Ну, да, какая-то функция, но как понять, что там есть что-то упорядоченное? Но если бы я догадался прослушать последнюю функцию, то ухо уловило бы чистый тон среди шума. Хотя и не очень хорошо, так как я специально при генерации подобрал такие параметры, чтобы на суммарном графике сигнал визуально растворился в шуме. Как я понял, до сих пор точно не уставлено, как слуховой аппарат делает это. Однако, недавно стало ясно, что он не раскладывает звук на синусоиды. Возможно, когда-нибудь мы поймем как это происходит, и появятся более совершенные алгоритмы. Ну, а мы пока по старинке.Почему бы не попробовать взять синусоиды в качестве базиса? На самом деле мы фактически уже сделали это. Вспомним наше разложение на 3 базисных вектора и представим их на графике:Да-да, знаю, это выглядит как подгонка, но с тремя векторами трудно ожидать большего. Зато теперь понятно, как получить, например, 8 базисных векторов:Не очень сложная проверка показывает, что эти вектора попарно перпендикулярны, т. е. ортогональны. Это значит, их можно использовать как базис. Преобразование по такому базису широко известно, и называется дискретным косинусным преобразованием (DCT). Думаю, из приведенных графиков понятно как получается формула DCT-преобразования:Это все та же формула: A = EX с подставленным базисом. Базисные вектора указанного DCT (они же векторы-строки матрицы E) ортогональны, но не ортонормированы. Это следует помнить при обратном преобразовании (не буду останавливаться на этом, но, кому интересно — у inverse DCT появляется слагаемое 0.5*a0, так как нулевой вектор базиса больше остальных).На следующем примере показан процесс приближения промежуточных сумм к исходным значениям. На каждой итерации очередной базис умножается на очередной коэффициент и прибавляется к промежуточной сумме (то есть так же, как и в ранних опытах над енотом — треть значений, две трети). Но, все-таки, несмотря на некоторые доводы о целесообразности выбора такого базиса, реальных аргументов пока нет. Действительно, в отличие от звука, целесообразность разложения изображения на периодические функции гораздо менее очевидна. Впрочем, изображение действительно может быть слишком непредсказуемым даже на небольшом участке. Поэтому, картинку делят на достаточно маленькие кусочки, но не совсем крохотные, чтобы разложение имело смысл. В JPEG изображение «нарезается» на квадраты 8x8. В пределах такого кусочка фотографии обычно очень однородны: фон плюс небольшие колебания. Такие области шикарно приближаются синусоидами.Ну, допустим, этот факт более или менее понятен интуитивно. Но появляется нехорошее предчувствие насчет резких цветовых переходов, ведь медленно изменяющиеся функции нас не спасут. Приходится добавлять разные высокочастотные функции, которые справляются со своей работой, но побочно проявляются на однородном фоне. Возьмем изображение 256x256 с двумя контрастными областями:Разложим каждую строку с помощью DCT, получив, таким образом, по 256 коэффициентов на строку.Затем оставим только первые n коэффициентов, а остальные приравняем нулю, и, поэтому, изображение будет представлено в виде суммы только первых гармоник:Число на картинке — количество оставленных коэффициентов. На первом изображении осталось только среднее значение. На второй уже добавилась одна низкочастотная синусоида, и т. д. Кстати, обратите внимание на границу — несмотря на все лучшее приближение, рядом с диагональю хорошо заметны 2 полоски, одна светлее, другая темнее. Часть последнего изображения увеличенного в 4 раза:И вообще, если вдали от границы мы видим первоначальный равномерный фон, то при приближении к ней, амплитуда начинает расти, наконец достигает минимального значения, а затем резко становится максимальным. Это явление известно как эффект Гиббса.Высота этих горбов, появляющийся около разрывов функции, не уменьшится при увеличении количества слагаемых функций. В дискретном преобразовании оно пропадает только при сохранении почти всех коэффициентов. Точнее, становится незаметным.Следующий пример полностью аналогичен вышеприведенному разложению треугольников, но уже на реальном еноте:При изучении DCT может сложиться ложное впечатление, что всегда вполне достаточно всего нескольких первых (низкочастотных) коэффициентов. Это верно для многих кусочков фотографий, тех, чьи значения не меняются резко. Однако, на границе контрастных участков значения будут резво «скакать» и даже последние коэффициенты будут велики. Поэтому, когда слышите о свойстве сохранения энергии DCT, делайте поправку на то, что оно относится ко многим видам встречаемых сигналов, но не ко всем. Для примера подумайте, как будет выглядеть дискретная функция, коэффициенты разложения которой равны нулю, кроме последнего. Подсказка: представьте разложение в векторном виде.Несмотря на недостатки, выбранный базис является одним из лучших на реальных фотографиях. Чуть позже мы увидим небольшое сравнение с другими.DCT vs все остальноеКогда я изучал вопрос ортогональных преобразований, то, честно говоря, меня не очень убеждали доводы о том, что все вокруг — это сумма гармонических колебаний, поэтому нужно и картинки раскладывать на синусоиды. А может быть лучше подойдут какие-нибудь ступенчатые функции? Поэтому искал результаты исследований об оптимальности DCT на реальных изображениях. То, что «Именно DCT чаще всего встречается в практических приложениях благодаря свойству «уплотнения энергии»» написано везде. Это свойство означает, что максимальное количество информации заключено в первых коэффициентах. А почему? Нетрудно провести исследование: вооружаемся кучей разных картинок, различными известными базисами и начинаем считать среднеквадратичное отклонение от реального изображения для разного количества коэффициентов. Нашел небольшое исследование в статье(использованные изображения здесь) по этой методике. В ней приведены графики зависимости сохраненной энергии от количества первых коэффициентов разложений по разным базисам. Если вы просмотрели графики, то убедились, что DCT стабильно занимает почетное… эмм… 3-место. Как же так? Что еще за KLT преобразование? Я восхвалял DCT, а тут…KLTВсе преобразования, кроме KLT, являются преобразованиями с постоянным базисом. А в KLT (преобразование Карунена-Лоэва) вычисляется самый оптимальный базис для нескольких векторов. Он вычисляется таким образом, что первые коэффициенты дадут наименьшую среднеквадратичную погрешность суммарно для всех векторов. Похожую работу мы проводили ранее вручную, визуально определяя базис. Сначала кажется, что это здравая идея. Мы могли бы, например, разбивать изображение на небольшие секции и для каждой вычислять свой базис. Но мало того, что появляется забота хранения этого базиса, так еще и операция его вычисления достаточно трудоемкая. А DCT проигрывает лишь немного, и к тому же у DCT существуют алгоритмы быстрого преобразования.DFTDFT (Discrete Fourier Transform) — дискретное преобразование Фурье. Под этим названием иногда упоминается не только конкретная трансформация, но и весь класс дискретных трансформаций (DCT, DST...). Посмотрим на формулу DFT:Как вы догадываетесь, это ортогональное преобразование с каким-то комплексным базисом. Так как подобная комплексная форма встречается чуть чаще, чем всегда, то имеет смысл изучить ее вывод.Может сложится впечатление, что любой чистый гармонический сигнал (с целой частотой) при DCT разложении будет давать только один ненулевой коэффициент, соответствующий этой гармонике. Это не так, поскольку помимо частоты, важна и фаза этого сигнала. Например, разложение синуса по косинусам (подобным образом и в дискретном разложении) будет таким:Вот вам и чистая гармоника. Она наплодила кучу других. На анимации показаны коэффициенты DCT синусоиды в разных фазах.Если вам показалось, что столбики вращаются вокруг оси, то вам не показалось. Значит теперь будем раскладывать функцию на сумму синусоид не просто разных частот, но еще и смещенных по какой-то фазе. Будет удобнее рассмотреть сдвиг фаз на примере косинуса:Простое тригонометрическое тождество дает важный результат: сдвиг по фазе заменяется суммой синуса и косинуса, взятых с коэффициентами cos(b) и sin(b). Значит, можно раскладывать функции на сумму синусов и косинусов (без всяких фаз). Это распространенная тригонометрическая форма. Однако, гораздо чаще используется комплексная. Для ее получения нужно воспользоваться формулой Эйлера. Просто подставим производные формулы для синуса и косинуса, получим:Теперь небольшая замена. Верхнее подчеркивание — сопряженное число.Получим итоговое равенство:c — комплексный коэффициент, действительная часть которого равна косинусному коэффициенту, а мнимая — синусному. А множество точек (cos(b), sin(b)) является окружностью. В такой записи каждая гармоника входит в разложение и с положительной и с отрицательной частотой. Поэтому в различных формулах Фурье-анализа обычно происходит суммирование или интегрирование от минус до плюс бесконечности. Производить вычисления часто бывает удобнее именно в такой комплексной форме. Преобразование раскладывает сигнал на гармоники с частотами от одного до N колебаний на области сигнала. Но частота дискретизации составляет N на области сигнала. А по теореме Котельникова (aka теорема Найквиста — Шеннона) частота дискретизации должна по крайней мере в два раза превышать частоту сигнала. Если это не так, то получается эффект появления сигнала с ложной частотой:Пунктирной линий показан неверно восстановленный сигнал. С таким явлением вы часто сталкивались в жизни. Например, забавное движение колес автомобиля на видео, или муаровый эффект.Это приводит к тому, что вторая половина из N комплексных амплитуд как будто состоит из других частот. Эти ложные гармоники второй половины являются зеркальным отображением первой и не несут дополнительной информации. Таким образом, у нас остается N/2 косинусов и N/2 синусов (образующих ортогональный базис).Ладно, базис есть. Его составляющие — гармоники с целым числом колебаний на области сигнала, а значит, крайние значения гармоник равны. Точнее почти равны, так как последнее значение берется не совсем с края. Более того — каждая гармоника почти зеркально симметрична относительно своего центра. Все эти явления особенно сильны на низких частотах, которые нам и важны при кодировании. Это плохо еще и тем, что на сжатом изображении будут заметны границы блоков. Проиллюстрирую DFT-базис с N=8. Первые 2 ряда — косинусные составляющие, последние — синусные:Обратите внимание на появление дублей составляющих при повышении частоты. Можете мысленно подумать, как мог бы быть разложен сигнал, значения которого плавно уменьшаются с максимального значения в начале до минимального в конце. Более-менее адекватное приближение смогли бы сделать лишь гармоники ближе к концу, что для нас не очень здорово. На рисунке слева приближение несимметричного сигнала. Справа — симметричного:С первым дела крайне плохи. Так может быть сделать как в DCT — уменьшить частоты в 2 или другое количество раз, чтобы количество некоторых колебаний было дробным и границы находились в разных фазах? Тогда составляющие будут неортогональны. И ничего тут не поделать.DSTЧто если вместо косинусов в DCT использовать синусы? Мы получим Discrete Sine Transform (DST). Но для нашей задачи все они неинтересны, так как и целые и половинки периодов синусов близки к нулю на границах. То есть мы получим примерно такое же неподходящее разложение, как и у DFT.Возвращаясь к DCTКак у него дела на границах? Хорошо. Есть противофазы и нет нулей.Все остальноеНе-Фурье преобразования. Не буду описывать.WHT — матрица состоит только из ступенчатых составляющих со значениями -1 и 1.Haar — по совместительству ортогональное вейвлет-преобразование.Они уступают DCT, но легче для вычислений.Итак, вас посетила мысль придумать свое преобразование. Помните вот что:Базис должен быть ортогонален.С фиксированным базисом вы не сможете превзойти KLT по качеству сжатия. Между тем, на реальных фотографиях DCT почти не уступает.На примере DFT и DST нужно помнить про границы.И помнить, что у DCT есть еще хорошее преимущество — вблизи границ составляющих их производные равны нулю, а значит, переход между соседними блоками будет довольно плавным.У преобразований Фурье существуют быстрые алгоритмы со сложностью O(N*logN), в отличие от вычисления в лоб: O(N2).Будет непросто, правда? Впрочем, для некоторых типов изображений можно подобрать лучший базис, чем у DCT.Этот раздел получился похожим на рекламу дискретного косинусного преобразования. Но оно действительно классное!Двумерные преобразованияСейчас попробуем провести такой эксперимент. Возьмем, для примера, кусочек изображения.Его 3D график:Пройдемся DCT(N=32) по каждой строке:Теперь я хочу, чтобы вы пробежались глазами по каждому столбцу полученных коэффициентов, т. е. сверху вниз. Вспомните, что наша цель — оставить как можно меньше значений, убрав малозначащие. Наверняка вы догадались, что значения каждого столбца полученных коэффициентов можно разложить точно так же, как и значения исходного изображения. Никто не ограничивает нас в выборе ортогональной матрицы преобразования, но мы сделаем это опять с помощью DCT(N=8):Коэффициент (0,0) получился слишком большим, поэтому на графике он уменьшен в 4 раза.Итак, что получилось?Левый верхний угол — самые значащие коэффициенты разложения самых значащих коэффициентов.Левый нижний угол — самые незначащие коэффициенты разложения самых значащих коэффициентов.Правый верхний угол — самые значащие коэффициенты разложения самых незначащих коэффициентов.Правый нижний угол — самые незначащие коэффициенты разложения самых незначащих коэффициентов.Понятно, что значимость коэффициентов уменьшается, если двигаться по диагонали из левого верхнего угла в правый нижний. А какой важнее: (0, 7) или (7, 0)? Что они вообще означают?Сначала по строкам: A0 = (EXT)T = XET (транспонировали, так как формула A=EX для столбцов), затем по столбцам: A=EA0 = EXET. Если аккуратно посчитать, то получится формула:Таким образом, если вектор раскладывается на синусоиды, то матрица на функции вида cos(ax)*cos(by). Каждый блок 8x8 в JPEG представляется в виде суммы 64-х функций вида:В Википедии и других источниках такие функции представлены в более удобной форме:Поэтому коэффициенты (0, 7) или (7, 0) одинаково полезны.Впрочем, фактически это обычное одномерное разложение на 64 64-мерных базиса. Все вышесказанное применимо не только к DCT, но и к любому ортогональному разложению. Действуя по аналогии, в общем случае получаем N-мерное ортогональное преобразование.А вот уже 2-мерное преобразование енота (DCT 256x256). Опять же с обнуленными значениями. Числа — количество необнуленных коэффициентов из всех (оставлялись самые значимые значения, находящиеся в треугольной области в левом верхнем углу).Запомните, что коэффициент (0, 0) называется DC, остальные 63 — AC. Выбор размера блокаТоварищ спрашивает: почему в JPEG используется разбиение именно 8x8. Из заплюсованного ответа:The DCT treats the block as if it were periodic and has to reconstruct the resulting jump at the boundaries. If you take 64x64 blocks, you'll most likely have a huge jump at the boundaries, and you'll need lots of high-frequency components to reconstruct that to a satisfactory precisionМол, DCT работает хорошо только на периодических функциях, и если вы возьмете большой размер, то, скорее всего, получите гигантский скачок на границах блока и понадобится много высокочастотных компонентов для его покрытия. Это неверно! Такое объяснение очень похоже на DFT, но не на DCT, так как оно отлично покрывает такие скачки уже первыми составляющими.На той же странице приводится ответ из MPEG FAQ, с основными аргументами против больших блоков:Мало прибыли при разбиении на большие блоки.Увеличение вычислительной сложности.Высокая вероятность большого количества резких границ в одном блоке, что вызовет эффект Гиббса.Предлагаю самостоятельно исследовать это. Начнем с первого.По горизонтальной оси — доля первых необнуленных коэффициентов. По вертикальной — среднеквадратичное отклонение пикселей от оригинала. Максимальное возможное отклонение взято за единицу. Разумеется, для вердикта явно недостаточно одной картинки. К тому же, я действую не совсем правильно, просто обнуляя. В реальном JPEG, в зависимости от матрицы квантования, обнуляются только маленькие значения высокочастотных компонентов. Поэтому, следующие эксперименты и выводы предназначены для поверхностного выявления принципов и закономерностей.Можно сравнить разбиение на разные блоки с оставленными 25-ю процентами коэффициентов (слева направо, затем справа налево):Большие блоки не показаны, так как визуально почти неотличимы от 32x32. Теперь посмотрим на абсолютную разность с исходным изображением (усиленную в 2 раза, иначе ничего толком не видно):8x8 дает лучший результат, чем 4x4. Дальнейшее увеличение размера уже не дает хорошо заметного преимущества. Хотя я всерьез бы задумался над 16x16, вместо 8x8: увеличение сложности на 33% (о сложности в следующем абзаце), дает небольшое, но все-таки видимое улучшение при одинаковом количестве коэффициентов. Однако, выбор 8x8 выглядит достаточно обоснованным и, возможно, является золотой серединой. JPEG был опубликован в 1991. Думаю, что такое сжатие являлось очень сложным для процессоров того времени.Второй аргумент. Нужно помнить, что при увеличении размера блока потребуется больше вычислений. Давайте оценим насколько. Сложность преобразования в лоб, как мы уже вполне умеем: O(N2), так как каждый коэффициент состоит из N слагаемых. Но на практике используется эффективный алгоритм быстрого преобразования Фурье (БПФ, Fast Fourier Transform, FFT). Его описание выходит за рамки статьи. Его сложность: O(N*logN). Для двумерного разложения нужно воспользоваться им дважды по N раз. Таким образом, сложность 2D DCT — O(N2logN). Теперь сравним сложности вычисления изображения одним блоком и несколькими маленькими:Одним блоком (kN)x(kN): O((kN)2log(kN)) = O(k2N2log(kN))k*k блоками N*N: O(k2N2logN)Это значит, что, например, вычисление при разбиении на 64x64 в два раза сложнее, чем на 8x8.Третий аргумент. Если у нас на изображении есть резкая граница цветов, то это скажется на всем блоке. Возможно, лучше этот блок будет достаточно мал, ведь во многих соседних блоках, такой границы, вероятно, уже не будет. Однако, вдали от границ затухание происходит достаточно быстро. К тому же сама граница будет выглядеть лучше. Проверим на примере с большим количеством контрастных переходов, опять же, только с четвертью коэффициентов:Хотя искажения блоков 16x16 простираются дальше, чем у 8x8, но надпись более плавная. Поэтому меня убедили только первые два аргумента. Но мне что-то больше нравится разделение на 16x16.КвантованиеНа данном этапе мы имеем кучу матриц 8x8 с коэффициентами косинусного преобразования. Пришло время избавляться от малозначащих коэффициентов. Существует более элегантное решение, чем просто обнулять последние коэффициенты, как мы делали выше. Нас не устраивает этот способ, так как необнуленные значения хранятся с избыточной точностью, а среди тех, кому не повезло, могли оказаться достаточно важные. Выход — нужно использовать матрицу квантования. Потери происходят именно на этом этапе. Каждый Фурье-коэффициент делится на соответствующее число в матрице квантования. Рассмотрим на примере. Возьмем первый блок от нашего енота и произведем квантование. В спецификации JPEG приводится стандартная матрица:Стандартная матрица соответствует 50% качеству в FastStone и IrfanView. Такая таблица была выбрана с точки зрения баланса качества и степени сжатия. Думаю, что значение для DC-коэффициента больше соседних из-за того, что DCT ненормализовано и первое значение получается больше, чем следовало бы. Высокочастотные коэффициенты огрубляются сильнее из-за их меньшей важности. Думаю, сейчас такие матрицы используются редко, так как ухудшение качества хорошо заметно. Никто не запрещает использовать свою таблицу (со значениями от 1 до 255)При декодировании происходит обратный процесс — квантованные коэффициенты почленно умножаются на значения матрицы квантования. Но так как мы округляли значения, то не сможем точно восстановить исходные коэффициенты Фурье. Чем больше число квантования, тем больше погрешность. Таким образом, восстановленный коэффициент является лишь ближайшим кратным. Еще пример:И на десерт, рассмотрим качество 5% (при кодировании в Fast Stone).При восстановлении этого блока мы получим только усредненное значение плюс вертикальный градиент (из-за сохранившегося значения -1). Зато для него хранится всего два значения: 7 и -1. C другими блоками ситуация не лучше, вот восстановленная картинка:Кстати, насчет 100% качества. Как вы догадываетесь, в этом случае матрица квантования состоит полностью из единиц, то есть квантования не происходит. Однако, из-за округления коэффициентов до целого, мы не можем в точности восстановить исходную картинку. Например, енот сохранил 96% пикселей точно, а 4% отличались на 1/256. Разумеется, такие «искажения» невозможно заметить визуально. А здесь можете посмотреть матрицы квантования различных фотоаппаратов. КодированиеПеред тем как двигаться дальше, нам нужно на более простых примерах понять, как можно сжать полученные значения.Пример 0 (для разминки)Представьте такую ситуацию, что ваш знакомый забыл у вас дома листочек со списком и теперь просит продиктовать его по телефону (других способов связи нет). Список:d9rg3wfr43gtwfr43gtd9rg3d9rg3d9rg3wfr43gtd9rg3Как бы вы облегчили свою задачу? Особого желания мучительно диктовать все эти слова у вас нет. Но их всего два и они повторяются. Поэтому вы просто как-нибудь диктуете первые два слова и договариваетесь, что далее «d9rg3» будете называть первым словом, а «wfr43gt» — вторым. Тогда достаточно будет продиктовать: 1, 2, 2, 1, 1, 1, 2, 1.Подобные слова мы будем обозначать как A, B, C..., и называть их символами. Причем под символом может скрываться что угодно: буква алфавита, слово или бегемот в зоопарке. Главное, что одинаковым символам соответствуют одинаковые понятия, а разным — разные. Так как наша задача — эффективное кодирование (сжатие), то будем работать с битами, так как это наименьшие единицы представления информации. Поэтому, запишем список как ABBAAABA. Вместо «первое слово» и «второе слово» можно использовать биты 0 и 1. Тогда ABBAAABA закодируется как 01100010 (8 бит = 1 байт).Пример 1Закодировать ABC.3-м разным символам (A, B, C) никак нельзя сопоставить 2 возможных значений бита (0 и 1). А раз так, то можно использовать по 2 бита на символ. Например:A: 00B: 01C: 10Последовательность битов, сопоставленная символу, будем называть кодом. ABC будет кодироваться так: 000110. Пример 2Закодировать AAAAAABC.Использовать по 2 бита на символ A кажется немного расточительным. Что, если попробовать так:A: 0B: 1C: 00Закодированная последовательность: 000000100.Очевидно, этот вариант не подходит, так как непонятно, как декодировать первые два бита этой последовательности: как AA или как C? Использовать какой-нибудь разделитель между кодами очень расточительно, будем думать как по-другому обойти это препятствие. Итак, неудача произошла из-за того, что код C начинается с кода A. Но мы полны решимости кодировать A одним битом, пусть даже B и С будут по два. Исходя из такого пожелания, A дадим код 0. Тогда коды B и C не могут начинаться на 0. Но могут на 1:A: 0B: 10C: 11Последовательность закодируется так: 0000001011. Попробуйте мысленно декодировать ее. Вы сможете сделать это только одним способом.Мы выработали два требования к кодированию:Чем больше вес символа, тем короче должен быть его код. И наоборот.Для однозначного декодирования код символа не может начинаться с кода любого другого символа.Очевидно, порядок символов не важен, нас интересует только частота их встречаемости. Поэтому, с каждым символом сопоставляют некоторое число, называемое весом. Вес символа может являться как относительной величиной, отражающий долю его вхождения, так и абсолютной, равной количеству символов. Главное, чтобы веса были пропорциональны встречаемости символов.Пример 3Рассмотрим общий случай для 4-х символов с любыми весами.A: paB: pbC: pcD: pdБез потери общности, положим pa ≥ pb ≥ pc ≥ pd. Существуют всего два принципиально разных по длинам кодов варианта:Какое из них предпочтительнее? Для этого нужно вычислить получаемые длины закодированных сообщений:W1 = 2*pa + 2*pb + 2*pc + 2*pdW2 = pa + 2*pb + 3*pc + 3*pdЕсли W1 меньше W2 (W1-W2<0), то лучше использовать первый вариант:W1-W2 = pa — (pc+pd) < 0 => pa < pc+pd. Если C и D вместе встречаются чаще других, то их общая вершина получает самый короткий код из одного бита. В противном случае, один бит достается символу A. Значит, объединение символов ведет себя как самостоятельный символ и имеет вес равный сумме входящих символов. Вообще, если p — вес символа представленный долей его вхождения (от 0 до 1), то лучшая длина кода s=-log2p.Рассмотрим это на простом случае (его легко представить в виде дерева). Итак, нужно закодировать 2s символов с равными весами (1/2s). Из-за равенства весов длины кодов будут одинаковыми. Каждому символу потребуется s бит. Значит, если вес символа 1/2s, то его длина s. Если вес заменить заменить на p, то получим длину кода s=-log2p. Значит, если один символ встречается в два раза реже другого, то длина его кода будет на бит длиннее. Впрочем такой вывод легко сделать, если вспомнить, что добавление одного бита позволяет в два раза увеличить количество возможных вариантов.И еще одно наблюдение — два символа с наименьшими весами всегда имеют наибольшие, но равные длины кодов. Более того, их биты, кроме последнего, совпадают. Если бы это было неверно, то, по крайней мере, один код можно было бы укоротить на 1 бит, не нарушая префиксности. Значит, два символа с наименьшими весами в кодовом дереве имеют общего родителя уровнем выше. Вы можете видеть это на примере С и D выше.Пример 4Попробуем решить следующий пример, по выводам, полученным в предыдущем примере. Все символы сортируются в порядке убывания весов.Два последних символа объединяются в группу. Этой группе присваивается вес, равный сумме весов этих элементов. Эта группа участвует в алгоритме наравне с символами и другими группами.Шаги повторяются, пока не останется только одна группа. В каждой группе одному символу (или подгруппе) присваивается бит 0, а другому бит 1.Этот алгоритм называется кодированием Хаффмана.На иллюстрации приведен пример с 5-ю символами (A: 8, B: 6, C: 5, D: 4, E: 3). Справа указан вес символа (или группы).Кодируем коэффициентыВозвращаемся. Сейчас мы имеем много блоков с 64-я коэффициентами в каждом, которые нужно как-то сохранить. Самое простое решение — использовать фиксированное количество бит на коэффициент — очевидно, неудачное. Построим гистограмму всех полученных значений (т.е. зависимость количества коэффициентов от их значения):Обратите внимание — шкала логарифмическая! Сможете объяснить причину появления скопления значений превышающих 200? Это DC-коэффициенты. Так как они сильно отличаются от остальных, то неудивительно, что их кодируют отдельно. Вот только DC:Обратите внимание, что форма графика напоминает форму графиков из самих ранних экспериментов деления на пары и тройки пикселейВообще, значения DC-коэффициентов могут меняться от 0 до 2047 (точнее от -1024 до 1023, так как в JPEG производится вычитание 128 из всех исходных значений, что соответствует вычитанию 1024 из DC) и распределяться довольно равномерно с небольшими пиками. Поэтому кодирование Хаффмана здесь не очень-то поможет. А еще представьте, каким большим будет дерево кодирования! И во время декодирования придется искать в нем значения. Это очень затратно. Думаем дальше.DC-коэффициент — усредненное значение блока 8x8. Представим градиентный переход (пусть не идеальный), который часто встречается в фотографиях. Сами DC значения будут разными, но они будут представлять арифметическую прогрессию. Значит, их разность будет более-менее постоянна. Построим гистограмму разностей:Вот это уже лучше, потому что значения, в целом, сконцентрированы около нуля (но алгоритм Хаффмана опять даст слишком большое дерево). Маленькие значения (по абсолютной величине) встречаются часто, большие редко. А так как маленькие значения занимают мало бит (если убрать ведущие нули), то хорошо выполняется одно из правил сжатия: символам с большими весами присваивать короткие коды (и наоборот). Нас пока ограничивает невыполнение другого правила: невозможность однозначного декодирования. В целом, такая проблема решается следующими способами: заморочиться с кодом-разделителем, указывать длину кода, использовать префиксные коды (они вам уже известны — это случай, когда ни один код не начинается с другого). Пойдем по простому второму варианту, т. е. каждый коэффициент (точнее, разница соседних) будет записываться так: (длина)(значение), по такой табличке:То есть положительные значения прямо кодируются их двоичным представлением, а отрицательные — так же, но с заменой ведущей 1 на 0. Осталось решить, как кодировать длины. Так как их 12 возможных значений, то можно использовать 4 бита для хранения длины. Но вот тут-то как раз лучше использовать кодирование Хаффмана.Значений с длинами 4 и 6 больше всего, поэтому им достались самые короткие коды (00 и 01). Особенности реализации в JPEG:Может возникнуть вопрос: почему на примере у значения 9 код 1111110, а не 1111111? Ведь можно смело поднять «9» на уровень выше, рядом с «0»? Дело в том, что в JPEG нельзя использовать код, состоящий только из единиц — такой код зарезервирован.Есть еще одна особенность. Коды, полученные описанным алгоритмом Хаффмана могут не совпасть по битам с кодами в JPEG, хотя их длины будут одинаковыми. Используя алгоритм Хаффмана, получают длины кодов, а сами коды генерируются (алгоритм прост — начинают с коротких кодов и добавляют их по очереди в дерево как можно левее, сохраняя свойство префиксности). Например, для дерева выше хранится список: 0,2,3,1,1,1,1,1. И, разумеется, хранится список значений: 4,6,3,5,7,2,8,1,0,9. При декодировании коды генерируются таким же способом.Теперь порядок. Мы разобрались как хранятся DC:[код Хаффмана для длины DCdiff(в битах)][DCdiff]где DCdiff = DCтекущее — DCпредыдущееСмотрим AC:Так как график очень похож на график для разностей DC, то принцип тот же: [код Хаффмана для длины AC (в битах)][AC]. Но не совсем! Так как на графике шкала логарифмическая, то не сразу заметно, что нулевых значений примерно в 10 раз больше, чем значения 2 — следующего по частоте. Это понятно — не все пережили квантование. Вернемся к матрице значений, полученной на этапе квантования (используя матрицу квантования FastStone, 90%).Так как встречается много групп подряд идущих нулей, то появляется идея — записывать только количество нулей в группе. Такой алгоритм сжатия называется RLE (Run-length encoding, кодирование повторами). Осталось выяснить направление обхода «подряд идущих» — кто за кем? Выписать слева направо и сверху вниз — не очень эффективно, так как ненулевые коэффициенты концентрируются около левого верхнего угла, а чем ближе к правому нижнему — тем больше нулей.Поэтому, в JPEG используется порядок, называемый «Zig-zag», он показан на левом рисунке. Такой способ хорошо выделяет группы нулей. На правом рисунке — альтернативный способ обхода, не относящийся к JPEG, зато с любопытным названием (пруф). Он может использоваться в MPEG при сжатии видео с чересстрочной разверткой. Выбор алгоритма обхода не влияет на качество изображения, но может увеличить количество кодируемых групп нулей, что в итоге может отразиться на размере файла.Модифицируем нашу запись. Для каждого ненулевого AC — коэффициента:[Количество нулей перед AC][код Хаффмана для длины AC (в битах)][AC]Думаю, что вы сразу скажете — количество нулей тоже отлично закодируется Хаффманом! Это очень близкий и неплохой ответ. Но можно немного оптимизировать. Представьте, что имеем некоторый коэффициент AC, перед которым было 7 нулей (разумеется, если выписывать в зигзагообразном порядке). Эти нули — дух значений, которые не выдержали квантования. Скорее всего, наш коэффициент тоже сильно потрепало и он стал маленьким, а, значит, его длина — короткой. Значит, количество нулей перед AC и длина AC — зависимые величины. Поэтому записывают так:[код Хаффмана для (Количество нулей перед AC, длина AC (в битах)][AC]Алгоритм кодирования остается тем же: те пары (количество нулей перед AC, длина AC), которые встречаются часто, получат короткие коды и наоборот.Строим гистограмму зависимости количества по этим парам и дерево Хаффмана.Длинный «горный хребет» подтверждает наше предположение.Особенности реализации в JPEG:Такая пара занимает 1 байт: 4 бита на количество нулей и 4 бита на длину AC. 4 бита — это значения от 0 до 15. Для длины AC хватит с избытком, но ведь нулей может быть больше 15? Тогда используется больше пар. Например, для 20 нулей: (15, 0)(5, AC). То есть, 16-й ноль кодируется как ненулевой коэффициент. Так как ближе к концу блока всегда полно нулей, то после последнего ненулевого коэффициента используется пара (0,0). Если она встретится при декодировании, значит оставшиеся значения равны 0.Выяснили, что каждый блок закодирован хранится в файле так:[код Хаффмана для длины DCdiff][DCdiff][код Хаффмана для (количество нулей перед AC1, длина AC1][AC1]…[код Хаффмана для (количество нулей перед ACn, длина ACn][ACn]Где ACi — ненулевые AC коэффициенты.Цветное изображениеСпособ представления цветного изображения зависит от выбранной цветовой модели. Простое решение — использовать RGB и кодировать каждый цветовой канал изображения по отдельности. Тогда кодирование не будет отличаться от кодирования серого изображения, только работы в 3 раза больше. Но сжатие изображения можно увеличить, если вспомнить, что глаз более чувствительнее к изменению яркости, чем цвета. Это значит, что цвет можно хранить с бОльшими потерями, чем яркость. У RGB нет отдельного канала яркости. Она зависит от суммы значений каждого канала. Поэтому, RGB-куб (это представление всех возможных значений) просто «ставят» на диагональ — чем выше, тем ярче. Но на этом не ограничиваются — куб немного поджимают с боков, и получается скорее параллелепипед, но это лишь для учета особенностей глаза. Например, он более восприимчив к зеленому, чем синему. Так появилась модель YCbCr.(Изображение с Intel.com)Y — компонента яркости, Cb и Cr являются синей и красной цветоразностными компонентами. Поэтому, если хотят сильнее сжать изображение, то RGB переводят в YCbCr, и каналы Cb и Cr прореживают. То есть разбивают на небольшие блоки, например 2x2, 4x2, 1x2, и усредняют все значения одного блока. Или, другими словами, уменьшают размер изображения для этого канала в 2 или 4 раза по вертикали и/или горизонтали. Каждый блок 8x8 кодируется (DCT + Хаффман), и закодированные последовательности записываются в таком порядке:Любопытно, что спецификация JPEG не ограничивает в выборе модели, то есть реализация кодировщика может как угодно разделить изображение по цветовым компонентам (каналам) и каждый будет сохранен по отдельности. Мне известно об использовании Grayscale (1 канал), YCbCr (3), RGB (3), YCbCrK (4), CMYK (4). Первые три поддерживаются почти всеми, а вот с последними 4-канальными бывают проблемы. FastStone, GIMP поддерживают их корректно, а штатные программы Windows, paint.net корректно извлекают всю информацию, но потом выбрасывают 4 черный канал, поэтому(Antelle сказал, что не выбрасывают, читайте его комментарии) показывают более светлое изображение. Слева — классический YCbCr JPEG, справа CMYK JPEG:Если они различаются по цветам, или видна только одна картинка, то, скорее всего, у вас IE (любой версии) (UPD. в комментариях говорят «или Safari»). Можете попробовать открыть статью в разных браузерах.И еще кое-чтоВ двух словах о дополнительных возможностях.Progressive modeРазложим полученные таблицы коэффициентов DCT на сумму таблиц (примерно так (DC, -19, -22, 2, 1) = (DC, 0, 0, 0, 0) + (0, -20, -20, 0, 0) + (0, 1, -2, 2, 1)). Сначала закодируем все первые слагаемые (как мы уже научились: Хаффман и обход зигзагом), затем вторые и т. д. Такой трюк полезен при медленном интернете, так как сперва загружаются только DC коэффициенты, по которым строится грубая картинка c «пикселями» 8x8. Затем округленные AC коэффициенты, позволяющие уточнить рисунок. Затем грубые поправки к ним, затем более точные. Ну и так далее. Коэффициенты округляются, так как на ранних этапах загрузки точность не столь важна, зато округление положительно сказывается на длине кодов, так как для каждого этапа используется своя таблица Хаффмана.Lossless modeСжатие без потерь. DCT нет. Используется предсказание 4-й точки по трем соседним. Ошибки предсказания кодируются Хаффманом. По-моему, используется чуть чаще, чем никогда.Hierarhical modeПо изображению создается несколько слоев с разными разрешениями. Первый грубый слой кодируется как обычно, а затем только разница (уточнение изображения) между слоями (прикидывается вейвлетом Хаара). Для кодирования используется DCT или Lossless. По-моему, используется чуть реже, чем никогда.Арифметическое кодированиеАлгоритм Хаффмана создает оптимальные коды по весу символов, но это верно только для фиксированного соответствия символов с кодами. Арифметическое не имеет такой жесткой привязки, что позволяет использовать коды как бы с дробным числом бит. Утверждается, что оно уменьшает размер файла в среднем на 10% по сравнению с Хаффманом. Не распространено из-за проблем с патентом, поддерживается не всеми.Я надеюсь, что теперь вам понятен алгоритм JPEG интуитивно. Спасибо за прочтение!UPDvanwin предложил указать использованное ПО. С удовольствием сообщаю, что все доступны и бесплатны:Python + NumPy + Matplotlib + PIL(Pillow). Основной инструмент. Нашелся по выдаче «Matlab free alternative». Рекомендую! Даже если вам не знаком Python, то уже через пару часов научитесь производить расчеты и строить красивые графики.JpegSnoop. Показывает подробную информацию о jpeg-файле.yEd. Редактор графов. Inkscape. Делал в нем иллюстрации, такие как пример алгоритма Хаффмана. Прочитал несколько уроков, оказалось очень здорово.Daum Equation Editor. Искал визуальный редактор формул, так как с Latex-ом не очень дружу. Daum Equation — плагин к Хрому, мне показался очень удобен. Помимо мышкотыкания, можно редактировать Latex.FastStone. Думаю, его представлять не надо.PicPick. Бесплатная альтернатива SnagIt. Сидит в трее, скриншотит что скажут куда скажут. Плюс всякие плюшки, типа линейки, пипетки, угломера и пр."
    },
    "doc_32": {
        "url": "https://habr.com/ru/post/526474/",
        "title": "Теперь я не могу сделать даже маленький сайт",
        "text": "Короче, я хорошо помню, как в 2013 году я сел и написал небольшой сайт за один день.Это был сайт про события моего родного города. На одной странице выводились все мероприятия на грядущую неделю. Я сделал страничку с мероприятиями, и небольшую админку, где они редактировались. У меня была книжка по PHP, поэтому сайт я написал на PHP, подключил MySQL-базу, сверстал на HTML и CSS, и залил на виртуальный хостинг. Сайтом пользовались, а я усердно добавлял мероприятия каждое утро, пока не ушёл в армию, не оставив никого на поддержку. Так сайт и почил.Идея сайта всё ещё казалась хорошей, и я решил его возродить. Казалось бы, бери и делай, но против меня играло то, что я толком не помнил PHP, и уже успел набраться опыта разработки в очень больших, средних и маленьких компаниях.Я решил взяться за дело и стал думать.Хм, не могу же я просто взять PHP и написать на нем несколько страничек вперемешку с HTML. Как я буду это поддерживать без ООП и вообще нормального разделения кода? К тому же, все говорят, что PHP уже не очень, да и сколько новых версий вышло!Наверно, мне нужно взять что-то более современное, Node.js или Python. Но я, конечно, не буду просто писать на них потому, это не Best Practices. Пожалуй, возьму какой-нибудь фреймворк, например, Django или Express.js. Впрочем, это самые популярные фреймворки, а есть другие, посовременнее, надо поискать.Определившись, что я буду использовать или Python, или Node.js, я понял, что просто так отдавать целые странички с сервера нехорошо. Как мне в таком случае сделать всплывающие окна авторизации или динамическую подгрузку? Ну уж не с jQuery, упаси боже! Пожалуй, возьму React или Vue.js, чтобы написать правильный, разбитый на компоненты, интерфейс. Angular будет уже перебором, конечно. Используя фреймворк, мне нужно подключаться к бекэнду по API, поэтому использую Django REST Framework или вроде этого. Хорошо, что Express.js умеет так сам по себе, пожалуй, стоит выбрать Node.js в итоге. На фронтенде мне стоит подключить Axios, хотя теперь есть Fetch, но поддерживается ли он всеми браузерами? А может быть мне вообще использовать Svelte, чтобы заодно научиться чему-то новому?!Теперь стоит правильно настроить IDE, для того, чтобы соблюдать Code Styles, правильные отступы, и никогда не забывать писать тройное равно вместо двойного. Настройка получается с трудом потому, что плагины IDE спорят друг с другом и упорно делают отступ из четырёх пробелов, а не из двух.Разобравшись, я понимаю, что мой код нужно где-то хранить. Так как я уже порядком устал, выберу популярнейший GitHub. Настроив Git и авторизацию через ssh на моем компьютере, я понимаю, что я не знаю, какую систему ветвления использовать. GitFlow слишком избыточна, пока я один, но не коммитить же все в мастер-ветку? Мало ли к проекту кто-то присоединится, или, если я покажу репозиторий на собеседовании, все будут смеяться. Остаётся и непраздный вопрос, что писать в описаниях коммитов и на каком языке, но оставим это на потом.Стоит подумать, как это все дело развернуть на хостинге. Если бек на Python, то нужно создать виртуальное окружение и работать в нем. Почему-то на сервере сходу это не получается, что-то вечно падает. Кстати, нужно запускать приложение как сервис, чтобы всё перезапускалось после падения! Всё, теперь точно берём Ноду! Для бека на Node.js же нужно найти такой хостинг, где Node.js работает, а они все облачные и очень современные. Там нужно настроить развертывание проекта из репозитория на GitHub, но я не могу просто подключить мастер-ветку, потому, что тогда все мои изменения будут сразу же попадать на сервер, а это не очень хорошо. Конечно, можно разворачивать вручную, но это тоже как-то несовременно. Пожалуй, снова подумаю о системе ветвления.Ах, еще же БД! Вроде PostreSQL хорошая, и я даже с ней работал, но, может, мне нужна nosql-база? Остается открытым вопрос, как ее развернуть на сервере, и как поддерживать одинаковую структуру на моём компьютере и в облаке без потери данных, но до этого пока далеко.Ах, чуть не забыл. Раз фронтенд на JS-фреймворках, то нужно подумать о Server Side Rendering, важно, чтобы мой проект индексировался. Хм, не нужно ли для этого применить Next.js или Nuxt.js? Надо подумать.Так как я уже стал что-то забывать, то нужно и какой-нибудь таск-трекер прикрутить, чтобы отслеживать задачи и прогресс. Стоит ли мне воспользоваться методологиями Scrum или Kanban? Или пока я один, можно и так? А как же тогда следить за дедлайнами?Ещё я не подумал, конечно, о TS, ES6, SASS, PUG, GraphQL, ООП, функциональном программировании, иммутабельности и обо всём таком. И нужно будет сертификат HTTPS прикрутить обязательно! Может, мне позвать в команду пару друзей, чтобы сделать всё правильно вместе? Тогда без Scrum и Pull Requests не обойтись.На этой ноте я устал окончательно и подумал, что, может, мне стоит откопать старую книжку по PHP, и сделать всё, как в 2013 году, когда я ни о чём выше не имел представления, а половина технологий ещё не появилась? Похоже, я слишком много думаю наперёд. Решу всё это потом, сейчас посмотрю сериал и пойду спать, а завтра точно начну программировать."
    },
    "doc_33": {
        "url": "https://habr.com/ru/post/127197/",
        "title": "Читаем QR код",
        "text": "Иногда возникают такие ситуации, когда нужно прочитать QR код, а смартфона под рукой нет. Что же делать? В голову приходит лишь попробовать прочитать вручную. Если кто-нибудь сталкивался с такими ситуациями или кому просто интересно как же читается QR код машинами, то данная статья поможет вам разобраться в этой проблеме. В статье рассмотрены базовые особенности QR кодов и методика дешифрирования информации без использования вычислительных машин.Иллюстраций: 14, символов: 8 510.Для тех, кто не в курсе что такое QR код, есть неплохая статья в английской Wikipedia. Также можно почитать тематический блог на Хабре и несколько хороших статей по смежной тематике, которые можно найти поиском.Решение задачи непосредственного чтения информации с QR-картинки рассмотрим на примере двух кодов. Информация была закодирована в online-генераторе QR Coder.ru.Чтобы понять, как извлечь данные из кода, нужно разобраться в алгоритме. Существует несколько стандартов в семействе QR кодов, с их базовыми принципами можно ознакомиться в спецификациях. Кратко поясню: данные, которые необходимо закодировать, разбиваются на блоки в зависимости от режима кодирования. К разбитым по блокам данным прибавляется заголовок, указывающий на режим и количество блоков. Существуют и такие режимы, в которых используется более сложная структура размещения информации. Данные режимы рассматривать не будем ввиду того, что извлекать вручную из них информацию нецелесообразно. Однако, основываясь на тех принципах, которые описаны ниже, можно адаптироваться и к этим режимам. На случай некорректного чтения данных, в QR применяются специальные коды, которые способны исправить недочёты при чтении. Это так называемые коды Рида-Соломона. Принцип вычисления кодов, а также исправление ошибок в блоках информации рассматривать не будем, это тема отдельной статьи. Корректирующие ошибки коды Рида-Соломона (RS) записываются после всех информационных данных. Это очень упрощает задачу непосредственного чтения информации: можно просто считать данные, не трогая коды. Как показывает практика, обычно бОльшую часть QR -матрицы занимают корректирующие RS-коды.По стандарту, данные с RS-кодами перед записью в картинку «перемешиваются». Для этих целей используют специальные маски. Существует 8 алгоритмов, среди которых выбирается наилучший. Критерии выбора основаны на системе штрафов, о которых можно также почитать в спецификации. «Перемешанные» данные записываются в особой последовательности на шаблонную картинку, куда добавляется техническая информация для декодирующих устройств. Исходя из описанного алгоритма, можно выделить схему извлечения данных из QR кода:Здесь зелёным фломастером подчёркнуты пункты, которые нужно будет выполнить при непосредственном чтении кода. Остальные пункты можно опустить ввиду того, что считывание производит человек.Шаг 0. QR кодВзглянув на картинки, можно заметить несколько отчётливых областей. Эти области используются для детектирования QR кода. Эти данные не представляют интереса с точки зрения записанной информации, но их нужно вычеркнуть или просто запомнить их расположение, чтобы они не мешали. Всё остальное поле кода несёт уже полезную информацию. Её можно разбить на две части: системная информация и данные. Также существует информация о версии кода. От версии кода зависит максимальный объём данных, которые могут быть записаны в код. При повышении версии – добавляются специальные блоки, например как здесь:По ним можно сориентироваться и понять какая версия QR перед вами. Коды высоких версий обычно также нецелесообразно считывать вручную. Размещение системной информации показано на рисунке:Системная информация дублируется, что позволяет значительно понизить вероятность возникновения ошибок при детектировании кода и считывании. Системная информация – это 15 бит данных, среди которых первые 5 — это полезная информация, а остальные 10 — это BCH(15,5) код, который позволяет исправлять ошибки в системных данных. К классу BCH кодов относят и RS коды. Обратите внимание, что на рисунке две полоски по 15 бит не пересекаются.Шаг 1. Чтение 5 бит системной информацииКак уже говорилось, интерес представляют только первые 5 бит. Из которых 2 бита показывают уровень коррекции ошибок, а остальные 3 бита показывают какая маска из доступных 8 применяется к данным. В рассматриваемых QR кодах системная информация содержит:Шаг 2. Маска для системной информацииКроме уже озвученных схем защиты системной информации, вдобавок, используется статическая маска, которая применяется к любой системной информации. Она имеет вид: 101010000010010. Так как имеет интерес только первые 5 бит, то маску можно сократить и легко запомнить: 10101 (десять — сто один). После применения операции «исключающего или» (xor) получаем информацию.Возможные уровни коррекции ошибок:L01M00Q11H10Возможные маски:000(i + j) mod 2 = 0001i mod 2 = 0010j mod 3 = 0011(i + j) mod 3 = 0100((i div 2) + (j div 3)) mod 2 = 0101(i j) mod 2 + (i j) mod 3 = 0110((i j) mod 2 + (i j) mod 3) mod 2 = 0111((i+j) mod 2 + (i j) mod 3) mod 2 = 0Шаг 3. Чтение заголовка данныхЧтобы понять с какими данными предстоит иметь дело, необходимо изначально прочитать 4-х битный заголовок, который содержит в себе информацию о режиме. Специфика чтения данных изображена на картинке:Список возможных режимов:ECI0111Числовые0001Буквенно-числовые00108-битный (байтный)0100Kanji1000Структурированное дополнение0011FNC10101 (1-я позиция)1001 (2-я позиция)Шаг 4. Применение маски к заголовкуПосле извлечения 4-х бит, описывающих режим, необходимо к ним применить маску. В нашем случае для двух кодов используются разные маски. Маска определяется выражением, приведённым в таблице выше. Если данное выражение сводится к TRUE (верное) для бита с координатами (i,j), то бит инвертируется, иначе всё остаётся без изменений. Начало координат в левом верхнем углу (0,0). Взглянув на выражения, можно заметить в них закономерности. Для рассматриваемых QR кодов, маски будут выглядеть так:Получим режимы:Шаг 5. Чтение данныхПосле получения данных о режиме можно приступать к чтению информации. Надо оговорить, что наиболее интересно считывать числовые и буквенно-числовые данные, так как они легко интерпретируются. Но также не стоит бояться 8-битных. Это может быть также легко интерпретируемая информация. Например, многие онлайн генераторы QR текст кодируют в этом режиме, используя ASCII. Ещё одна причина, почему следует изначально прочитать режим, это то, что от него зависит количество пакетов данных. Которая также зависит и от версии кода. Для версий с первой по девятую длины блоков для более читабельных режимов:Числовые10 бит / 4 битаБуквенно-числовые9 бит8-битный (байтный)8 битПервый блок после указателя режима — это количество символов. Для числового режима количество закодировано в 10 следующих битах, а для 8-битного режима в 8 битах (прошу прощения за тавтологию). На рисунке видно, что в левом QR коде, как и отмечалось, записана цифра 5. Это видно по указателю количества символов и последующим после него 4 битам. В числовом режиме наряду с 10-битными блоками используются 4-х битные блоки для экономии места, если в 10-битном объёме нет необходимости. В правом коде зашифровано 4 символа. На данный момент неизвестно что зашифровано в нём. Поэтому необходимо перейти к чтению следующего столбца для извлечения всех 4-х блоков информации.На рисунке видно, все 4 пакета представляют собой коды ASCII латинских букв, образующие слово «habr»Естественно наилучшим способом остаётся достать телефон из кармана и, наведя камеру на QR-картинку, считать всю информацию. Однако в экстренных случаях может пригодиться и описанная методика. Конечно, в голове не удержишь все указатели режимов и типов масок, а также ASCII символы, но популярные комбинации запомнить (хотя бы те, что рассмотрены в статье) под силу.Спецификация:BS ISO/IEC 18004:2006. Information technology. Automatic identification and data capture techniques. QR Code 2005 bar code symbology specification. London: BSI. 2007. p. 126. ISBN 978-0-580-67368-9.P.S. Соблюдайте правила ресурса и условия Creative Commons Attribution 3.0 Unported (CC BY 3.0)P.P.S. Если ошибся блогом, то подскажите куда — перенесу."
    },
    "doc_34": {
        "url": "https://habr.com/ru/post/172393/",
        "title": "Новый троян с валидной цифровой подписью LLC Mail.Ru маскируется под обновления популярных программ",
        "text": "Тихим субботним вечером моя мама мирно серфила Youtube на предмет ухода за цикламенами и внезапно слева от видео образовался баннер (к сожалению, скриншота не будет, т.к. баннер воспроизвести не удалось), призывающий обновить Skype. После клика на него произошел редирект на _http://easyupdate.ru/skype/, выглядящий примерно так…Моя мама — не очень опытный пользователь и фразы в духе «Ваша версия Skype устарела, его поддержка закончится 04.03.2013, после чего Вы больше не сможете общаться по Skype» её очень пугают, поэтому она нажала «Отмена» и позвонила мне. Поначалу я решил, что речь пойдёт о банальном обновлении Skype и со вздохом подключился по Teamviewer, собираясь просто ткнуть пару кнопок и отключиться. К своему стыду, при всём своём многолетнем опыте я даже умудрился запустить скачавшийся с easyupdate.ru «апдейт», однако, увидев после запуска, что файл подписан почему-то издателем «LLC Mail.Ru», а не Skype, в последний момент запретил выполнение и понял, что вечер будет интересным и длинным. Похвалив маму за бдительность, я приступил к изучению свежей схемы наполнения ботнета.Загадка цифровой подписиИтак, первым делом посмотрим свойства файла:Странно, всего 74 Кб, как-то маловато даже для web-инсталлера. Смотрим цифровую подпись, что это за «LLC Mail.Ru» такое, может кто-то опять протащил через Thawte схожее название юрлица?Странно, сертификат цифровой подписи очень похож на настоящий от Mail.Ru:У них одинаковый срок действия, с 09.12.2011 по 07.02.2014, однако в цифровой подписи Агента Mail.ru есть подписи других сторон: Symantec Time Stamping Services Signer. Все exe файлы подписываются на лету перед отдачей на загрузку браузеру, об этом говорит динамически изменяющееся время подписания файла.Итого, имеем три варианта:1. Это настоящая цифровая подпись Mail.ru, приватный ключ от которой каким-либо образом выкрали и теперь используют для подписания малвари2. Это настоящая цифровая подпись Mail.ru, которую сама Mail.ru почему-либо использует для подписания малвари3. Это поддельная цифровая подпись Mail.ru, которую каким-либо образом сумели скомпрометировать (что маловероятно, ибо RSA 2048 бит)Загуглив easyupdate.ru, и не найдя в выдаче ничего путного, я посмотрел все ссылки по запросу site:easyupdate.ru и обнаружил, что, помимо скайпа, лендинги имеются для всех популярных браузеров:Их очень роднит милое всплывающее javascript подтверждение, которое начинает скачивать exe файл, даже не удосужившись проверить, какую кнопку нажал пользователь, OK или Отмена.VirustotalТаким образом, мы получили 5 образцов (ссылки ведут на результаты сканирования файлов Virustotal): chromesetup.exe, firefox-setup.exe, ie-setup-full.exe, opera_int_setup.exe и skypesetup.exeopera_int_setup.exe и ie-setup-full.exe ещё не были просканированы до меня, то есть распространение заразы было начато совсем недавно, однако на остальные файлы среагировали 8-9 антивирусов из 46. Касперский почему-то единственный, кто классифицировал exe, как «не вирус»: «not-a-virus:HEUR:Downloader.Win32.LMN.a». Возможно на это решение положительно повлияла цифровая подпись, однако это лучше, чем решение встроенного в Windows антивируса от Microsoft, который в образцах не увидел вообще никакой угрозы.Для chromesetup.exe доступны сведения о поведении, видимо предоставленные какой-то из антивирусных компаний, в частности сетевая активность:Итак, у нас есть два странных домена и ссылка на поддомен Mail.ru, посмотрим на них внимательнее:easyupdate.ru зарегистрирован 30 января 2013 года со скрытием информации о владельце (Private person), эта услуга доступна и бесплатна у большинства российских регистраторов доменов. В корне сайта нас встречает 404:404 Not FoundThe resource requested could not be found on this server!Powered By LiteSpeed Web ServerLiteSpeed Technologies is not responsible for administration and contents of this web site!Вторая ссылка, очевидно, использовала уязвимость типа URL redirect на одном из поддоменов Mail.ru, однако, судя по всему, уязвимость уже успели устранить. Возможно злоумышленники решили, что такая ссылка легче пройдёт через firewall.Домен dwnfile.ru зарегистрирован 1 февраля 2013 года со скрытием информации о владельце.В тексте страниц лендинга также присутствуют ссылки на следующие домены:uprgadotesbest.com — зарегистрирован 26 декабря 2012 года через PrivacyProtect.org и на текущий момент имеет статус «Locked»uploadeasy.ru — домен вообще не зарегистрирован, видимо забыли в суете выкатывания «в продакшн», киберсквоттеры, налетай!Все домены регистрировались через Reg.ru.Кроме того, троян отключает в реестре использование прокси, что, очевидно, повлияет на работу IE и Chrome, у Firefox и Opera собственные настройки для прокси.ПартнеркаДалее, ссылка _http://dwnfile.ru/get_xml?file_id=18499626 возвращает нам XML следующего содержания:Любому при взгляде на это нехитрое содержимое, становится очевидно, что мы имеем дело с очередной партнёрской программой по так называемым «инсталлам», параметр guid — это уникальный идентификатор бота в будущем ботнете, а partner в данном контексте — это аффилиат, человек, зарегистрировавшийся в партнерской программе, получивший в её кабинете ссылки на файлы для распространения и распространяющий эти файлы в меру своей испорченности, получая при этом некоторый процент от доходов владельцев партнерской программы и ботнета из ничего не подозревающих пользователей. Погуглив идентификатор profitraf1, выходим на саму партнерскую программу: profitraf.ruРегистрация только по инвайтам, однако первый же попавшийся в гугле инвайт подошёл и я попал внутрь:Нас встречает приятный дизайн, статистика, баланс и даже реферальная система, всё очень канонично. В разделе «Установка кода» написано:Для работы с партнерской программой необходимо поменять ссылки на любой скачиваемый контент (mp3, документ, видео — абсолютно любой файл), расположенный у вас на сайте. Ссылки меняются таким образом, что вместо вашего домена указывают на специальный загрузчик, расположенный на домене profidownload.ru. В этой ссылке специальным образом прописывается исходная ссылка (которая до этого была на сайте). По клику пользователя сначала загружается и запускается загрузчик, который и скачивает на компьютер пользователя исходный файл. Одновременно с загрузкой устанавливается тулбар и браузер. Для пользователя это происходит практически незаметно.Итак, можно подключить свой сайт, поменять там ссылки на указанные и получать прибыль. А вот и ещё одна цитата, на этот раз из огромного, на 215 страниц, топика этой партнерки на крупнейшем форуме вебмастеров в рунете:Мы предлагаем абсолютно прозрачную, «белую» схему заработка — без SMS-подписок, платных архивов и прочих «серых» схем. Мы распространяем браузер и тулбар (надстройку для браузеров) крупнейшей компании РуНета — Mail.Ru. Каждый сайт проходит строгую модерацию и только после проверки нашими специалистами допускается к участию в программе.И вот тут мне, наконец, стало ясно, откуда взялась цифровая подпись Mail.ru на малвари, попавший на компьютер моей мамы. В том, что это именно малварь, сомневаться не приходится, достаточно изучить результаты исследования образцов антивирусными компаниями. И эта зараза может получить очень широкое распространение, учитывая выбранные методы маскировки под обновления самых популярных программ для Windows.Неутешительные итогиХотелось бы отметить, что лично мне очень обидно было обнаружить в финале своего домашнего расследования саму корпорацию Mail.ru, так как изначально этот вариант мне казался самым невероятным. Разумеется, даже если эта история станет достоянием гласности, официально вину спихнут на «недобросовестного» партнёра, но, по моему мнению, компания, которая предоставляет свою цифровую подпись каждому встречному для несанкционированной загрузки на компьютеры ничего не подозревающих пользователей троянского программного обеспечения, достойна звания «ботмастер» года. Куда там доморощенным вирусописателям без сертификатов, такой огромный ботнет, как у Mail.ru, им никогда не нарастить. И кто знает, как вышеозначенная корпорация решит монетизировать своих незадачливых пользователей, когда у неё дела пойдут ещё хуже, чем сейчас.Обновление от 12 мартаНа сегодняшний день ни один домен злоумышленников уже не резолвится. Возможно, это связано с тем, что этот топик даже в песочнице был проиндексирован гуглом и начал показываться в выдаче по запросу «easyupdate.ru».Благодарю Mairon за приглашение."
    },
    "doc_35": {
        "url": "https://habr.com/ru/post/176481/",
        "title": "Уязвимость на Habrahabr или как украсть инвайт",
        "text": "Все началось с попытки получить инвайт на хабр белыми методами, но, увы получилось иначе и инвайт достался совсем нечестным способом, об этой истории я и хотел бы поведать храброчитателям.Заранее прошу прощения у пользователя, которому не повезло, и чей инвайт был использован мною.Я как всегда находился в поисках интересной темы для статьи, на которую обратили бы внимание и прислали приглашение на хабр, и вот меня посетила интересная идея: «А что если найти какую нибудь уязвимость на самом хабре и написать про это статью?»Все, цель была выбрана, и я приступил к поискам узких мест сайта:После долгих попыток я остановился на страничке загрузки приглашения, тут после нескольких экспериментов стало ясно что изображение должно быть в формате PNG (т.к. на другие форматы форма не реагировала), я загрузил первое попавшееся изображение и увидел что в ответ аякс вернул какой-то IDкоторый подставлялся в скрытое поле формы как некий invite_codeДалее поэкспериментировав, я понял, что это некий счетчик загруженных файлов, я предположил: «а что если подставить данный ID в поле, только изменить значение на +2 или +3», получалось что когда я отправлял форму с подставным id, система бы воспринимала как будто я залил приглашение на сайт. И действительно после 10 минут усердного ввода капчи я успел перехватить id файлика приглашения другого человека и естественно раньше него успел ввести капчу и, вуаля!!!, выдало сообщение что настройки сохранены, тут же сразу захожу на свою страничку и вижуМоей радости не было предела, наконец то я полноценный участник сообщества.Я сразу же отписался в суппорт, даже позвонил по номеру телефона в компанию ТМ, в течении получаса со мной по почте связался тех. специалист компании я объяснил подробно данную уязвимость. Спустя час уязвимость была локализована, я получил благодарность от компании в виде инвайта, который собственно и украл.Еще раз прошу прощения у потерпевшего."
    },
    "doc_36": {
        "url": "https://habr.com/ru/post/86394/",
        "title": "Как ловили меня",
        "text": "Навеяно историей «Как я ловил хакера». У меня получилось не так динамично, но я хочу поделиться тем, как делать не надо.Что же, насколько приятно ловить злоумышленников, знает только тот, кто их ловил. Но спросите тех попавшихся, каково им? А я вам расскажу, и поделюсь своими мыслями насчет этого. Если кому-то они покажутся само собой разумеющимися, я буду только рад.Произошло это в 2002 году. Тогда я был еще студентом, учился на втором курсе кораблестроительного факультета.Еще тогда потихоньку начал готовиться к диплому, раньше сядешь — раньше выйдешь. Дипломная работа была из серии «Спроектируй корабль на компьютере». А, т.к., в автокаде такое никогда не сотворишь, использовалось соответствующее обеспечение.У университета тогда была купленная лицензия на профильный программный продукт SeaSolution (в нем строится 3D-модель судового корпуса, возможности мат-ядра там были просто сумасшедшие по тем временам). Программный продукт с помощью файла лицензий был привязан к соответствующим машинам в вычислительом центре, где я и зависал после пар до самого вечера. От себя добавлю, что это действительно было интересно — моделировать корабль со всеми балками-переборками и механизмами, через несколько месяцев модель выросла до 500 Мб, приходилсь бить ее на куски а потом сочленять их обратно.Проект был готов почти полностью, когда случилось страшное.В один прекрасный день, все копии SeaSolution'a в ВЦ сказали%username%, my license is expiredВся работа встала. Потом выяснилось, что великие институтские мужи не придумали ничего лучше, чем прикупить ограниченную по времени лицензию. Покупать полную версию, как я понял позднее, никто не собирался, ровно как и продлять существующую.На проект было убито полгода практически ежедневных занятий. Все встало раком. Напомню, это был только второй курс, можно было начать заново, использовать другое ПО, в общем, вариантов было несколько. Я был в отчаянии.Но был у меня в рукаве один козырь — в то время я уже пару месяцев интересовался crack-сценой. Знаний было минимум, но я решил попробовать ломануть программу. Купить я бы ее все равно не смог — стоимость лицензии в 3 килобакса была несколько выше моей стипендии, «студенческая» версия не подходила — не работал экспорт в IGES, без которого никак. Кряков, естественно, небыло. Поэтому я закачал ее на флешку и унес домой.Пытался вскрыть я ее больше месяца, сказывалось отсутствие необходимых знаний. Парадокс: фактически, успешность мероприятия гарантировала бы мне красный диплом, т.к. тема «автоматизированное проектирование судов» в том контексте, в котором ее реализовывал я, не поднималась доселе никем в моем институте, о чем мне было прямо сказано руководителем. И злополучное ПО с просроченной лицензией, было одним из ее звеньев.Целыми днями пришлось сидеть под SoftIce'ом, копаясь в 5-ти мегабайтном ассемблерном коде. Было исписано много бумаги всякими адресами смещений и прочей HEX-хренью. Друзья, от этого ужасно болит голова, и позже я покинул crack-сообщество — для меня это слишком сложно.Но софт все таки поддался — в код был жестко зашит серийный номер и убрано несколько проверок. Вылезла, правда новая фича — теперь пока не отключишь сетевое подключение, ничего не работало. И еще стала вылетать иногда. Но пациент был скорее жив чем мертв. Я смог продолжить дальнейшую работу.Не долго думая, я просто принес retail version обратно в ВЦ. Во время лабораторных работ отключалась сеть и народ работал в ломанной программе (не один я ей пользовался). Все просто подумали что я ее, типа «починил», вот мол не работала программа, а я починил, ну не молодец ли? Принести это добро обратно в институт было наиглупейшим из решений.НЛО вышло на меня через месяцТогда я вел переписку с суппортом SeaTech (разработчиком этой программы) на предмет лицензий. Они имели представление в каком учебном заведении я учусь. Представители компании активно сотрудничали с университетом, и запросто могли узнать, что какой-то добрый студент притащил ломаную версию ихнего детища. Так и произошло. На электронную почту почти сразу пришло следующее сообщение:Вы уже достаточно засветились в различных интернет тусовках. Вычислить ваше текущее местоположение дело ближайшего времениПерекрестный запрос к Google выдал меня с потрохами.UPD: Запрос теперь выдает с потрохами меня и Хабр.Я не стал отвечать, авось пронесет. Началось томительное ожидание, что же будет дальше. А перспективы были весьма нерадужные — на меня могли завести уголовное дело и отчислить из университета. Что я тогда чувствовал словами не передать. Хуже уже быть не могло.Однако, могло. Меньше чем через неделю, адский суппорт прислал мне еще одно письмо, где без лишних комментариев был просто указан мой домашний адрес с точностью до квартиры. Вот так, клетка захлопнулась, подумал я и перекрестился. Теперь вариантов было не много. Что теперь ждало меня одному богу было известно. Сказать, что было страшно — не сказать ничего.К тому времени наступило лето, сессия благополучно сдалась и появился повод (еще какой) свалить из города на месяц-другой. К тому времени по домашнему адресу начали раздаваться непонятные звонки с просьбой пригласить меня к телефону. Судя по распечаткам, звонки из Нижнего Новгорода, черт побьери. Трубку я не брал.К моему счастью, мне было куда уехать, и 1,5 месяца я отдыхал и горя не знал. Весь этот кошмар стал понемногу забываться. Но стоило мне вернуться как мне сообщили, что неоднократно приходили какие-то люди (двое в штатском), спрашивали меня. На вопрос домашних «а зачем?», отвечали коротко: «Нужно поговорить, он в курсе». Но я не был в курсе. Не похоже на сотрудников органов, еще менее вероятно, что братва заинтересовалась мною.Еще пару недель я не рисковал появляться дома. Время шло, лето подходило к концу, и скрываться вечно было бессмысленно. Все имеет свой конец, подумал я, вернулся домой, и пошел сдаваться, пленных же не расстреливают?Но сначала, предпринял последнюю попытку реабилитироваться. Написал максимально честное письмо в суппорт SeaTech, о том кто я такой и зачем я это сделал, объяснил ситуацию. И произошло чудо. То ли настроение у них было хорошее, то ли попался понимающий суппорт, но мне в ответ пришло письмо с вопросом когда у меня защита диплома. Я ответил, что еще целых 3 года, на что мне прислали файл лицензии на этот период на мой домашний комп. Я же сообщил, что больше так не буду. Вот так вот просто НЛО прилетело и спасло меня. Да да, так бывает, я не думал что такие ситуации просто так разрешаются.Удивительно, но ровно на этом месте история заканчивается. Ни звонков, ни людей больше не было. Предполагаю, что меня просто хотели запугать, а домашний адрес можно было получить в институте. Что это было, до конца непонятно. Начался учебный год, мне никто и слова не сказал о произошедшем. Как будто и не было ничего. А красный диплом я таки получил.Мне повезло, я обделался легким испугом. Сейчас, без улыбки нельзя вспомнить те приключения, но тогда, поверьте, было не до шуток. Несколько правил:Правило 1. Не ломайте.Правило 2. Старайтесь не вести в интернете открытых обсуждений вашей хакерской деятельности. Ведите их от другого ника/е-мейла хотя бы.Правило 3. Если уж ломаете, прячьтесь максимальноПравило 4. Если понятно, что вас вычислили, и есть предпосылки, лучше покайтесь, возможно потом будет уже поздно.UPD: Правило 5. Если что то поломали, никому не говорите (спасибо XaocCPS).Взгляните на список. В самом начале статьи я отметил, что эти вещи могут показаться само собой разумеющимися. Но обратите внимание на Правило 1, когда решите наказать горе-программиста какого-нибудь сайта. Подумайте — возможно, результатом будет судимость и загубленная карьера.Спасибо за внимание. Искренне надеюсь, что кто-то вынесет из моей истории соответствующие выводы.UPD Перенес в «Информационную безопасность»."
    },
    "doc_37": {
        "url": "https://habr.com/ru/post/145890/",
        "title": "Дефейс официального сайта ЕГЭ Санкт-Петербурга",
        "text": "Взломан и дефейснут официальный информационный сайт, где публикуются результаты ЕГЭ в Санкт-Петербурге.UPD 1: Скрин сделан прямо перед публикацией поста. Сейчас сайт отдает либо 500 Error, либо картинку выше, либо неактивное меню.UPD 2: Автор дефейса не я.UPD 3: Сайт работает в штатном режиме.UPD 4: Puzzle сообщает о дефейсе московского сайта для подготовки к ЕГЭ (в знак солидарности, так сказать).UPD 5: 16.06.2012 ~12:00 MSK Представители ресурса проснулись и снизошли до комментария:"
    },
    "doc_38": {
        "url": "https://habr.com/ru/post/126373/",
        "title": "Решение судоку с помощью веб-камеры в реальном времени",
        "text": "ПредисловиеЭто приложение может и не имело практической ценности, но опыта прибавило действительно много. Я бы хотел немного поразмышлять на тему компьютерного зрения. Эта область является одной из самых захватывающих в современных компьютерных вычислениях, и она очень сложна. Что легко и просто для человеческого мозга, то очень сложно для компьютера. Многие вещи до сих пор остаются невозможными с сегодняшним уровнем развития IT.Программа написана с помощью низкоуровневого языка C++, потому что я действительно хотел понять, как же это все работает изнутри. Если вы тоже хотите начать изучение компьютерного зрения, то для этого пригодиться библиотека OpenCV. На CodeProject вы сможете найти несколько уроков по ней. Изображение с веб-камеры получается с помощью исходного кода Вадима Горбатенко (AviCap CodeProject).Изображение ниже объясняет принцип работы программы.Временные интервалы внизу – задержки в миллисекундах на моём 2.8 GHz ПК с разрешением веб-камеры 640x480. Мы наблюдаем интересный результат. Например, самый медленный шаг – это получение кадра с камеры. Он занимает 100 мс, и это означает, что вы будете получать всего 10 кадров в секунду. Это мало. Веб-камеры, как правило, медленные. Вы можете ускорить их, сменив разрешение. Уменьшив его, вы ускорите съёмку, но пожертвуете качеством, и оно может стать абсолютно непригодным для анализа. Другой сюрприз заключается в том, что конвертация изображения в бинарный вид (только белый или чёрный) также занимает много времени, целых 12 мс. С другой стороны, я ожидал, что корректировка OCR и решение самой судоку будет занимать много времени, и был приятно удивлён, когда оказалось, что эти шаги выполняются вместе за 8 мс. Ниже я объясню каждый шаг детально и покажу, что можно улучшить.Как работает конвертация в монохромное изображениеВыбор порогаКаждое приложение с компьютерным зрением начинает с конвертации цветного (или чёрно-белого) изображения в монохромное. В будущем, возможно, будет какой-то алгоритм, который будет использовать цвета, но сегодня приложения компьютерного зрения работают с монохромными изображениями (они дальтоники).Самый простой метод для конвертации изображения – это общий порог. Предположим, что у вас есть пиксель с цветом RGB (200, 200, 200). Так как интенсивность компонент изменяется от 0 до 255, то пиксель очень яркий. Выбрав порог, как половину интенсивности: 256/2=128, мы получим, что наш пиксель должен стать белым. Но общий порог редко используется в настоящих приложениях, так как он малополезен. Куда более полезен алгоритм локального порога.Для правильной конвертации изображения в монохромное, мы будем использовать адаптивный выбор порога. Он не использует фиксированное значение порога в 128. Вместо этого, он считает порог для каждого пикселя отдельно. Он берёт квадрат со стороной в 11 пикселей и с центром в нашем пикселе и суммирует интенсивность всех точек. Среднее значение интенсивности и будет являться порогом для данного пикселя. Формула интенсивности для текущего пикселя: порог=сумма/121, где 121=11х11. Если интенсивность нашего пикселя выше порогового значения, то он конвертируется в белый, если же нет, то в чёрный. На изображении ниже пиксель, для которого определяется порог, отмечен красным. И эти подсчёты производятся для каждого пикселя. Поэтому данный шаг является таким медленным, ведь алгоритм требует ширина*высоты*121 чтений пикселя изображения.Целочисленная формаЭтот шаг может быть оптимизирован с помощью использования «Целочисленной формы». Целочисленная форма – это массив целых чисел с размерами изображения. Смысл гениален и прост. Возьмём изображение. Допустим у нас есть область 12х12, где интенсивность пикселей равна 1 (в реальном мире так не бывает, ведь никогда не бывает так просто), целочисленный образ – это сумма всех пикселей с левого верхнего до текущего (правого нижнего). Следующее изображение демонстрирует, чем может быть полезен целочисленный образ. Целью является посчитать сумму пикселей в сером прямоугольнике. Формула: сумма=D-C-B+A. В нашем случае: 110-44-40+16=42 (попробуйте посчитать вручную).Вместо чтения всех пикселей из серого прямоугольника (который может быть намного больше, чем в примере), нам необходимо всего лишь одно чтение памяти. Это значительная оптимизация алгоритма. Но даже с ней, конвертация изображения в монохромное является очень тяжёлой. Как определить угол поворотаВеб-камера не сканер. И картинка никогда не будет идеально ровно, а значит в порядке вещей немного скошенное и повёрнутое изображение. Чтобы определить угол поворота, мы будем пользоваться фактом, что изображение с судоку всегда имеет горизонтальные и вертикальные линии. Мы будем определять самые выразительные и жирные линии рядом с центром изображения. Самые выразительные линии не подвержены зашумлению. Алгоритм нахождения монохромных линий на изображении называется преобразованием Хафа. Как это работает? Вы должны вспомнить школьную формулу y=(x*cos(theta)+rho)/sin(theta).Где theta –угол линии, а rho является расстоянием от линии до центра координат (0, 0).Важным является то, что линия может быть описана всего двумя переменными: углом наклона и расстоянием до центра координат. Алгоритм проходит по всем пикселям в монохромном изображении, пропуская белые пиксели. Когда он попал на чёрный пиксель, то пытается «нарисовать» всевозможные линии, проходящие через этот пиксель с шагом в 1 градус. Это означает, что каждый пиксель имеет 180 воображаемых линий, проходящих через него. Почему не 360? Да потому что углы 180-360 являются копиями линий с углами 0-180 градусов.Это множество воображаемых линий называется накопителем, двумерным массивом с размерностями theta и rho, которые были в формуле выше. Каждая воображаемая линия представлена одним значением в накопителе. Кстати, метод называется преобразованием, потому что он преобразовывает линии из (x, y) в массив (theta, tho). Каждая воображаемая линия добавляет значение в накопитель, повышая вероятность того, что воображаемая линия совпадает с реальной. Это как голосование. Настоящие линии имеют больше всего «голосов».После того, как все пиксели и их 180 воображаемых линий «проголосовали», мы должны найти максимальное значение в накопителе. (Кстати, накопителем он называется потому что накапливает голоса) Победителем голосования является самая выразительная линия. Её параметра theta и rho могут использоваться с помощью формулы выше чтобы нарисовать её.На следующем изображении приведён небольшой пример. Слева мы имеем линию, состоящую из трёх пикселей. Вы точно знаете, что это диагональная линия слева направо, но для компьютера это не так очевидно.Посмотрев на это изображение, можно понять, как же работает обнаружение линий. Алгоритм преобразования Хафа пропускает белые пиксели. На каждом чёрном пикселе он рисует четыре воображаемых зелёных линии (на самом деле их 180, но для простоты мы возьмём четыре), проходящие через текущий пиксель. Первый пиксель голосует за линии A, B, C и D. Второй пиксель голосует за линии E, B, G, H. Третий за I, B, K, L. За линию B проголосовали все три пикселя, а остальные линии получили всего по одному голосу. Таким образом, линия B победила в голосовании.Следующее изображение является более сложным примером. Слева мы видим сетку судоку, а справа массив накопителя после прохождения по изображению алгоритма преобразования Хафа. Яркие светлые области являются линиями, которые получили много голосов. Темнота означает, что у нас нет шанса найти линию с такими параметрами на изображении. Сконцентрируемся только на ярких точках. Каждая линия (A-U) имеет яркую точку в накопителе. Вы можете видеть, что все линии слегка повёрнуты (примерно на 6 градусов). Линия A меньше повёрнута, чем линия К. Потому что изображение не только повёрнуто, но и скошено. Также, если вы посмотрите внимательнее, то увидите, что линии А и В ближе друг к другу, чем В и С. Это можно заметить на обоих изображениях.Преобразование Хафа важно понять, если вы хотите заниматься распознаванием образов. Концепция виртуальных линий, которые могут быть реальными с помощью голосования, может быть распространена на любую геометрическую фигуру. Линия – простейшая из них, поэтому является самой простой для понимания.Если вам надо найти окружность, то понадобится накопитель с тремя размерностями: x, y и r. Где x и y являются координатами центра нашей окружности, а r радиусом.Преобразование Хафа может быть оптимизировано ограничением области и возможных углов исходного изображения. Нам не надо анализировать все линии, только те, что близки к центру. В нашем случае, именно от них мы и можем отталкиваться.Как определить сеткуДля получения чисел из сетки судоку, нам надо определить, а где же наша сетка начинается и кончается. Эта часть является простейшей частью для человеческого мозга, но самой сложной для компьютера. Почему? Почему бы не использовать линии, найденные с помощью преобразования Хафа в предыдущем шаге? В них слишком много лишних данных. Очень часто газеты и журналы печатают несколько судоку рядом (хм, они явно не рассчитывают на компьютерное распознавание последних). На изображении будет слишком много лишних линий. Например, посмотрите на изображение ниже:Компьютеру очень сложно определить, какие линии относятся к необходимым нам, а какие являются всего лишь информационным шумом. Где конец нашей сетки и начало следующей.Чтобы решить эту проблему, мы не будем определять чёрные линии. Вместо этого, мы будем определять белые области вокруг сетки. На следующем изображении, вы можете увидеть это. Зелёная линия 1 никогда не пересекается с чёрными пикселями в то время, как линия 2 делает это 10 раз. Это означает, что за сеткой скорее находится линия 1, нежели линия 2. Просто подсчитав, сколько раз зелёная линия пересекает чёрные пиксели, мы можем сделать вывод, что она находится за границей сетки. Достаточно просто подсчитать как много переходов с белого на чёрный пиксель под линией. Кстати, вам не надо пробегаться по каждой линии, достаточно выполнять эти действия каждую третью линию для увеличения скорости выполнения.После того, как мы определили границы, запустим алгоритм преобразования Хафа чтобы точно определить линии сетки. До сих пор мы не заботились о перекосах и других дефектах изображения. Только об угле поворота. Этот шаг исправит это. Путём запуска преобразования Хафа, мы получим точные положения линий сетки. Это поможет определить числа в сетке.TODO: Этот шаг может быть более устойчивым к шуму. В следующей версии я планирую комбинировать текущий метод с Хаара-подобными алгоритмами для определения углов сетки. Я надеюсь, это увеличит качество. Проблема может быть в том, что метод с Хаара-подобными алгоритмами хорошо работает со сплошными областями, а не с линиями. Линии занимают маленькую площадь, поэтому разница между светлым и тёмным прямоугольником не так уж и велика.Интересно, что будет при попытке обнаружения сетки 10х10…Как работает OCRПосле того, как мы определили, где должны находиться числа, нам необходимо распознать их. Это относительно легко. В алфавите только цифры от 1 до 9.ТеорияКаждый алгоритм распознавания имеет три шага:Определение необходимых признаковТренировкаКлассификация (распознавание в рантайме)Определение необходимых признаков является частью разработки приложения. Например, цифра один тонкая и высокая. Именно это и отличает её от остальных. Цифра 8 имеет две окружности, в верхней половине и в нижней, и т. д. Определение необходимых признаков может быть трудной и не интуитивной работой, в зависимости от того, что надо распознать. Например, что необходимо для распознавания чьего-то лица? Не любого, а какого-то конкретного.ЗоныВ нашем приложении был использован способ плотности зон. Следующим шагом (Это должно быть сделано заранее) является тренировка приложения на цифры от 1 до 9. Вы можете найти эти изображения в каталоге ./res. Они уменьшены до размера 5х5, нормализованы и хранятся в статическом массиве OCRDigit::m_zon[10][5][5], который выглядит примерно так:Уменьшение до размеров 5х5 называется зоннированием или разбивкой на зоны. Массив выше называется плотностью функции.Нормализация значит, что плотность варьируется от 0 до 1024. Без нормализации зоны нельзя сравнивать корректно.Что происходит во время выполнения программы: когда цифра получена из исходного изображения, она уменьшается до размера 5х5. После этого каждый её пиксель сравнивается с каждым пикселем из девяти цифр из тренированного массива. Целью является найти цифру с минимальным различием. Этот метод инвариантен к размеру изображения, так как в любом случае мы используем зоны 5х5. Он чувствителен к поворотам, но мы уже позаботились об этом раньше. Проблема в том, что он чувствителен к позиции и смещению, а также не работает с негативами (белым по чёрному) и перевёрнутыми вверх тормашками цифрами.Соотношение ширина/высотаЦифра один является частным случаем. Так как она похожа на 4 и 7, то метод определения, данный выше, может оказаться ненадёжным. Специфичный параметр единицы: в нашем случае, её ширина на 40% меньше, чем высота. Нет другой такой цифры с таким же соотношением. У нас уже есть 25 зон (признаков), так вот это является 26-м признаком.TODO: В следующей версии, качество OCR может быть улучшено введением новых признаков. Например, цифры 5,6 и 9 очень похожи при использовании разбиения на зоны. Для того, чтобы различать их, мы можем использовать их профили как признаки. Особенностью признака является количество пикселей (расстояние) между краем рамки цифры и её границей.На изображении ниже, вы можете видеть, что профили цифр 5 и 6 похожи, но они отличаются от профиля 9. Левый профиль 5 и 9 похож, но отличается от профиля 6.Можно добавить ещё несколько усовершенствований. Профессиональные OCR движки используют много признаков. Некоторые из них очень экзотические.Корректировка результатов OCRКак только OCR закончен, результаты корректируются в соответствии с правилами судоку. В одной строке, столбце и блоке 3х3 не может находиться одна и та же цифра. Если правило нарушено, то необходимо ввести коррективы в полученные результаты. Мы заменим неправильную цифру той, что возможна из оставшихся. Например, в изображении 12 выше, результат 5 потому что diff=5210, которое является самым маленьким значением различия. Следующий возможный результат 6, так как diff=5508 в этом случае. Таким образом, мы заменим 5 на 6. Чтобы решить, которая из двух цифр неверная, мы сравним значения их различий с их образцами, и та, у которой значение меньше, будет считаться верной. Исходный код корректировки вы можете найти в функции SudSolver::Fixit();Как работает функция решения судокуСуществует несколько способов решения судоку. Мы используем три простых метода, которые работают вместе и дополняют друг друга: открытые цифры, скрытые цифры и перебор.ПереборЭто самый широко используемый программистами способ, который точно даёт решение независимо от уровня сложности. Но перебор может быть очень долгим, это зависит от глубины рекурсии. Вы никогда не узнаете, сколько же итераций вам понадобиться. Во время перебора в клетку ставятся поочерёдно возможные из значений от 1 до 9 и продолжается решение судоку с поставленным числом. Если мы зашли в тупик (получили в одной строке/столбце/блоке одинаковые цифры, то меняем цифру на следующую). На самом деле, может быть больше одного решения, но будет круто, если мы найдём хотя бы одно. (У переводчика был в решении именно перебор и работал он на удивление быстро).Во-первых, необходимо подготовить таблицу кандидатов – возможных значений для каждой пустой клетки. Изображение ниже объясняет, что именно такое кандидаты. Они окрашены в синий цвет. По правилам судоку, первая клетка может содержать только цифры 1, 4, 8. Тройка не может там находиться, так как она есть уже двумя клетками ниже.Метод перебора пробует скомбинировать все синие цифры пока не найдёт решения. Посмотрим на первую клетку. Алгоритм начитается с единицы, в пятой клетке будет значение 3 и т. д. Если какая-то цифра не согласуется с другими значениями, то алгоритм пробует другую. Например, шестая клетка слева также имеет цифру 3 в качестве кандидата, но это не согласуется с пятой клеткой, поэтому алгоритм попробует следующую цифру, то есть 4 и т.д.Перебор может быть очень медленным, если решение требует много итераций. Например, следующее изображение это очень плохой случай для нашего алгоритма. Начиная с левой верхней клетки будет слишком много переборов, но есть и хорошие новости: начинайте с клетки, где вариантов поменьше. Это ускорит решение.Есть ещё несколько оптимизаций для увеличения производительности алгоритма, таких как сортировка рекурсивной последовательности от клеток с наименьшим количеством кандидатов к клеткам с наибольшим. Но мы не используем этот алгоритм, так как это только частичная оптимизация. Все судоку имеют плохие клетки, и обрабатываются не столь быстро для приложений в реальном времени.Открытые цифрыИзображение ниже объясняет этот метод. Если ячейка имеет единственного кандидата, то мы с уверенностью можем сказать, что именно эта цифра должна стоять в этой клетке. После установки значения, следующим шагом будет перестроить список кандидатов. Список кандидатов уменьшается, пока существуют одиночные кандидаты. Это очевидный и простой метод для компьютеров. Но не такой очевидный для людей, как мне кажется. Живые игроки не могут хранить список кандидатов в голове и постоянно его перестраивать и корректировать.Скрытые цифрыКак и раньше, изображение ниже объясняет этот метод. Посмотрите на цифру 7.Если вы разгадываете судоку, то скорее всего скажете, что семёрка должна быть именно в указанной клетке.Даже если эта клетка имеет четырёх кандидатов: 4, 7, 8, 9 (см. рис. 15), фокус в том, что мы ищем уникальные цифры из кандидатов в блоке 3х3, в строке и в столбце. Метод, возможно, сможет решить весь пазл целиком, но лучше работает с методом 2. Когда в методе открытых цифр кончаются одиночные кандидаты, на сцену выходит метод скрытых цифр.Комбинирование всех методов вместеДля на важна скорость обработки и решения. Перебор не слишком быстрый метод. Таким образом, мы будем использовать комбинацию всех трёх методов. Методы 2 и 3 очень быстрые, но могут решать только быстрые пазлы. Так как мы просим приложение решить пазл за нас, то это значит, что он действительно сложный. Ниже приведён алгоритм работы. С левой стороны расположены быстрые методы 2 и 3. И только если им не удаётся решить пазл, управление переходит правой стороне с методом перебора, уменьшив работу для этого алгоритма.Только если методы 2 и 3 не могут решить пазл, программа начинает передирать значения. И даже тогда, алгоритм перебора ограничен по времени 600000 итерациями. Также существует три попытки, после чего программа сдаётся. Между каждой попыткой, рекурсивная последовательность переставляется случайным образом с надеждой, что новая последовательность поможет решить пазл быстрее. Если мы решить судоку так и не смогли, то может нам повезёт на следующем кадре камеры. Представленная блок-схема описана в функции SudSolver::SolveMe().Буфферизация решенияКогда решение найдено, мы сохраняем его в массиве типа SudResultVoter. Буфферизация необходима, потому что OCR не на 100% гарантирует правильность результата, и время от времени мы получаем разные решения. Чтобы избежать неустойчивого решения, мы всегда будем показывать сильнейшее (для точности 12 последних решений). Время от времени массив обнуляется, забывая старые решения и давая шанс новым.ВидеоTODO:Некоторые идеи на будущее:Переписать программу под Android. Мне интересно, как это будет работать на смартфонахРаспараллелить некоторые функции на многопроцессорных системах. Сегодня большинство ПК имеют минимум два ядра. Обычно, распараллеливание даёт прирост производительности. Но с решаталем через веб-камеру нам нужна не столько скорость, сколько точность и качество. По идее, распараллеливание задач должны улучшить операции над похожими кадрами, но с различными настройками. После того, как все задачи будут закончены, мы просто возьмём лучший результат.Скачать демо — 170 KBСкачать исходники — 307 KBТакже есть зеркало исходников на GitHub: github.com/NeonMercury/Realtime-Webcam-Sudoku-Solver"
    },
    "doc_39": {
        "url": "https://habr.com/ru/post/541114/",
        "title": "На фондовом рынке США сформировался пузырь небывалых размеров",
        "text": "Оценки напрочь оторвались от фундаментального анализа, мультипликаторы находятся на исторических максимумах, скорость эмиссии ценных бумаг зашкаливает — и всё это сопровождается безумно спекулятивным поведением инвесторов. Большой кризис неизбежен.Начать своё повествование я хочу с, казалось бы, очевидного, но сегодня далеко не все осознают, для чего появились акции. Итак, акция — это доля в компании. Зачем нужна доля в компании? Для того, чтобы иметь часть её прибыли. Именно поэтому реальная ценность акции обусловлена текущей и будущей прибылью компании-эмитента, которая передаётся акционеру в форме дивидендов.Некоторые компании выплачивают дивиденды ежеквартально, другие — ежегодно, а есть те, которые более десятилетия не делились чистой прибылью со своими акционерами. В конце прошлого века подобное было редкостью, однако с появлением интернета скорость масштабирования бизнеса увеличилась на порядок, и технологические компании взяли за правило реинвестировать всю чистую прибыль в развитие, чтобы в будущем дивиденды были ещё больше.Повторюсь, ценность любой акции обеспечивает только её реальная или потенциальная дивидендная доходность. Однако ценность не равна стоимости и фактическая цена акции всегда спекулятивная. Объясняется это тем, что ожидания от будущей прибыли компании у всех людей разные, а к тому же каждый человек иррационален по своей природе.Стали бы вы покупать долю в компании, которая будет окупаться 30 лет без возможности её продать? Уверен, что нет. Но если эта доля за последний месяц была перепродана сотни раз и цена её заметно выросла, возникает желание спекулировать на её стоимости. То есть изначально кто-то поступил иррационально и запустил маховик. Толпа подвергается эффекту лемминга и в такой ситуации реальная ценность перестаёт интересовать рынок. Так возникает экономический пузырь.Вводная часть закончилась, и я перехожу от абстрактного примера к реальному. В финансовом анализе существует коэффициент P/E — соотношение капитализации и чистой прибыли. Сегодня компания Tesla оценивается в 1500 годовых прибылей. Другими словами, при сохранении текущего уровня доходов инвестиция в Tesla окупится через полтора тысячелетия.Однако рынок электромобилей постоянно ширится, а вместе с ним неуклонно растёт выручка компании. Следовательно, доходность будет расти, а срок окупаемости сокращаться. Посему я предлагаю вам порассуждать о том, сколько лет потребуется для возврата инвестиций в акцию $TSLA через дивиденды, которые пока ещё ни разу не выплачивались.За последние 3 года средний рост продаж Tesla составил 42%. Чем больше компания, тем сложнее сохранять темпы роста, но по убеждению многих, революция на рынке автопрома только начинается. Поэтому давайте предположим, что в последующем продажи Tesla будут только расти, причём на 50% ежегодно. Таким образом в 2030 году выручка Tesla превысит $1,5 трлн — это в 3 раза больше, чем у Walmart, самой крупной компании по выручке на сегодняшний день.Фондовый рынок охватило спекулятивное безумие. Триллионные капитализации — это, наверное, самая драматическая вещь, которая когда-либо случалась во всей мировой истории финансов.Чарльз Мангервице-председатель совета директоров Berkshire HathawayПускай в 2030 году Tesla начнёт выплачивать дивиденды, но в каком объёме? Дивидендная политика у всех компаний разная. ВТБ на выплаты дивидендов направляет всего 5% от своего заработка и поэтому оценивается в 3 годовых прибыли. А, например, у P&G показатель payout ratio выше 55% и коэффициент P/E уже доходит до 25. В нашем гипероптимистичном прогнозе совет директоров Tesla максимально щедр и будет стабильно направлять на дивиденды 80% чистой прибыли, как это делают в Coca-Cola.Для оценки окупаемости осталось разобраться с доходностью Tesla. В 2020 году компания впервые отчиталась о годовой чистой прибыли. Такой результат стал возможен исключительно благодаря регуляторным кредитам. Если рассматривать строго операционную деятельность, компания по-прежнему убыточна, и я подробнее писал об этом в Гроксе. Но сейчас мы отбросим эти формальности и учтём, что Tesla инвестирует огромные средства в расширение производства.Если мы посмотрим на маржинальность среди крупнейших автопроизводителей в лице Toyota, Volkswagen, Ford и General Motors, то увидим, что их profit margin исторически меньше 10%. Однако гений Маска бесконечен, поэтому давайте представим, что в 2031 году маржинальность Tesla дойдёт до 20%. При чистой прибыли в $400 с лишним млрд компания направит на дивиденды более $300 ярдов.Определив дивидендный доход, мы можем констатировать, что акция стоимостью в $850 при приведённых выше обстоятельствах окупится через 2 года с момента начала выплаты дивидендов. Итого срок окупаемости составит 12 лет. Для этого всего лишь нужно, чтобы выручка Tesla увеличилась в 100 раз, до $3 трлн, чтобы компания стала самой богатой в мире и кратно превзошла по эффективности всю отрасль, пока конкуренты бездействуют.Удивительно, но не все понимают, что подобный сценарий невозможен или, мягко говоря, статистически маловероятен. Я встречаю мнения долларовых миллионеров, представителей венчурной среды, которые оправдывают стоимость Tesla, сравнивая рост её выручки в процентном соотношении с другими автопроизводителями, словно они не понимают, что +5% к 100 млрд больше, чем +20% к 20. Следующий график очень хорошо визуализирует степень абсурдности подобного мышления.Сравнение капитализации и выручки автопроизводителейБиржевая стоимость Tesla значительно выше капитализации 9 всем известных автоконцернов несмотря на то, что их суммарная выручка в 50 с лишним раз больше, чем у предприятия Маска. При этом каждая из 9 компаний «старого толка» производит электромобили, и, например, продажи таковых в единицах продукции у Renault и Nissan составляют половину от продаж Tesla.Напомню, что в 2020 году Tesla доставила почти 500 тысяч автомобилей, показав тем самым рост продаж на 36%. А Volkswagen за тот же период продал 5,3 млн автомобилей, среди которых 212 тысяч электромобилей, и это на 158% больше, чем в прошлом году. Кстати говоря, продажи Tesla в Европе снизились на 10%, а в Германии упали на 36%, хотя местный рынок вырос в 2 раза.Капитальные расходы и маржинальность EBITDAПокупатель акции Tesla приобретает долю в компании по мультипликатору $1,5 млн на каждый проданный автомобиль. Акции компании General Motors торгуются по мультипликатору $9000 за проданный в 2020 году автомобиль.Фанаты бренда Маска верят в исключительное финансовое превосходство его компании, но маржинальность по ЕБИТДе у Tesla меньше, чем у того же Volkswagen или General Motors. Вы думаете только Маск инвестирует в будущее? Однако у каждой из упомянутых корпораций CAPEX больше, чем у Tesla. Одни лишь бумаги $TSLA — это огромный пузырь из сотен миллиардов долларов, а похожих компаний на рынке огромное множество.Теперь, когда все понимают, что значит «компания переоценена», я предлагаю перейти от частного к общему. Согласно TradingView, на биржах США сегодня торгуется более 150 компаний с оценкой выше $1 млрд, у которых капитализация составляет от сотни до нескольких тысяч годовых прибылей. Суммарная биржевая стоимость первых десяти компаний из этого списка превышает $1,5 трлн!Однако делать какие-либо выводы на основе одного коэффициента P/E неразумно. Может так совпало, что именно в последнее время большинство компаний увеличило капитальные расходы и как следствие у них внушительно просела чистая прибыль. Поэтому давайте посмотрим на показатель CAPE (Cyclically Adjusted Price/Earning Ratio) или коэффициент P/E Шиллера по индексу S&P 500, где вместо «earnings» берётся средняя прибыль за последние 10 лет, скорректированная на инфляцию.Коэффициент P/E Шиллера по индексу S&P 500Сегодняшнее значение CAPE превышает таковое перед чёрным вторником, который предшествовал началу Великой депрессии США. Однако мы отчётливо видим, что показатель CAPE был значительно выше в начале нулевых, когда раздувался пузырь доткомов. Кому-то может показаться, что всё ещё не так уж и плохо, но для того, чтобы сделать выводы, нужно мыслить системно и рассматривать целый комплекс метрик. Поэтому я предлагаю вам взглянуть на коэффициент P/S — соотношение цены и продаж.Коэффициент P/S по индексу S&P 500Значение P/S находится на историческом максимуме. Даже в период бума доткомов оценки по этому показателю были скромнее, и обратите внимание, какие они были в самом начале девяностых. Безусловно, у технологических компаний маржинальность выше, чем у офлайн-бизнеса, и P/S должен был вырасти с появлением интернета. Но сегодня Snowflake оценивается почти в 150 выручек, Zoom — в 60, Tesla — в 30. А теперь посмотрите на дивидендную доходность по S&P 500.Дивидендная доходность по индексу S&P 500До исторического минимума не хватает нескольких десятков базисных пунктов. Хочу подчеркнуть, что последние три графика отражают положение дел только в крупнейших компаниях США из именитого индекса Standard & Poor’s, где каждая компонента утверждается согласно определённым критериям. Для сравнения, значение CAPE по NASDAQ 100 равно 55.33, по Russel 2000 — 112.98.При всём при этом есть ещё множество компаний с отрицательной доходностью, для которых P/E не считается в принципе. У меня нет свежих цифр, но в 2018 году 83% компаний, вышедших на IPO, были убыточными — и это на два процентных пункта больше, чем в 2000 году. А сегодня акции убыточных технологических компаний показывают доселе невиданный экспоненциальный рост.Индекс убыточных технологических компаний СШАДля примера акции китайского производителя электромобилей NIO, которые торгуются на NYSE, с прошлой весны выросли в 25 раз. За последний год компания продала всего 43 тысячи автомобилей, а её капитализация составляет $70 млрд! Чистый убыток NIO по TTM (Trailing Twelve Months) равен $999 млн при объёме продаж в $1,8 млрд. То есть глубоко убыточная компания оценивается в 40 годовых выручек!Похожая ситуация также наблюдается по отношению к другому китайскому производителю электромобилей XPeng. Расходы данной компании почти в два раза больше доходов и в пропорции она переоценена даже больше, чем NIO. При выручке в $520 млн и чистом убытке в $420 млн её капитализация выше $23 млрд. Такой офлайновый бизнес имеет P/S равный 44.Фирмы, которые теряют деньги: их капитализация и убыткиОтдельно хочется упомянуть IPO AirBnB. До пандемии венчурная оценка сервиса доходила до $31 млрд, а после опустилась до $18 млрд. Однако на открытии торгов биржевая стоимость AirBnB превысила $100 ярдов. Вы только вдумайтесь в это: всего за несколько месяцев компания, бизнес-модель которой построена на путешествиях людей, в эпоху пандемии и карантинов, выросла в стоимости в 5 с лишним раз.Примечательно ещё то, что рынок почему-то оценил AirBnB значительно дороже Booking Holdings и Marriott, капитализация которых составляет 85 и 40 миллиардов долларов соответственно. В ноябре, когда на сайте Комиссии по ценным бумагам США появился проспект IPO, я публиковал сравнительную таблицу этих трёх компаний.Выручка Marriott в 2019 году была в 4 с лишним раза больше, чем у AirBnB, выручка Booking Holdings — в 3 раза. У Booking даже чистая прибыль была больше, чем выручка AirBnB, и продажи в последние годы росли быстрее в абсолютных числах. Пандемия меньше всего повлияла на структуру доходов AirBnB, но именно эта компания хуже остальных переносит кризис. Обратите также внимание на то, что заскорузлый и неповоротливый, в отличие от новомодных стартапов, Marriott лучше всех оптимизировал косты и оказался максимально гибким во время кризиса.Не менее ярким случаем иррационального поведения фондового рынка является выход на биржу DoorDash. Именно тогда я впервые сказал про новый пузырь доткомов перед широкой аудиторией. Поэтому процитирую себя же:DoorDash, один из крупнейших в мире сервисов доставки еды провёл IPO по оценке в $41 млрд. Выручка компании за 9 месяцев составила $1.9 млрд, чистый убыток — $534 млн. В первый день торгов акции выросли на 80%, а капитализация теперь превышает $70 ярдов, что составляет 35 выручек по TTM! И это никого не удивляет! Среди авторитетных людей в рунете я вижу мнение, мол $DASH будет стоить ещё в 10 раз больше, ибо рынок еды очень большой и стабильный. Это, конечно, сильная аналитика — субъективная оценка потенциала самой идеи, а не операционки. И так рассуждают реально успешные предприниматели, долларовые миллионеры, причём некоторые из них являются представителями венчурной среды. Напоминаю вам, что летом этого года Just Eat Takeaway купила исторически прибыльный GrubHub за $7.3 ярда. Отношение стоимости к выручке было меньше в 7 раз! Да DoorDash растёт быстрее, но он никогда не показывал прибыли, а мультипликаторы для одного и того же по своей специфике бизнеса за несколько месяцев выросли многократно! Кстати, Uber приобрёл Postmates в июле всего за $2.65 миллиарда!В общем, я вам гарантирую, что пройдёт время и словосчетание «пузырь доткомов» у вас будет ассоциировано не только с началом нулевых.10.12.2020Среди компаний, которые выходят на IPO, действительно трудно найти прибыльную. Affirm, Snowflake, Asana, Palantir, Unity и другие, кого я упоминал в Гроксе, ведут сплошную историю убытков. И ладно уже, что по истечению многих лет они так и не научились зарабатывать. Больше беспокоит то, что их коэффициенты оценок превышают таковые для Google, когда он выходил на биржу в 2004.Поймите правильно, я не говорю, что ничто не должно оцениваться в пропорции дороже Google, ибо нет ничего перспективнее поисковика. Нет. Подобное мышление не имеет ничего общего с аналитикой. Я про то, что предприятие Брина и Пейджа было прибыльным с 2001 года, а его доходы росли на сотни процентов. Если вы загляните в форму S1, поймёте, что Google был денежным станком, который оценили в 25 выручек. Сравните это с современными стартапами, где значение P/S такое же или выше.Аномальная переоценка по мультипликаторам — это лишь самое скромное из того, что сегодня происходит на рынке. В 2020 году состоялось 248 SPAC IPO, в результате которых было привлечено более $83 млрд. По сравнению с 2019 годом количество таких IPO выросло на 500%, а объём привлечённого капитала увеличился в 6 раз.Объём капитала, привлечённого на IPOВышеупомянутые цифры определённо свидетельствуют о нездоровом интересе к SPAC, и данный тренд только начинает набирать обороты. Если верить сервису SPACInsider, а на него ссылаются специалисты Zacks в публикации на сайте Nasdaq, то в 2021 году уже произошло 100 SPAC IPO, через которые подняли $29 млрд!Для тех, кто не знает SPAC (Special Purpose Acquisition Company) — это компания без коммерческой деятельности, которая формируется исключительно для привлечения капитала путём первичного публичного размещения акций.Популярность такого способа выхода на биржу понятна — если на рынке есть оголтелая толпа розничных инвесторов, которая скупает всё подряд, то делиться деньгами с инвестбанкирами и андеррайтерами не хочется. Но качество и количество эмитентов вызывает вопросы.Самый яркий пример SPAC IPO — это скандально известная Nikola, чья капитализация приближалась к $30 ярдам несмотря на то, что компания не имеет ничего — ни выручки, ни собственного производства, ни даже продукта. Рынок просто поверил в прототип электрогрузовика, который тоже оказался подделкой.Чтобы вы понимали масштаб безумия, упомяну производителей электромобилей, которые вышли на биржу через SPAC за последние полгода: Nikola, Lordstown, Fisker, Hyliion. Последние три дебютировали на фондовом рынке в октябре. Все, толком не имея продаж, оцениваются в миллиарды.Стоит ещё сказать про QuantumScape и Romeo Systems, которые производят батареи для электромобилей. А в ближайшем будущем ждите SPAC-размещения Arrival, Lion, Canoo и, возможно, Karma. Вообще, ажиотаж на электромобили напоминает ICO-лихорадку 2018 года, после которой ничего путного на свет так и не выродилось.ФРС заливает рынок деньгами и создаёт избыток ликвидности. Именно это в первую очередь способствует росту стоимости активов, несмотря на снижения их доходности. Инвесторы полагаются на благоприятную монетарную политику и нулевые реальные ставки, экстраполированные на неопределенный срок. Но идеальные экономические и финансовые условия не могут длиться вечно.Я думаю, мы берем в долг у будущего. ФРС подталкивает людей к тому, чтобы больше рисковать, и способствует завышению цен на акции. Это плохо кончится.Леон Куперманоснователь хедж-фонда Omega AdvisersПосмотрите на кредитное качество публичных нефинансовых компаний по методологии Standard & Poor’s. В 1980 году было 65 эмитентов с рейтингом AAA, а сейчас их всего 5. Раньше более половины компаний от общего числа находились в А категории, сегодня большинству компаний присвоен мусорный рейтинг (BB и ниже).Кредитное качество публичных нефинансовых компанийОднако риски банкротства нисколько не смущают инвесторов. За последние 10 месяцев индекс S&P 500 вырос на 70%. Это более чем в два раза выше нормальной скорости подъёма бычьего рынка. А Russell 2000 за тот же период вырос на 100%, хотя долговая нагрузка по компаниям из этого индекса превысила их доходы до вычета налогов, о чём свидетельствуют данные Societe Generale.Долговая нагрузка по Russell 2000В статье Financial Times с заголовком «Fed backstop masks rising risks in America’s corporate debt market» мне повстречалась ещё одна интересная цифра: у каждой седьмой компании с капитализацией от $300 млн до $2 млрд выплаты процентов по кредитам и облигациям превышают размер прибыли на протяжении 3 последних лет. Опять же, это сравнимо только с началом нулевых.Количичество зомби-компанийФРС создаёт дурную тенденцию, которой соответствует большой капитал, а розничные инвесторы усиливают ассиметрию и превращают фондовый рынок в казино. Последних не интересует фундументальный анализ в принципе и к 2020 году их стало так много, что они уже задают свой вектор движения цен.Думаю, вы уже слышали про скоординированные действия аудитории r/wallstreetbets против хедж-фондов и знаете, что творилось с акциями $GME, $AMС, $BB и прочими. Даже котировки Nokia, которая не была в центре внимания сообщества Reddit, скакали на десятки процентов. Подписчики r/wallstreetbets за пару часов смогли поднять её капитализаю с 20 до 50 миллиардов долларов. Это беспрецедентая история, и она будет описана в финансовых учебниках.Кстати, по опыту Джереми Грэнтэма из GMO на существования пузыря указывают даже такие косвенные факторы, как растущая враждебность по отношению к медведям со стороны быков. В 1929 году игра на понижение влекла за собой риск физической расправы и даже убийства.Сегодня мы живём в мире, где один твит Илона Маска, выражающий симпатию или похвалу к определённому продукту, может поднять биржевую стоимость её производителя на 10 и более процентов. По крайне мере так было с Etsy и разработчиками Cyberpunk. А после того, как он поставил в профиле своего аккаунта в Twitter хештег #bitcoin , стоимость BTC через полчаса выросла на 15%.Поведение пользователей Robinhood и подобных приложений не поддаётся никакой логике. Например, в один момент они начали скупать акции Hertz, которая находилась в процедуре банкротства, и бумаги выросли в цене в 10 раз. Kodak подорожала в 30 раз на новостях о том, что компания будет производить химические элементы для лечения COVID-19.А сколько было случаев, когда инвесторы просто путали тикеры? Буквально на днях после эфира Илона Маска в Clubhouse домашние трейдеры подняли акции тикток-домов Clubhouse Media Group на 100%. То есть многие из них даже не догадывались, что популярная нынче соцесть с голосовыми чатами является частной компанией. То же самое было с Signal.Объём маржинального долгаУровень маржинального кредитования достиг исторического максимума, а активность розничных инвесторов на рынке опционов за последний год выросла в 8 раз. Теперь они буквально двигают целые индексы, о чём подробнее написано в статье «How the Little Guy Is Fueling the Stock Market’s Wild Ride» на Barron's.Всему этому способствует политика количественного смягчения. Согласно исследованию Yodlee, американцы, которые зарабатывают от 35 000 до 75 000 долларов в год, торговали акциями на 90% больше, чем за неделю до получения своего стимулирующего чека. И они заметно помогают раздувать цены.АпофеозС лета прошлого года рынок развивался ускоряющимися темпами и с нарастающими спекулятивными эксцессами. Почти все показатели находятся на точках экстремума, включая и индикатор Баффета, который показывает отношение рыночной капитализации к ВВП. Всё это свидительствует о наличии огромного финансового пузыря.Длинный-предлинный бычий рынок с 2009 года наконец-то созрел в полноценный эпический пузырь. Я полагаю, что это событие будет записано как один из величайших пузырей в финансовой истории, наряду с пузырями Южного моря, 1929 и 2000 годов.Джереми Грэнтэмоснователь инвестиционной компании GMOПузыри возникали и ранее, но они зарождались при аккомодационных денежных условиях в состоянии экономического превосходства. После глобального кризиса, вызванного пандемией, США, как и весь мир, находится в совершенно другом экономическом положении. Сегодняшний пузырь отличается от всех предыдущих тем, что он сформировался при сильном падении ВВП, небывалом росте безработицы, резком сокращении экспорта и множестве социальных проблем.Прокол в переоцененных секторах и типах активов может начаться в любой момент. Когда это случится, последствия будут болезненными как никогда ранее. Например, Джон Хассман из Hussman Investment Trust ожидает падение индекса S&P 500 до 70%. Нас ждёт большой финансовый кризис, который рынок не захотел признать ещё прошлой весной. И пока мы все его ждём, я хочу вам напомнить, что «the market can remain irrational longer than you can remain solvent».Большое спасибо всем за внимание. Если вам интересны подобные рассуждения, не вписывающиеся в формат полноценной статьи, то подписывайтесь на мой канал Groks."
    },
    "doc_40": {
        "url": "https://habr.com/ru/post/146730/",
        "title": "Энергонезависимое решение",
        "text": "Понедельник. Постановка задачиДевять часов тридцать одна минута утра — я на работе. Вообще-то мы работаем с десяти до семи, но по понедельникам я предпочитаю приходить пораньше — мне нравится наш офис, пока в нём нет людей. Я медленно иду мимо столов — одни завалены распечатками спецификаций и каких-то диаграмм, другие совсем пустые. На одних столах стоят компьютеры, другие пустые. Под некоторыми столами стоит сменная обувь, перед другими нет даже кресла. Да, у нас больше половины столов пустые — это на случай приёма новых сотрудников, или командировки кого-то из других городов и стран. Ведь у нас крупная международная компания с офисами разработки в Омске и Калачинске и головным офисом на Кипре. Мы занимаем четыре этажа в современном офисном центре. Правда, сразу за нашим зданием начинаются руины какого-то авиационного завода, и в день зарплаты мы стараемся там не ходить.Мой стол стоит в углу, между пластиковой перегородкой и стеной. Прямо надо мной висит кондиционер, и, когда на улице делается совсем жарко, мне приходится приносить из дома свитер, чтобы не замёрзнуть. На мой взгляд, лучший кондиционер — это простое открытое окно, но у нас в офисе окна не открываются. Я думаю, архитекторы этого здания слышали о нервном истощении среди офисных работников, и решили минимизировать число суицидов. Зато вид с нашего двенадцатого этажа открывается шикарный. Жаль, большую часть времени окна закрываю жалюзи — чтобы солнечный свет не бликовал на мониторах и не слепил глаза. Поэтому у нас всегда включены лампы дневного света.Какой-то парень поздоровался со мной за руку и уселся за соседний стол. Он сел здесь в прошлый понедельник, неделю назад, но я до сих пор не знаю, как его зовут — мы работаем над разными проектами. Да, кстати, я работаю над проектом под названием Комплексное Корпоративное Решение — сокращённо КОКОРЕШ. Это очень сложная система, состоящая из множества модулей, десятков слоёв и сотен тысяч файлов с исходным кодом. Система такая большая, что никто не знает, что же она делает.Подёргав мышку, я вывел компьютер из спящего режима и запустил браузер. В минувшую пятницу руководитель нашего проекта, Егор, уехал к потенциальным заказчикам в Демократическую Республику Конго. Сегодня должен состояться митинг по скайпу, в котором, по традиции, примет участие весь наш отдел. Само собой, говорить там будет только Егор и руководитель группы — Костя. Все остальные десять участников выключат микрофоны своих гарнитур и будут лениво читать твиттер и контакт.Ближе к полудню подошли остальные сотрудники нашего отдела. Пока все здоровались и рассказывали о том, как внезапно пятница сменилась понедельником, неожиданно настало время обеда.После обеда я получил письмо с приглашением на статус-митинг сегодня в 4 часа. Это означает, у меня есть два часа, чтобы смотреть ролики на Ютубе, ведь во время митинга Ютуб невозможно смотреть — скайп занимает практически весь канал.В половине пятого запиликал входящий вызов. Я быстро надел гарнитуру, нажал зелёную кнопку ответа на звонок и выключил микрофон. Проджект-меденжера было слышно плохо. Из трубки что-то постоянно бухало, казалось, что где-то недалеко от него бьют барабаны.— Добрый день, коллеги! — начал он, — Сразу скажу, что здесь у нас нет электричества, и аккумулятор моего ноутбука почти сел. Наши партнёры из Демократической республики Конго, они очень… они крайне дружелюбно настроены, я уверен, и у нашей крупной международной компании тут неплохие перспективы. Нам следует быть настойчивыми, и непрерывно двигаться вперёд. Воля к победе — вот главное, и вместе мы добьёмся много, ведь наше будущее, и значит будущее нашей крупной международной компании, зависит от каждого из нас. Мы должны стремиться к успеху, и, постоянно совершенствуясь, добиваться невозмож…Тут связь разорвалось. Повисла неловкая тишина.Я подумал, что Конго — одна из последних стран, где сохранился каннибализм, и что там сейчас как раз время к обеду. Но решил не подрывать корпоративный дух.Первым заговорил Костя:— Итак, выяснилось, что в Конго нет электричества. Но это не помешает нам внедрить у них наше Комплексное Корпоративное Решение. Наша задача — разработать энергонезависимый модуль для нашей системы. Наш архитектор Гриша подготовит архитектуру. Так ведь, Гриша?Гриша заулыбался. Слегка скошенный нос придавал его улыбке неповторимый шарм. Когда-то в молодости он занимался дзюдо и был неплохо сложён, но сейчас практически вся его мышечная масса перешла в жировую.— Беру на себя обязательство к завтрашнему утру подготовить архитектуру энергонезависимого КОКОРЕШа, — торжественно произнёс он и ещё раз улыбнулся, для закрепления эффекта.— Отлично, — Костя хлопнул в ладоши, — завтра давайте придём все пораньше, потому что времени на проект у нас мало — до конца недели.— Я вот подумал, в такой ситуации можно им всем счёты раздать, — неловко пошутил я. Все дружно засмеялись.Остаток дня мы рисовали на маркерной доске наших африканских партнёров. К сожалению, чёрный маркер кто-то стащил, поэтому мы рисовали их зелёным. Неожиданно рабочий день закончился.Вторник. АрхитектураВ девять я уже сидел за рабочим компьютером и читал новости. Конечно, до одиннадцати никого из нашего отдела в офисе не было.Ближе к полудню пришёл архитектор Гриша со свёрнутыми плакатами под мышкой. Пока он со всеми здоровался и рассказывал, как он стоял в пробке, неожиданно подошло время обеда.После обеда Костя позвал всех в комнату для совещаний.— Итак, архитектура решения готова, — с этими словами Гриша развернул и повесил на доске два плаката.Я посмотрел на них и тяжело вздохнул, закрыв лицо ладонью.На первом плакате, озаглавленном «КОКОРЕШ», было изображён синий прямоугольник, а рядом с ним — батарейка. На втором плакате, подписанном «ЭНЕКОКОРЕШ», был изображён один только синий прямоугольник.— На первом плакате вы видите архитектуру существующего, энергозависимого решения. На втором — архитектура энергонезависимого решения, — радостно сообщил Гриша и, повернувшись к нам, заулыбался так, как будто не понимал бессмысленности собственной работы.— Отлично, Григорий! Молодец! — похвалил его Костя — Как тебе в столь сжатые сроки удалось создать такую архитектуру?— Ну как, — смутился Гриша, — нормально, Константин.— Ну ладно, — улыбнулся Костя, — теперь дело за малым — осталось реализовать эту архитектуру.— Кость, постой… — заговорил я, — компьютеры же без электричества работать не будут…— Слушай, я тебя, конечно, ценю как специалиста, — нахмурив брови, ответил мне Костя, — но твоё дело — реализация, а архитектура, вот она, — он показал рукой на плакаты, — готова уже. Ну и чего здесь сложного? Написать программу, и всё. Говоришь, без электричества работать не будет. А ты что, пробовал уже?Честно говоря, я ни разу не пробовал включать компьютер без электричества, но базовые познания в его устройстве подсказывали мне, что он не заработает.— Нет, не пробовал… — ответил я.— Ну вот видишь — рассмеялся Костя. И все тоже засмеялись, кроме меня.Когда митинг закончился, было уже пять часов.Сразу после митинга Гриша и Костя ушли куда, ни с кем не попрощавшись. Я сидел за своим компьютером и задумчиво листал Контактик. За перегородкой Сергей что-то отчаянно набирал на клавиатуре.— И всё таки, им нужны счёты, — задумчиво произнёс я. Сергей перестал стучать по клавиатуре, сдавленно хрюкнул за своей перегородкой, и, кажется, обрызгал её слюной.— Слушай, а что ты там делаешь целыми днями? — спросил я Сергея.— Я фильмы смотрю, — честно ответил он.— Как же так, ты же целыми днями что-то набираешь на клавиатуре. Я думал, ты код пишешь, — удивился я.— Я специально клаву отключаю. А по клавишам стучу просто так, для поддержания рабочей атмосферы в офисе.Неожиданно рабочий день закончился.Среда. РазработкаЯ пришёл на работу в девять сорок две и начал читать свежие твиты. Я специально читаю почти тысячу человек — к моменту, когда я прочту свежую порцию твитов, уже появляются новые. Примерно в половине одиннадцатого пришёл Сергей. Я успел заметить момент, как он, надев наушники, отключил клавиатуру и принялся стучать по клавишам.Поздним утром, около двенадцати часов, ко мне подошёл Костя, и, наклонившись, тихо сказал:— Слушай, это… С твоим опытом, с твоими знаниями, я хочу, что бы ты был за старшего. Возьми шефство над Сергеем в этом проекте. Тем более что вы только вдвоём будете работать над ним. И я тебя очень прошу, завершите его в срок.Я только вздохнул. Ну как мне ему объяснить, что проект в принципе не реализуем? Что архитектор Гриша — дурак со справкой, и поэтому так улыбается? Что руководителя проектов, возможно, уже съели жители республики Конго? Что, в конце-концов, без электричества ни одно электронное устройство работать не может?— Я считаю, без электричества компьютеры работать не будут. Аборигенам из Конго нужны счёты, — сказал я, нарочно громко и чётко. Повисла напряжённая тишина. Стало особенно чётко слышно, что Сергей за перегородкой почти не нажимает на пробел.Наконец Костя нарушил молчание:— Ну давай, работай, не буду тебе мешать — и быстро ушел куда-то, позвав с собой Гришу.Неожиданно наступило время обеда.После обеда я решил всё-таки взяться за работу.— Серёг, — сказал я своему соседу из-за перегородки, — давай найдём место в коде, которое потребляет больше всего электричества?— Понимаешь, это мы уже делали, — сказал Сергей. На звуке «п» в слове «понимаешь» из его рта вылетела слюна и ударилась о перегородку. Всё-таки хорошо, что они здесь стоят.— Ну а когда это делали, ты помнишь, номер таски? Коммит в свн?— Сейчас… — Сергей помедлил, — это была таска KOKORESH-4920.Я попытался открыть задачу с таким номером в багтрекере, но получил сообщение, что у меня нет прав. Поскольку Кости в зоне видимости не было, я написал тикет в хелпдеск, чтобы мне дали права.Спустя один час и двадцать минут мне ответили, что права могут дать только в случае подтверждения заявки от менеджера проекта. Я было хотел ответить, что его скорее всего уже съели, но потом подумал, что не так уж и нужна мне эта таска.Вместо этого я решил написать письмо всем заинтересованным в проекте лицам с целью поставить их в известность, что без электричества компьютеры не работают. Я нажал кнопку «написать письмо», но тут появилось стандартное сообщение об ошибке: «Outlook выполнил недопустимую операцию и будет закрыт». «Ладно, не судьба. Попробую завтра» — решил я, и, выключил компьютер.Неожиданно рабочий день закончился.Четверг. Ещё раз разработкаПридя в офис, я первым делом написал письмо.«Добрый день, коллеги!» — начал я своё письмо, — «Я предлагаю упростить задачу с разработки энергонезависимой реализации КОКОРЕШа до поставки готового решения в виде деревянных счёт. Главный довод в пользу этого решения состоит в том, что у наших заказчиков нет электричества. В отсутствии электричества ни одни программно-аппаратный комплекс работать не может. Кроме того, я выражаю своё сомнение в том, что у пользователей, никогда не видевших компьютера, хватит квалификации для работы с КОКОРЕШом.» Я несколько раз перечитал набранный текст, добавил подпись и получателей — руководителя группы Костю, архитектора Гришу и проджет-менеджера Егора. Хотя, положа руку на сердце, я не думаю, что Егор ещё в состоянии что-либо прочесть. Вздохнув, я, для верности, добавил в копию регионального менеджера, Андрэ Эдуардовича Белокрылого, и нажал кнопку «Отправить».Кстати, после одного неприятного случая на моей предыдущей работе, я всегда сначала пишу письмо, а уже потом добавляю адресатов. Тогда один из множества моих начальнивов спросил меня, как скоро я смогу закончить работу, и требуется ли мне ждать выгрузку данных из коллешена. Я хотел написать «да, мне похоже, придётся дождаться выгрузки данных», но письмо отправилось ровно на середине слова «похоже». В общем, мне пришлось срочно искать работу, да ещё и самыми плохими рекомендациями с предыдущего места. Кроме как в крупную международную компанию, меня никуда не брали. И вот теперь я здесь, вынужден писать программу, которой не требуется электроэнергия.Неожиданно настало время обеда.После обеда Костя подозвал меня к себе.— Знаешь, твоё решение насчёт счёт было не таким уж и плохим, — тихо произнёс он.— Так значит мы всё-таки внедрим папуасам счёты? — удивился я. Невероятно, чтобы моё письмо могло изменить уже прянтое решение!— Тише, тише, дослушай. К сожалению, на проработку энергонезависимого КОКОРЕША уже потрачены ресурсы, значительно превышающие стоимость твоего решение со счётами. Так что сам понимаешь, в твоих интересах больше никому про счёты не говорить, иначе получится, что мы зря ресурсы тратили. Ты же умный парень, улавливаешь? А энергонезависимое решение уже практически готово. По моим прикидкам, мы его должны закончить уже сегодня. Поэтому, если сегодня не получится, придётся завтра плотно поработать, и на выходные ничего не планируй. Ну вы должны уложиться, там же немного по сути осталось.Костя немного помолчал, и, наверное, чтобы приободрить меня, добавил:-Знаешь, я ведь сам когда-то программировал. Там же всего пару строчек кода написать нужно, неужели не справишься?Вечером пришёл ответ от самого Андрэ Эдуардовича. Содержательная часть состояла из одной строки: «Я считаю ситуацию, когда рядовые разработчики занимаются вопросами архитектуры, недопустимой. В дальнейшем обсуждении вопроса смысла не вижу.» И далее подпись длинною в восемь строк.Я подошёл к окну. По небу ползли низкие серые облака, а из них на землю падала неопределённая субстанция. Где-то на горизонте виднелись огромные трубы и радиовышки. «Интересно, сейчас лето или зима?» — пронеслось в моей голове. Для нас, офисных работников, смена времён года имеет чисто формальное значение. Лето отличается от зимы только тем, что летом мы носим свитера в офисе, чтобы не мёрзнуть под кондиционером, а зимой — чтобы добежать от подъезда до своего Форд Фокуса. Мы стараемся, работаем каждый день, хотя ничего и не производим. Наша деятельность не оставляет никаких следов в окружающем мире, хотя это, наверное, и к лучше — ведь всё, что мы делаем — мы делаем плохо. Так что же мы делаем здесь? Ответ прост — мы делаем карьеру.Многие ошибочно полагают, что русское слово «карьера» происходит от английского «career» — «профессия». Но это не так, какая же профессия может быть у офисного работника? Профессия может быть только у тех, кто что-то производит. Офисный работник же занят исключительно ментальным уничтожением себя. Слово «карьера» происходить от итальянского «cariare», что означает «вызывать гниение». С этим может не согласиться лишь тот, кто никогда не видел, как здоровый юноша или красивая молодая девушка, попав о офис, через пять-шесть лет превращается в безвольное существо с пустыми глазами, двойным подбородком и дряблыми мышцами.Меня вдруг взяла злость. Нет, даже гнев. Мне захотелось, подобно герою Майкла Дугласа из «Falling down», взять пистолет и убивать. Перестрелять всех бюрократов, всех капиталистов, всех менеджеров среднего и высшего звена, специалистов по поисковой оптимизации, и, конечно же, сотрудников отдела кадров. Я почувствовал, как кровь прилила к голове, а тонкие пальцы сами собой сжались в кулаки. Но потом я вспомнил про свои невыплаченные кредиты, и гнев сменился апатией. Какая, в конце концов, мне разница, возможно ли выполнить полученную мне работу, или нет? Мне платят деньги не за результат, а за время, которое я провожу здесь. Моя деятельность сродни проституции. Вот кстати интересно, получают ли линейные менеджеры удовольствие после общения со своими подчинёнными?..И тут я понял, что мне следует сделать. Завтра с утра я сделаю свою работу наилучшим из возможных способов.Неожиданно я ушёл за десять минут до конца рабочего дня, не сказав никому ни слова.Пятница. РелизКостя пришёл на работу ранним утром, примерно в половине одиннадцатого, и первым делом подошёл ко мне.— Ну, каков статус проекта? — спросил он сурово.— Готов, — спокойно ответил я.— А покажи, — всё так же сурово попросил Костя.— Конечно. Вот смотри, — и я открыл папку, в которой лежал один экзешник, и дважды ткнул по нему мышкой. На секунду курсор превратился в песочные часы, и на экране появилось диалоговое окно с сообщением «Энергонезависимый КОКОРЕШ не может быть запущен в энергозависимом окружении»Лицо Коли расплылось в довольной улыбке:— Молодец! Это как раз то, что требуется. А энергонезависимое окружение закажем у отдела снабжения, пока они его закупят… Если закупят вообще… Слушай, а точно оно работает без электричества?— Обижаешь, я же профессионал! — улыбнувшись, ответил я.За чтением фишек-нет рабочий день закончился, как всегда, неожиданно.Этот рассказ, вместе со многими другими, можно прочесть в книге IT AS IS"
    },
    "doc_41": {
        "url": "https://habr.com/ru/post/142140/",
        "title": "PHP: фрактал плохого дизайна",
        "text": "ПредисловиеЯ капризный. Я жалуюсь о многих вещах. Многое в мире технологий мне не нравится и это предсказуемо: программирование — шумная молодая дисциплина, и никто из нас не имеет ни малейшего представления, что он делает. Учитывая закон Старджона, у нас достаточно вещей для постижения на всю жизнь.Тут другое дело. PHP не просто неудобен в использовании, плохо мне подходит, субоптимален или не соответствует моим религиозным убеждениям. Я могу рассказать вам много хороших вещей о языках, которых я стараюсь избегать, и много плохих вещей о языках, которые мне нравятся. Вперёд, спрашивайте! Получаются интересные обсуждения.PHP — единственное исключение. Фактически каждая деталь PHP в какой-то мере поломана. Язык, структура, экосистема: всё плохо. И даже нельзя указать на одну убийственную вещь, настолько дефект систематичный. Каждый раз, когда я пытаюсь систематизировать недостатки PHP, я теряюсь в поиске в глубину обнаруживая всё больше и больше ужасных мелочей(отсюда фрактал).PHP — препятствие, отрава моего ремесла. Я схожу с ума от того, насколько он сломан и насколько воспеваем каждым уполномоченным любителем нежелающим научиться чему-либо ещё. У него ничтожно мало оправдывающих положительных качеств и я бы хотел забыть, что он вообще существует.АналогияЯ только что выпалил это Мэл, чтобы описать своё расстройство и она настояла на том, чтобы я воспроизвёл это здесь:Я даже не могу сказать, что не так с PHP, потому что… Окей. Представьте себе, эмм, коробку с инструментами. Набор инструментов. Выглядит нормально, инструменты как инструменты.Вы берёте отвёртку и видите крестовину с тремя лепестками. Окей, не очень полезно для вас, но может когда-нибудь понадобиться.Берёте молоток и ужасаетесь тому, что он раздвоен с двух сторон. Он, конечно, всё ещё пригоден, я имею ввиду, что вы можете забивать гвозди серединой бойка, держась за ручку наоборот.Берёте плоскогубцы, у которых нет зазубрин; они плоские и гладкие. Не так полезно, как могло бы быть, но ими всё ещё можно выкручивать болты. И так далее. Все инструменты чем-то странные и вывернутые, но не настолько, чтобы быть совсем бесполезными. И во всём наборе нет конкретной проблемы; в нём есть все инструменты.Теперь представьте себе миллионы плотников, использующих такой вот набор инструментов и говорящих вам: «А что не так с этими инструментами? Я никогда не использовал ничего другого и они отлично работают!». И плотники показывают вам, построенные ими дома с пятиугольными комнатами и крышей кверху ногами. Вы стучитесь в дверь, она просто падает внутрь и они орут на вас за то, что вы сломали их дверь.Вот что не так с PHP.Расстановка силЯ утверждаю, что язык должен обладать следующими качествами, дабы быть полезным и продуктивным, и PHP нарушает их с дикой непринуждённостью. Если вы не согласны, что они критичны, честно, я не могу представить, как мы с вами в чём-либо можем достигнуть согласия.Язык должен быть предсказуем. Язык — носитель для выражения человеческих идей и выполнения их на компьютере, поэтому человеческое понимание правильности программы критично.Язык должен быть целостен. Похожие вещи должны быть похожи, разные должны различаться. Знание части языка должно помогать в изучении и понимании остальной части.Язык должен быть краток. Новые языки существуют, чтобы уменьшить шаблонность присущую старым языкам. (Мы все могли бы программировать на машинных кодах.) Язык должен в тоже время избегать введения своих собственных шаблонов.Язык должен быть надёжен. Языки — инструменты для решения задач; проблемы, которые они представляют сами по себе должны быть минимальны. Любые непонятные моменты вызывают смущение.Язык должен быть отлаживаем. Если что-то идёт не так, программист обязан это починить, и нам нужна вся помощь, которую мы можем получить.Моя позиция такова:PHP полон сюрпризов: , PHP не целостен: , PHP требует шаблонного кода: проверка ошибок вокруг «C API»-вызовов, PHP чудной: , PHP непрозрачен: без стэктрэйсов по умолчанию и фатальных ошибок, сложный error reporting.Я не могу привести абзац для каждой проблемы, описывающий почему каждая конкретная проблема попадает в эти категории, статья будет бесконечной. Я верю, что читатель, как бы, думает.Не нужно следующих комментариевЯ участвовал во многих спорах о PHP. Слышал много общих контраргументов на самом деле предназначенных, чтобы закрыть тему. Пожалуйста воздержитесь от них :(Не говорите мне, что «хорошие разработчики могут писать хороший код на любом языке», или что «плохие разработчики что-то там ещё». Это ничего не значит. Хороший плотник может забить гвоздь камнем или молотком, но где вы видели плотников забивающих что-либо камнями? Один из факторов, определяющих хорошего разработчика, это способность выбрать подходящие инструменты.Не говорите мне, что разработчик обязан помнить тысячи странных исключений и неожиданных поведений. Да, это обязательно в любой системе, потому что компьтеры сосут. Только это не значит, что нет верхнего предела фигни в системе. В PHP нет ничего кроме исключений, и это не круто, если борьба с языком занимает больше усилий нежели написание самой программы. Мои инструменты не должны создавать мне не позитивную работу.Не говорите мне, что «так работает C API». Какой вообще тогда смысл использовать высокоуровневый язык, если он даёт только строковые хэлперы и массу дословных C обёрток? Просто пишите на C! Смотрите, для него даже есть CGI-библиотека.Не говорите мне: «Это тебе за то, что делаешь странные вещи». Если две фичи существуют, кто-нибудь когда-нибудь обязательно найдёт причину использовать их вместе. И снова, это не C: спецификации нет, как нет и надобности в «неопределённом поведении».Не говорите мне, что Facebook или Wikipedia написаны на PHP. Я в курсе! Они так же могли бы быть написаны на Brainfuck'е, достаточно умные люди могут пересилить это всё. Всё, что мы знаем, это то, что время разработки могло быть ополовинено или удвоенно если бы эти продукты были написаны на каком-нибудь другом языке; только этот отдельный аргумент ничего не значит.В идеале вы не должны говорить мне ничего! Это мой лучший выстрел; если он не изменит мнения о PHP, тогда его не изменит ничто, так что хорош уже спорить с каким-то чуваком в Интернете и иди уже сделай крутой сайт в рекордные сроки, чтобы доказать, что я не прав :)Кстати: я обожаю Python. И с удовольствием прожужжу тебе уши, ноя о нём, если ты на самом деле этого хочешь. Я не утверждаю, что он идеален; я просто взвесил его преимущества и его проблемы и сделал вывод, что он лучше всего подходит для того, что я делаю.И я никогда не встречал PHP-разработчика, который может сделать тоже самое на PHP. Но я натыкался на достаточное количество тех, кто сразу начинает извинятся за что-то и всё, что делает PHP. Такое мышление ужасает.PHPЯдро языкаCPAN был назван «стандартной библиотекой Perl». Это не говорит много о стандартной библиотеке Perl, но указывает, что прочное ядро может построить замечательные вещи.ФилософияPHP изначально создавался для непрограммистов(и если читать между строк не для программ); он не смог уйти от своих корней. Вот из документации по PHP 2.0 цитата о том, как делался выбор относительно приведения типов для  и прочих:Отдельные операторы для каждого типа сильно усложняют язык, например, вы больше не сможете использовать '==' для строк(что?), вы теперь будете использовать 'eq'. Я не вижу в этом никакого смысла, особенно в таком языке как PHP, где большинство скриптов будут достаточно простыми и в большинстве случаев, написаны непрограммистами, которым нужен язык с простейшим логическим синтаксисом и низким порогом вхождения. PHP построен, чтобы продолжать фурычить при любых обстоятельствах. Если есть выбор между тем, чтобы сделать непонятно что и упасть с ошибкой, он сделает непонятно что. Что-нибудь лучше, чем совсем ничего.Дизайн не имеет определённой философии. Ранний PHP был вдохновлён Perl'ом; огромная std-библиотека с «out»-параметрами из C; ОО-часть сделана как в C++ и Java.PHP обширно черпает вдохновение из других языков, при этом ему удаётся быть непонятным для тех, кто эти языки знает.  выглядит как C, но  не существует. Нэймспэйсы используют . Новый синтаксис массивов получился уникальный среди всех языков с хэш-литералами: .Слабая типизация(всмысле, тихая автоматическая конверсия между строками/числами/всем остальным) настолько сложная, что она не стоит того, сколько бы усилий начинающего программиста она не сохраняла.Новая функциональность реализуется как новый синтаксис, даже если она мала; большинство её делается с помощью функции или чего похожего на функции. Кроме поддержки классов, которая заслуживает множества новых операторов и ключевых слов.Некоторые из проблем, описанных в этой статье на самом деле имеют первоклассное решение — если конечно вы хотите платить Zend'у за фиксы к их языку с открытыми исходниками.Целая куча событий происходит за сценой. Взять хотя бы вот этот код, откуда-то из PHP-документации:Что он будет делать?Если PHP скомпилирован с , он не будет работать. (Документация не говорит, что означает «не будет работать»; вернёт null, бросит исключение?) Заметьте, что этот флаг убрали в PHP 5.2.5.Если  выключен в php.ini, он тоже не будет работать. (Как не будет? Нет идей.)Из-за , предупреждение о несуществующем файле не будет выведено.Но будет выведено, если  установлен в php.ini.Или если  вручную установлен через .Но не в том случае, если не установлен корректный .Если оно будет выведено, куда оно будет выведено зависит от , снова в php.ini. Или .Я не могу сказать как такой безобидный вызов функции будет себя вести без проверки флагов времени компиляции, глобальной конфигурации сервера и конфигурации в моей программе. И это всё встроенное поведение.Этот язык полон глобального и неявного поведения.  использует глобальную кодировку.  и прочие вроде бы обычная функция, но оперирует над выполняемой в данный момент функцией. Обработка ошибок и исключений имеет глобальные умолчания.  устанавливает глобальную функцию, которая выполняется каждый тик — чего?!До сих пор нет поддержки потоков.(Неудивительно, учитывая вышеуказанное.) С отсутствием встроенного (упомянуто ниже), это очень усложняет парралельное программирование.Некоторые части PHP практически созданы для производства глючного кода:возвращает null для невалидного ввода, при том, что null — абсолютно верный объект для декодируемого JSON'а. Эта функция абсолютно ненадёжна, если вы конечно не вызываете каждый раз при её использовании.,  и другие похожие функции возвращают , если находят вхождение на нулевой позиции, но false если не находят его вообще.Дайте-ка мне чуть расширить последний пункт.В C, такие функции как  возвращают , если элемент не был найден. Если вы не проверите этот вариант и попытаетесь использовать результат в качестве индекса, вы попадёте в мусорную память и ваша программа упадёт. (Скорее всего. Это же C. Хрен его знает. Я уверен, что для этого как минимум есть инструменты.)В Python'е например эквивалентные методы  бросят исключение, если элемент не найден. Если вы не проверите этот случай, ваша программа упадёт.В PHP эти функции возвращают false. Если вы используете  как индекс, или сделаете с ним почти всё что угодно кроме сравнения с помощью , PHP спокойно сконвертирует его в  за вас. Ваша программа не упадёт; она вместо этого будет работать неправильно без предупреждения, если конечно вы не забудете вставить нужный шаблонный код вокруг каждого места где вы используете  и некоторые другие функции.Это плохо! Языки программирования — это инструменты; я предполагаю, что они будут работать вместе со мной. Здесь же, PHP поставил для меня хитрую ловушку, и должен быть осторожен даже с такими повседневными вещами как операции над строками и сравнения на равенство. PHP — минное поле.Я слышал много замечательных историй про PHP-интерпретатор и его разработчиков из разных замечательных мест. Они были от людей работавших над ядром PHP, отладкой ядра PHP и общавшихся с разработчиками ядра. Ни один из рассказов не был хвалебным.Итак я помещу это сюда, потому что я устал это повторять: PHP — это комьюнити любителей. Очень мало людей, которые его создают, работают над ним или пишут код на нём, вообще представляют, что они делают(о, дорогой читатель, вы конечно редкое исключение!). Те, кто начинают что-то понимать, сколонны уходить на другие платформы, снижая среднюю компетенцию общего числа. Видите, вот она самая большая проблема PHP: это абсолютно точно слепец ведомый слепцом.Окей, вернёмся к фактам.ОператорыбесполезенОн не транзитивен. , и … но, конечно же .конвертирует в число, если возможно. Далее конвертирует в float'ы, если возможно. Получается, что большие шестнадцатиричные строки(например, хеши паролей) могут неожиданно быть равными, когда они не равны.По тем же причинам, ,  и . Но прошу заметьте, что , потому что  восьмеричное.сравнивает значения и тип… но не для объектов, где  истинно если оба операнда один и тот же объект! Для объектов,  сравнивает оба значения(для каждого аттрибута) и типы, что  делает для всех остальных типов. Чего.Не лучше и сравнение:Оно даже не согласовано: , и . Сортировка не детерменирована; она зависит от порядка в котором, алгоритм будет сравнивать элементы.Операторы сравнения пытаются сортировать массивы, двумя разными способами: сначала по длине, затем по элементам. Вторая сортировка происходит, если у массивов одинаковое количество элементов, но разный набор ключей. По хорошему, такие массивы вообще нельзя сравнивать.Объекты при сравнении всегда больше всего остального… кроме других объектов, которые не больше и не меньше.Для более типобезопасного , у нас есть . Для типобезопасного  у нас… нет ничего. , всегда, что бы вы не делали.Вопреки вышеописанном безумию и чёткому отрицанию Perl'овых пар строковых и числовых операторов, PHP не перегружает ,  всегда сложение, а  всегда конкатенация.оператор индекса может также быть записан как .может быть применён к любой переменной, не только к строкам и массивам. Он возвращает null и не выдаёт предупреждение.не может слайсить; он только возвращает отдельные элементы.— синтаксическая ошибка. (Пофикшено в PHP 5.4.)В отличие от (почти) всех остальных языков с похожим оператором,  левоассоциативен. Поэтому следующий код:выведет .ПеременныеНет никакого способа объявить переменную. Переменные, которые не существуют создаются со значением null при первом использовании.Глобальные переменные должны быть объявлены с ключевым словом  перед использованием. Это естественное последствие предыдущего пункта, кроме того, что глобальная переменная даже не может быть прочитана без явного объявления — вместо этого PHP просто создаёт локальную переменную с таким же именем. Я не знаю другого языка с такими же проблемами с контекстом.Нет ссылок. То, что в PHP называется ссылками, это на самом деле псевдонимы; это шаг назад, прям как ссылки в Perl, не существует передачи через объект, как в Python.«Ссылочность» поражает переменные больше всего остального в языке. PHP — динамически типизированный, поэтому у переменных в общем случае нет типа… кроме ссылок, которые украшают определения функций, синтаксис переменных и присваивания. Как только переменная становится ссылкой(что может случится где угодно), она связана с этой ссылкой. Невозможно определить, случилось это или нет и для разыменования ссылки нужно полностью уничтожить переменную.Окей, я соврал. Есть \"SPL-типы\", которые тоже поражают переменные:Выполнение  завершится неудачей. Смотрите-ка, выглядит как статическая типизация.Можно получить ссылку на несуществующий ключ внутри неопределённой переменной(которая становится массивом). Использование несуществующего массива обычно выводит notice, но не в этом случае.Константы определяются с помощью вызова функции; до этого они не существуют. (Возможно, это копия Perl-поведения .)Имена переменных чувствительны к регистру. Имена функций и классов нет. Включая имена методов, что делает camelCase не лучшим выбором именования.Конструкциии пару дюжин других конструкций — не функции. Сама по себе конструкция  не означает ничего,  не работает.Распаковка массивов может быть выполнена операцией .  — синтаксис похожий на функцию так же как . Я не знаю почему для этого был выделен отдельный синтаксис или почему было выбрано такое смутное имя.очевидно создан, чтобы выглядеть как C, но это отдельный токен; в языке нет никакого . Попробуйте:  не только не работает, но и выбрасывает parse error, потому что аргументы выглядит как оператор приведения типа.— синоним . Ещё есть / и //.Есть оператор  для приведения к массиву и оператор  для приведения к объекту. Звучит безумно, но у них есть применение: вы можете использовать  для создания функции с аргументом, который может списком либо одним его элементом, чтобы работать с ним одинаково. Кроме того, что вы не можете сделать это надёжно, потому что если кто-то передаст отдельный объект, приведение его к массиву выдаст массив состоящий из аттрибутов объекта. (Приведение к объекту выполняет обратную операцию.)и прочие это просто C-шный : она дампит другой исходный файл в ваш. Нет системы модулей, даже для PHP-кода.Вложенных классов и функций не существует. Только глобальные.  файла дампит переменные из этого файла в текущий контекст функции (и даёт файлу доступ к вашим переменным), но классы и функции дампятся в глобальный контекст.Добавление в массив выполняется .— выражение, а не функция.настолько не функция, что что угодно кроме переменной, как например  приводит к parse error'у. Почему вообще парсеру нужно что-то знать о ?Существует избыточный синтаксис для блоков:  и др.Обработка ошибокЕщё один уникальный оператор PHP (на самом деле взятый из DOS) заглушает ошибки.У ошибок PHP нет стэктрэйсов. Вы должны установить обработчик, чтобы их генерировать. (Но вы не можете для fatal error'ов — см. ниже.)Parse error'ы PHP часто просто выплёвывают состояние парсера и больше ничего, жутко усложняя отладку, если вы где-то забыли кавычку.Парсер PHP внутри ссылается на  как на , и на  как на . Я сказал «внутри», но как указано выше это то, что показывается программисту, когда  или  встречается в неверном месте.Большая часть обработки ошибок состоит в выводе строчки в лог сервера, который никто не читает и не интересуется.Уровень  как раз то, что нужно, но похоже он на самом деле предотвращает немногое и нет документации, что он на самом деле делает.включает все категории ошибок — кроме .Жутко много противоречий о том, что разрешено, а что нет. Я не знаю, как  к этому применяется, но следующее делать можно:пытаться получить доступ к несуществующему свойству объекта, типа .(warning)использовать переменной как имени функции, или имени переменной, или имени класса.(без сообщений)пытаться использовать неопределённую константу.(notice)пытаться получить доступ свойство чего-нибудь, не являющегося объектом.(notice)пытаться использовать имя переменной, которая не существует.(notice)(без сообщений)(warning)А это нельзя:пытаться получить доступ к несуществующей константе класса, типа . (fatal error)использовать константной строки как имени функции, имени переменной или имени класса. (parse error)пытаться вызвать неопределённую функцию. (fatal error)оставлять точку с запятой в конце блока или файла. (parse error)использовать  и разные другие квазиконструкции как названия методов. (parse error)индексировать возвращаемое функцией значение, типа . (parse error, пофикшено в 5.4, см. выше)Во всём этом списке есть ещё несколько хороших примеров странных parse error'ов.Метод  не может бросать исключения. Если вы попробуете PHP… эм, бросит исключение. (На самом деле fatal error, который снова в отличие от всех остальных можно передавать.)PHP-ошибки и PHP-исключения абсолютно разные существа. Они, похоже, не могут взаимодействовать никак.PHP-ошибки (внутренние и вызванные через ) не могут быть словлены блоком /.Точно так же, исключения не приводят к вызову обработчиков установленных через .Вместо этого, есть отдельная функция  которая обрабатывает не пойманные исключения, потому что обернуть входную точку вашей программы в блок  невозможно в модели .Fatal error'ы (типа ) не могут быть пойманы ничем. Многие вполне невинные вещи бросают fatal error'ы, принудительно завершая вашу программу по сомнительным причинам. Shutdown-функции всё ещё вызываются, но они не могу получить стэктрэйс (потому что выполняются на верхнем уровне), и в них не так просто определить завершилась ли ваша программа с ошибкой или выполнилась до конца.Нет конструкции , создание wrapper-кода(установил обработчик, выполнил код, убрал обработчик; манкипатч, проверил, разманкипатчил) утомительно и сложно для написания. Несмотря на то, что объектная модель и исключения в многом скопированы из Java, это было сделано намеренно, потому что  «не имеет большого смысла в контексте PHP». Да ну?ФункцииВызовы функций явно достаточно дорогие.Некоторые встроенные функции взаимодействуют с функциями возвращающими ссылки, скажем так, странно.Как я замечал ранее, некоторые вещи, похожие на функции или похожие на то, что должно быть функцией на самом деле конструкции языка, поэтому всё, что работает с функциями не будет работать с ними.Аргументы функций могут иметь «type hint'ы», это попросту статическая типизация. Но вы не можете требовать от аргумента быть  или  или  или другим примитивным типом, хотя каждая встроенная функция использует эти типы, наверное потому что  в PHP не существует.(про  см. выше) Вы также не можете использовать специальные псевдо-типы используемые повсеместно во встроенных функциях ,  или .В результате, следующий код:Выводит ошибку:Вы можете заметить, что указанного «type hint'а» не должно здесь быть. В этой программе нет класса . Если вы воспользуетесь , чтобы исследовать type hint динамически, он упрётся в несуществующий класс, делая невозможным получение имени класса.Type hint не может быть применён к возвращаемому функцией значению.Передача аргументов функции в другую функцию(dispatch, не такая уж и редкость) делается через . Но  выбрасывает fatal error в рантайме, жалуясь, чтом  не может быть параметром функции. Как и почему такая ошибка вообще существует? (Пофикшено в PHP 5.3.)Замыкания требует явного указания всех замыкаемых переменных. Почему интерпретатор сам не может это определить? Калечит всю фичу. (Окей, потому что любое использование переменной переменной, абсолютно любое, создаёт её, если обратное явно не указано.)Замыкаемые переменные «передаются» с той же семантикой как остальные аргументы функции. Вот так, массивы, строки и пр. будут переданы по значению. Если не используете .Т.к. замыкаемые переменные фактически автоматически передаваемые аргументы и нет вложенных контекстов, замыкание не может использовать private-методы, даже если оно определено внутри класса. (Возможно пофикшено в 5.4? Не уверен.)Нет именованных параметров функций. На самом деле явно отклонено разработчиками, потому что «ведёт к беспорядочному коду».Аргументы со значениями по умолчанию могут быть перед аргументами без них, не смотря на то, что в документации указано, что это странно и бесполезно. (Зачем тогда это позволять?)Лишние аргументы игнорируются(кроме лишних аргументов встроенных функций, они вызывают ошибку). Недостающие аргументы предполагаются равными null.Функции с переменным числом аргументов требуют возни с ,  и . Для этого нет синтаксиса.ООПФункциональные части PHP сделаны как в C, а объектные как в Java. Даже не могу сказать, как меня это раздражает. Я не нашёл ни одной глобальной функции с заглавной буквой в имени, в то время как важные встроенные классы используют camelCase для имён методов и аксессоры  в Java-стиле. Это динамический язык, верно? Perl, Python и Ruby: у каждого из этих языков есть какуя-либо концепция доступа к «свойству» из кода; у PHP же только неуклюжий  и прочие. Система классов создана вокруг более низкоуровневого языка Java, который естественно и намеренно более ограничен, чем языки-современники PHP, я сбит с толку.Классы не объекты. Любой метакод вынужден ссылаться на них по имени, как в случае с функциями.Встроенные типы не объекты и (не как в Perl) никоим образом не могут быть представлены ввиде объектов.оператор, несмотря на то, что классы были добавлены достаточно поздно и что большая часть языка построена на функциях и функционном синтаксисе. Влияние Java? Классы не first-class объекты?Но существует функция . С необязательным аргументом указывающим разрешать ли объекту быть строкой, содержащей имя класса.тоже функция; нет оператора . Также как и оператора .Тем не менее,  не работает для встроенных типов (снова,  не существует). Для этого случая вам нужен  и пр.И ещё правая часть должна быть переменной или литеральной строкой; не может быть выражением. Это приводит к… parse error'у.— оператор?!ООП-дизайн представляет из себя жуткую мешанину Java и Perl.Синтаксис аттрибутов объектов , а аттрибутов классов . Я не в курсе есть ли другой язык в котором сделано так же или какую пользу это приносит.Также метод экземпляра может быть вызван статически (). Такой вызов сделать в другом методе(пер. или даже другом классе) трактуется как обычный вызов метода в текущем ., , , ,  и пр. Хотели привлечь Java-разработчиков? Я в курсе, что это дело вкуса, но я не понимаю зачем это обязательно в динамическом языке — это нужно в C++ в основном для компиляции и разрешения имён во время компиляции.Подклассы не могут перегружать private-методы. Перегруженные публичные методы подкласса даже не видят private-методы, кроме того, что не могут вызывать. Создаёт проблемы, например, при написании тест-моков.Методы не могут называться, например «list», потому что  — специальный синтаксис(не функция) и парсер начинает путаться. Для такой неоднозначности нет никакой причины, и всё работает при динамической модификации(пер. monkeypatching).( не приводит к ошибке синтаксиса.)Если при вычислении аргументов конструктора бросается исключение(например  и  бросает исключение), конструктор не будет вызван, а деструктор будет.(Пофикшено в PHP 5.3.)Исключения в  и деструкторах вызывают fatal error.Нет никаких конструкторов и деструкторов.  — это инициализатор, как  в Python. Нет метода при вызове, которого выделится память и будет создан объект.Нет инициализатора по умолчанию. Если суперкласс не определяет собственный , Вызов  приводит к fatal error'у.ООП также вводит интерфейс итераторов, который учитывают некоторые части языка(типа ), но ни одна встроенная сущность(такая как массивы) этот интерфейс на самом деле не реализует. Если вам нужен итератор массива, вам приходится оборачивать его в . Нет встроенной поддержки сцепления, slice'инга и чего-либо ещё для работы с итераторами, как «first class»-объектами.Классы могут перегрузить то, как они конвертируются в строки и как они ведут себя будучи вызванными, но не как они конвертируется в числа и другие встроенные типы.Есть конверсия в строки для Строк, чисел и массивов; язык на это очень полагается. Функции и классы тоже строки. Тем не менее конверсия встроенного или определённого пользователем объекта(и даже замыкания) в строку вызывает ошибку, если объект не определяет . Даже  становится потенциально склонен к ошибке.Нет перегрузки сравнения и последовательности(пер. ordering).Статические переменные внутри методов экземпляра глобальны; одно значение на все экземпляры класса.Стандартная библиотекаФилософия стандартной библиотеки Perl «some assembly required»(пер. возможный перевод «понадобится некоторая сборка»), Python — «батарейки в комплекте», PHP — «раковина, но канадская с подписью C на обоих кранах».Общие замечанияНет системы модулей. Вы можете компилировать расширения PHP, но какие из них загружать указывается в php.ini, и у вас только две опции: расширение существует(и вносит своё содержимое в глобальное пространство имён) или нет.Стандартная библиотека не разбита на namespace'ы, поскольку они были добавлены недавно. В глобальном пространстве имён тысячи функций.Части библиотеки дико противоречат друг другу:Подчеркивание против его отсутствия: /, /, /, /«to» против 2: , , , , объект+действие против действие+объект: , ,  versus , Порядок аргументов:  против ,  против Путаница с префиксами:  против Варьируется положение  в именах функций, нечуствительных к региструОколо половины имен функций работы с массивами начинаются с . Другая половина нет.Раковина. Библиотека включает:Байндинги для ImageMagick, байндинги для GraphicsMagick(это форк ImageMagick), и пригорошню функций для чтения EXIF-данных(что и так умеет делать ImageMagick).Функции для парсинга bbcode'а, специального маркапа используемого горсткой некоторых форумных пакетов.Слишком много разных XML-пакетов. (объектно-ориентированный), (не объектно-ориентированный), , , «XML Parser», / и ещё полдюжины акронимов, которые я не могу разобрать. Между ними точно есть какая-то разница, идите и узнайте её сами.Байндинги для двух отдельных процессоров кредитных карт: SPPLUS и MCVE. Зачем?Три способа доступа к базе MySQL: ,  и абстракция .Влияние CОно заслуживает отдельного пункта в этом списке, потому что оно настолько абсурдно и при этом пронизывает язык вдоль и поперёк. PHP — высоко-уровневый, динамически-типизированный язык. В то же время большая часть стандартной библиотеки представляет из себя тонкую обёртку вокруг C API, со следующими результатами:«Выходные» параметры, не смотря на то, что PHP вполне способен возвращать специальные хэши или несколько аргументов без особых усилий.Как минимумум дюжина функций для получения последней ошибки определённой подсистемы(см. ниже), хотя исключения существуют в PHP уже восемь лет.Бородавки типа , несмотря на то, что у неё такие же аргументы как и у сломанной , просто потому что это часть MySQL C API.Глобальное поведение для неглобального функционала (например MySQL). Использование нескольких подключений MySQL требует передачи дескриптора подключения в каждый вызов функции.Врапперы очень, очень и очень тонкие. Например вызов  без вызова  упадёт с segfault'ом.Набор функций (типа ) называется в соответствии C-функциям определения класса символа с похожими именами, вместо того, чтобы называться, например .ОбобщенияНет никаких обобщений. Если вдруг функции нужно делать две немного разные вещи, в PHP для этого две функции.Как сортировать в обратном порядке? В Perl, вы можете сделать . В Python . В PHP, это отдельная функция .Функции получения C-ошибки: , , , , , , ,  и другие.Функции сортировки: , , , , , , , , , , Функции для текстового поиска: , , , , , , , , , , , , , ,  плюс вариации, выполняющие подстановки.К тому же куча бесполезных псевдонимов: /, //, /, /, /, /, /, /, /...возврщает список файлов в текущей директории. Вместо того, чтобы возвращать сначала директории(что могло бы быть полезно), функция возращает их в алфавитном порядке. Необязательный аргумент позволяет получить их в обратном алфавитном порядке. Очевидно, функций сортировки было недостаточно.разбивает строку на равные по длине части.  разбивает строку на части одинаковой длины и объединяет их через разделитель.Для каждого формата архивов используется отдельный набор функций. Всего шесть груп таких функций, с разным API, для bzip2, LZF, phar, rar, zip и gzip/zlib.Т.к. вызов функции с массивом аргументов настолько неудобен(), есть несколько пар функций типа / и /. Они делают одно и то же только одна принимает аргументы, а другая массив аргументов.Текстс флагом (eval) выполняет подстановку соответствий на строку подстановки, затем eval'ит эту строку.очевидно создана по образу C-функции, которая считается неудачной по разным причинам. Неважно, что PHP мог бы легко возвращать массив(в C это не так просто), и что хак, используемый (модификация строки на месте) в PHP не используется.парсит строку GET-запроса, не указывая этого в имени. Также она ведёт себя как  и дампит запрос в виде переменных в локальный контекст, если вы не передадите ей массив для наполнения. (Она, конечно, ничего не возвращает.)отказывается разбивать с пустым разделителем. Любая другая реализация разбиения строки где угодно воспринимает это как разбиение посимвольно; в PHP для этого отдельная функция, непонятно названная  и описанная как «конвертирующая строку в массив».Для форматирования дат, используется , которая ведётся себя как C API и учитывает локаль. Ещё есть  с абсолютно другим синтаксисом и работающая только с английским.\" — Получить строку из указателя на gz-файл и вырезать HTML-тэги.\" До смерти хочу узнать какие обстоятельства привели к концепции этой функции.Всё дело о «много-байтовости», в то время как проблема в кодировках.Работает с обычными строками. Использует одну глобальную кодировку «по умолчанию». Некоторые функции позволяют указание кодировки, но она применяется ко всем аргументам и возвращаемому значению.Предоставляет функции , но они устарели. Функциям  не повезло, тем не менее они могут понимать UTF-8, если скормить им кое-какие специфические флаги PCRE.Система и reflectionВообще целая куча функций стирает грань между текстом и переменными.  и  — только вершина айсберга.Существует несколько способов для динамики в PHP, и с первого взгляда нет никакой заметной разницы или опредёлнных приемуществ.  позволяет модифицировать ползовательские классы,  заменяет  и позволяет модифицироет что угодно пользовательское; -классы позволяет инспектировать большинство частей языка; очень много функций для работы со свойствами функций и классов. Эти подсистемы независимы, связаны, избыточны?возвращает имя класса объекта.  возвращает имя класса, в котором вызвана функция. Принимая это во внимание, функция делает две абсолютно разные вещи: … ведёт себя так же, как . Поэтому вы не можете доверять ей при передаче произвольного объекта. Сюрприз!Классы  позволяют реализовывать пользовательские потоковые объекты и прочие встроенные файловые сущности. «tell» не может быть реализован по внутренним причинам. (К тому же в эту систему вовлечена цела ГОРА функций.)принимает объект замыкания.  нет; вместо этого она бросает ошибку, жалуясь, что замыкание не может быть сконвертировано в строку.сообщает о текущей OC. Не в том случае, если PHP не может сказать, где он выполняется; тогда он сообщает на какой ОС он был собран. Произошло ли это не сообщается.и  не встроены. Они идут с расширением pcntl, но оно не включено по умолчанию.  не предоствляет pid.читает произвольную строку сессии, но работает только если уже есть активная сессия. И дампит результат в , вместо того, чтобы его возвращать.Разноене изменяет  в случае ошибки, но изменяет .Аргументы  идут в следующем порядке: час, минута, секунда, месяц, день, год.Манипуляция даннымиПрограммы ничто иное кроме как большие машины поглощающие данные и выплёвывающие больше данных. Очень много языков созданы вокруг типов данных, которыми они манипулируют, от awk до Prolog и C. Если язык не может обрабатывать данные, он не может ничего.ЧислаЦелые — знаковые и 32-битные на 32-битных платформах. В отличие от современников PHP, в нём нет автоматической конверсии в большое целое. Так что ваша математика может работать по разному в зависимости от архитектуры процессора. Единственная альтернатива использовать функции обёртки GMP или BC. (Разработчики предложили добавить новый отдельный 64-битный тип. С ума сошли.)PHP поддерживает восьмеричный синтаксис с ведущим , так что  будет числом десять. Однако,  будет числом ноль. (или ) и остальные следующие цифры исчезают.  ошибка синтаксиса.— функция. А ещё есть константа, .Нет оператора возведения в степень, только функция .ТекстНет поддержики юникода. Надёжно работает только ASCII, честно. Есть вышеупомянутое расширение , но оно как бы не работает.Это означает, что использование встроенных строковых функций с UTF-8-текстом создаёт риск их порчи.Точно также нет концепции типа сравнения регистра вне ASCII. Несмотря на распространённость нечуствительных к регистру версий функций, ни одна из них не считает  равным .Ключи нельзя квотировать при интерполяции переменных, например  — ошибка синтаксиса. Вы может не квотировать ключи(будет сгенерировано предупреждение) или использовать /.работает.  — синтаксическая ошибка. Работает, если внести  внутрь фигурных скобок. Плохо скопированный синтаксис Perl(с абсолютно другой семантикой)?МассивыЁ моё.Этот тип данных ведёт себя как список, упорядоченный хэш, упорядоченный набор, разреженный список и время от времени как их странные комбинации. Какая его эффективность? Каков будет расход памяти?(пер. анализ расхода памяти для массивов) Кто знает? У меня всё равно нет других вариантов.— не оператор. Это специальная конструкция, существующая только внутри конструкций  и .Отрицательные индексы не работают, т.к.  точно такой же валидный ключ как и .Несмотря на то, что это единственная структура данных языка, для неё нет короткого синтаксиса;  — это короткий синтаксис. (PHP 5.4 вводит «литералы», .)Конструкция  базируется на Perl, который позвляет  без квотирования(вот почему конструкция существует Perl; иначе вы можете просто использовать запятую.) В PHP вы не можете так сделать не получив предупреждение; PHP — единственный язык в своей нише, в котором нет проверенного способа создать хэш без квотирования строковых ключей.Функции работы с массивами часто ведут себя смутно и противоречиво, потому что вынуждены оперировать списками, хэшами или возможно их комбинацией. Взять хотя бы , «вычисляющий разность массивов».Что будет делать этот код? Если  воспринимает аргументы, как хэши тогда очевидно они разные; одинаковые ключи с разные значения. Если аргументы воспринимаются как списки, тогда они всё равно разные; значения идут в разном порядке.Фактически  признаёт массивы равными, потому что он воспринимает их как наборы; она сравнивает только значения и игнорирует порядок.В той же мере  странно ведёт себя выбирая случайные ключи, что не так полезно в общем случае выбора из списка вариантов.Несмотря на то, как сильно PHP-код полагается на сохранение порядка ключей:Оставляю читателю узнать, что случится если массивы смешанные. (Я сам не знаю.)не может создавать массивы нулевой длины, вместо этого она выдаст предупреждение и вернёт false.Все из (многих...) функций сортировки оперируют массивом на месте и ничего не возвращают. Нет способа создать отсортированную копию; вы вынуждены копировать массив сами, затем сортировать его и использовать.Но  возвращает новый массив.Список отсортированных сущностей и ключи поставленные в соответстивие значениям звучат как отличный способ обрабатывать аргументы функций, но это не так.НемассивыСтандартная библиотека включает «Quickhash», ООП-реализацию «специфических строго-типизированных классов» для создание хэшей. И на самом деле предоставляет четыре класса, каждый для работы с различными комбинациями типов ключей и значений. Непонятно, почему встроенная реализация массивов не может быть оптимизирована для этих очень частых случаев, и какова относительная эффективность «Quickhash».Класс (реализующий пять различных интерфейсов) может оборачивать массив и позволяет ему вести себя как объект. Пользовательские классы могут реализовывать те же интерфейсы. Беда в том, что у класса жалкая горстка методов, половина которых не похожа на встроенные функции, к тому же встроенные функции не умеют оперировать 'ом или другим похожим на массив классом.ФункцииФункции — не данные. Замыкания всё-таки объекты, но обычные функции нет. Вы даже не можете ссылаться на них по их прямым именам;  вызывает предупреждение и предполагает, что вы имели ввиду строковый литерал, . Нельзя отличить произвольную строку от «ссылки» на функцию.просто обёртка вокруг . Она создаёт функцию с обычным именем и устанавливает её глобально(поэтому эта функция никогда будет собрана сборщиком мусора — не используйте в цикле!). Она на самом деле ничего не знает а текущем контексте, поэтому это не замыкание. Имя содержит NUL-байт, поэтому такая функция никогда не конфликтует с обычными функциями(потому что PHP-парсер отказывает, если где угодно в файле есть ).Если определить функцию ,  сломается — на самом деле реализация создаёт через  функцию с именем , затем внутренними методами переименовывает её. Если  уже существует, первая часть процесса бросит fatal error.ПрочееИнкремент () 'а выдаёт . Декремент () 'а выдаёт . Более того декремент строки оставляет её неизменной.Нет генераторов.Web-фрэймворкВыполнениеОдин общий файл,  контролирует огромную часть функционала PHP и вводит сложные правила относительно того, что и когда перегружается. PHP-приложение которое предполагает внедрение на произвольных машинах вынужден в любом случае заменять настройки, чтобы нормализовать окружение, в любом случая уничтожая полезность такой механики как .По существу PHP выполняется как CGI. При каждой загрузке PHP-страницы всё приложение перекомпилируется и выполняется. Даже дев серверы для игрушечных Python-фрэймворков так себя не ведут.Это создало целый рынок «PHP-акселераторов», выполняющий компиляцию единожды, ускоряя PHP до уровня любого другого языка. Zend, компания, стоящая за PHP, сделала это частью своей бизнес-модели.Достаточно долгое время PHP-ошибки по умолчанию шли на клиент — думаю, чтобы для помощи при разработке. Не думаю, что это до сих пор верно, но я всё ещё время от времени вижу mysql-ошибки, выпадающие наверху страницы.PHP всё ещё полон странных «пасхальных яиц» типа выдачи логотипа PHP при передаче соответствующего аргумента в запросе. Кроме того, что это никак не связано с построением вашего приложения, это ещё и позволяет определить используете ли вы PHP(и возможно грубо определить какую версию), в не зависимости от того как много конфигурации в ваших , FastCGI, обратном проксировании или .Пробелы вне тэгов , даже в библиотеках, считаются текстом и включаются в ответ(или приводят к ошибкам «headers already sent»). Популярный фикс — не указывать закрывающий ; PHP не жалуется и у вас нет завершающей новой строки в конце файла.ВнедрениеВнедрение часто упоминается как наибольшее преимущество PHP; сбросьте несколько файлов и всё. В самом деле это проще, чем выполнение целого процесса, как вы делали бы в Python, Ruby или Perl. Но PHP не даёт много другое.Со своей стороны я за то, чтобы Web-приложения выполнялись как сервера приложений и запросы реверс-проксировались к ним. Это требует минимальных усилий и даёт множество выгод: вы можете управлять Web-сервером и приложением отдельно, вы может выполнять сколь угодно много или мало процессов приложения на сколь угодно большом количестве машин без дополнительных Web-серверов, вы можете выполнять приложение под собственным пользователем без усилий, вы можете использовать любой Web-сервер, вы можете остановить приложение, не прикасаясь к Web-серверу, вы можете выполнять бесшовное внедрение просто изменив точку проксировния и пр. Спаивать ваше приложение с Web-сервером абсурдно и больше нет причин так делать.PHP естественно связан с Apache. Выполнение его по отдельности или с другим Web-сервером требует точно такой же(если не больше) возни как и в других языках.применяется ко всем PHP-приложениям, выполняющимся на машине. Есть только один файл  и он применяется глобально; если вы на shared-сервере и вам нужно его изменить, или вам нужно выполнять два приложения с различными настройками, тогда вам не повезло; вы должны применять набор всех нужных настроек из самого приложения через , конфигурационный файл Apache или . Если можете. Вау, нужно проверить много мест, чтобы определить как же настройка получает своё значение.Подобным образом нет простого способа «отделить» PHP-приложение и его зависимости от остальной системы. Выполняете два приложения, требующие разных версий библиотеки или даже самого PHP? Начните со сборки второй копии Apache.Подход «сбрось несколько файлов» между прочим делает routing жуткой болью в заднице, также это значит что вы должны осторожно разрешать и запрещать доступ, потому что ваша иерархия URL'ов, также весь ваш код. Конфигурационные файлы и другие «partial'ы» требуют защитных проверок как в C, чтобы избежать их прямой загрузки. Шум контроля версий (типа ) должен быть также защищён. С  всё в вашей файловой системе потенциальная входная точка; с сервером приложений, у вас одна входная точка, и только URL контролирует вызывается ли она.Вы не можете бесшовно обновить несколько файлов выполняемых как CGI, если вы не хотите падений и неопределенных поведений, когда пользователи пинают ваш наполовину обновлённый сайт.Не смотря на то, как просто настроить Apache для выполнения PHP, даже здесь вас поджидает несколько коварных ловушек. В то время, как документация PHP советует использовать  для запуска -файлов как PHP,  работает так же хорошо, и на самом деле Google выдаёт мне в два раза больше результатов для . Собственно проблема.Когда вы используете , вы указываете Apache, что «выполнение следующего как php» — один из возможных способов обработки -файлов. Но! Apache не одного и того же мнения о расширениях файлов, как каждый человек на планете. В нём есть поддержка, например, , распознаваемого как HTML-файла на английском. Для Apache файл может иметь сколько угодно расширений одновременно.Представьте, что у вас есть форма загрузки файлов, которая выгружает файлы в публичную директорию. Чтобы быть уверенными, что никто не загрузит PHP-файл, вы просто проверяете, что расширение файлов не . Всё, что атакующий должен сделать это загрузить файл с именем ; загрузчик не увидит никаких проблем, но Apache будет распознавать файл как PHP, и он выполнится.Проблема не в том, что «используется исходное имя файла» или «надо было лучше валидировать»; проблема в том, что ваш Web-сервер, настроен выполнять любой старый код, на который он может наткнутся — именно это свойство делает PHP «простым для внедрения». CGI требовал , это хотя бы что-то, но PHP не требует даже этого. И это не теоретическая проблема; я нашёл несколько сайтов с этой проблемой.Чего не хватаетЯ предполагаю следующее с различными уровнями критичности для построения Web-приложения. Имело бы смысл в PHP, как языке, продаваемом как «Web-язык», реализовать что-нибудь из нижеуказанного.Нет системы шаблонов. Есть сам PHP, не нет ничего что бы работало как большой интерполятор, вместо того, чтобы работать как программа.Нет XSS-фильтра. Нет, «используй » — не XSS-фильтр. Вот это XSS-фильтр.Нет CSRF-защиты. Вы должны делать её сами.Нет обобщённого стандартного API для баз данных. Штуки, типа PDO, вынуждены оборачивать отдельные API для абстракции.Нет routing'а. Ваш сайт выглядит так же как ваша файловая система. Многие разработчики обмануты, думая, что  (и весь остальной ) подходящая замена.Нет аутентификации или авторизации.Нет дев сервера.Нет интерактивной отладки.Нет явного механизма внедрения; только «скопируйте вот эти файлы на сервер».БезопасностьВ рамках языкаПлохая репутация безопасности PHP в основном связана с тем, что он принимает произвольные данные из одного языка и выдаёт их в другой. Это плохая мысль.  ничего не значит в SQL, но точно значит в HTML.Ещё хуже становится от крика об «очистке входных данных». Это полностью неверно; нет в природе волшебной палочки, взмахнув которой вы делаете кусочек данных «чистым». Что нужно делать так это говорить на нужном языке: использовать placeholder'ы в SQL, использовать списки аргументов при создании процессов и пр.PHP открыто поощряет «очистку»(пер. sanitizing): для этого есть целое расширение для фильтрации данных.Все эти ,  и прочая слэш-фигня — отвлекающий манёвр, который ничего не даёт.Как я знаю, нет способа безопасно создать процесс. Можно ТОЛЬКО выполнить строку через шэл. Вы можете экранировать как сумасшедший и надеяться, что шэл по умолчанию использует верное экранирование; либо вручную делать  и .Две функции  и  имеют почти одинаковые описания. Заметьте, что для Windows,  не работает (т.к. предполагает семантику Bourne shell), а  просто заменяет пачку пунктуаций на пробелы, потому что никто не может понять экранирование Windows cmd (который может тихо упасть вне зависимости от того, что вы пытаетесь сделать).Оригинальные встроенный MySQL-байндинги, до сих пор широко используемые, не могут создавать prepared statement'ы.По сей день PHP-документация по SQL-инъекциям рекомендует сумасшедшие практики типа проверки типов, используя  и , везде вручную используя , или везде вручную используя  (которая «может быть полезна»!). PDO или параметризация даже не упоминаются, кроме как в пользовательских комментариях. Я пожаловался на это конкретное место разработчикам PHP минимум два года назад. Да, разработчики были встревожены… страница не обновлена до сих пор.Небезопасны по умолчанию. Его выключили по умолчанию достаточно давно, и он пропал в PHP 5.4. Мне пофигу. Это помеха.разрешает HTTP URL'ы. Туда же.Magic quotes. Так близки к безопасности по умолчанию, и всё же слишком далеки от правильного понимания самой концепции.ЯдроИнтерпретатор PHP сам по себе содержал просто очаровательные проблемы безопасности.В 2007 в интерпретаторе была уязвимость переполнения целого. Фикс начался с  и покатился по наклонной. (Для тех, кто не в курсе C:  самое большое целое, которое может уместится в переменную, вообще. Я думаю, дальше вы поняли.)Чуть позже, в PHP 5.3.7 умудрились включить функцию , которая фактически позволяла зайти кому угодно с каким угодно паролем.PHP 5.4 уязвим к отказу в обслуживании, т.к. он берёт заголовок  (который кто угодно может установить в любое значение) и пытается создать массив переданного размера. Это плохая мысль.Я мог бы раскопать ещё что-нибудь, но дело не в том, что есть X эксплойтов — в софте бывают баги, это случается, так или иначе. Их природа шокирует. Я ведь даже не ищу их; это то, что упало мне на порог в последние пару месяцев.ЗаключениеНекоторые комментаторы справедливо указали, что у меня нет заключения. И да, у меня нет заключения. Если вы до сюда дочитали, я предполагаю, вы были согласны со мной с самого начала :)Если вы знаете только PHP и вам любопытно научиться чему-то ещё, гляньте учебник по Python и попробуйте Flask для Web'а. (Я не большой фанат их языка шаблонов, но он делает своё дело.) Он разделяет части вашего приложения, но это всё ещё те же самые исходные части и они должны быть похожи на то, что вы видели до этого. Я, возможно, напишу настоящий пост об нём; ураганное введение в целый язык и web-стек — тема для другой статьи.Позже и для больших проектов вы можете попробовать средне-уровневый Pyramid или Django, сложный монстр, хорошо подходящий для построения сайтов, похожих на сайт самого Django.Если вы не разработчик, но всё равно читаете это по какой-либо причине, я не успокоюсь, пока все не планете не прочитают Learn Python The Hard Way.Я не пробовал Ruby on Rails и его соперников, у Perl с его Catalyst'ом вроде есть ещё порох в пороховницах. Читайте, учитесь, создавайте, жгите.СсылкиСпасибо за вдохновение:PHP turtlesPHP sadnessPHP WTFYourLanguageSucksPHP in contrast to PerlPi’s dense, angry, inspirational rantPHP is not an acceptable COBOLthe PHP documentationкуче PHP фанатиков и контр-фанатикови, конечно, же Расмусу Лердорфу за дикое непонимание большей части Perl"
    },
    "doc_42": {
        "url": "https://habr.com/ru/post/275841/",
        "title": "50 цитат о программировании всех времён",
        "text": "Перевёл после прочтения комментариев к статье «О ненависти к C++». В цитатах можно найти ответы на большинство возникших там вопросов.50. Программирование сегодня — это гонка разработчиков программ, стремящихся писать программы больше и с лучшей идиотоустойчивостью, и вселенной, которая пытается создавать больших и лучших идиотов. Пока вселенная побеждает.— Rick Cook49. Lisp — это не язык, а строительный материал.— Alan Kay48. Ходить по воде и разрабатывать программы, следуя спецификации, очень просто… если они заморожены.— Edward V Berard47. Они больше не делают баги, как Банни (Bugs Bunny).— Olav Mjelde.46. Низкоуровневый язык — это когда требуется внимание к вещам, которые никак не связаны с программами на этом языке.— Alan J. Perlis.45. Программирование на С похоже на быстрые танцы на только что отполированном полу людей с острыми бритвами в руках— Waldi Ravens.44. Я всегда мечтал о том, чтобы моим компьютером можно было пользоваться так же легко, как телефоном; моя мечта сбылась: я уже не могу разобраться, как пользоваться моим телефоном.— Bjarne Stroustrup43. Обучение программированию не может научить быть экспертом, также как и изучение кистей и красок не может превратить кого-либо в художника.— Eric S. Raymond42. Не волнуйтесь, если что-то не работает. Если бы всё работало, вас бы уволили.— Mosher’s Law of Software Engineering41. Я думаю, что Microsoft назвал технологию .Net для того, чтобы она не показывалась в списках директорий Unix.— Oktal40. Хорошо, Java, ВОЗМОЖНО, хороший пример того как должен выглядеть язык. Но тогда программы на Java — это хороший пример как НЕЛЬЗЯ писать программы.— pixadel39. Учитывая текущее плачевное состояние наших программ, можно сказать, что программирование определенно все ещё черная магия и, пока, мы не можем называть его технической дисциплиной.— Bill Clinton38. Использование COBOL калечит разум; исходя из этого, обучение этому языку должно быть признано уголовно наказуемым преступлением.— E. W. Dijkstra37. Объектно-ориентированная версия «спагетти кода» — это, конечно, «лазанья код» (очень много слоев).— Roberto Waltman36. FORTRAN — это не цветок, а сорняк: он вынослив, иногда расцветает и произрастает в каждом компьютере— Alan J. Perlis.35. Для меня долгое время было загадкой, как что-то очень дорогое и технологичное может быть столь бесполезным. И вскоре я осознал, что компьютер — это глупая машина, обладающая способностями выполнять невероятно умные вещи, тогда как программисты — это умные люди, у которых талант делать невероятные глупости. Короче, они нашли друг друга.— Bill Bryson34. По моему эгоистическому мнению, большинство программ на C должны быть отформатированы с отступами на 2 метра вниз и засыпанными землей.— Blair P. Houghton.33. Когда кто-то говорит: «Я хочу язык программирования, который может делать все, что ему скажу», то я даю этому человеку леденец.— Alan J. Perlis32. Эволюция языков: FORTRAN — не строго типизированный язык, С — слабо типизированный язык. Ada — сильно типизированный язык. С++ — сильно раздутый язык.— Ron Sercely31. В хорошем дизайне добавление вещи стоит дешевле, чем сама эта вещь.— Thomas C. Gale30. Если называть Python заменой BASIC, то тогда и трансформер Optimus Prime — это только замена грузовика.— Cory Dodt29. Болтовня ничего не стоит. Покажите мне код.— Linus Torvalds28. Как видно, совершенство достигается не тогда, когда уже нечего прибавить, но когда уже ничего нельзя отнять.— Antoine de Saint-Exupéry27. С — это причудливый, несовершенный, но невероятно успешный язык.— Dennis M. Ritchie.26. В теории, теория и практика неразделимы. На практике это не так.— Yoggi Berra25. Вы не можете создавать хорошие программы без хорошей команды, но большинство софтверных команд ведут себя как проблемная семья.— Jim McCarthy24. PHP — это маленькое зло, созданное некомпетентными новичками, в то время как Perl — это большое и коварное зло, созданное умелыми, но извращёнными профессионалами.— Jon Ribbens23. Программирование — это как бить себя по лицу, рано или поздно ваш нос будет кровоточить.— Kyle Woodbury22. Perl — это тот язык, который одинаково выглядит как до, так и после RSA шифрования…— Keith Bostic21. Намного легче портировать шелл, чем скрипт на шелле.— Larry Wall20. Я изобрел понятие «объектно-ориентированный», но могу заявить, что не имел в виду C++ при этом.— Alan Kay19. Изучение программирования имеет такое же отношение к проектированию интерактивных систем, как обучение слепой печати к написанию стихов.— Ted Nelson18. Лучшие программисты не чуть-чуть лучше хороших. Они на порядок лучше по любым меркам: концептуальное мышление, скорость, изобретательность и способность находить решения.— Randall E. Stross17. Если бы McDonalds была бы софтверной компанией, то у них один из ста Биг Маков был бы отравленным, и их ответ на это был бы: «Мы сожалеем, вот вам купон на ещё два Биг Мака.\"— Mark Minasi16. Опасайтесь багов в приведенном выше коде; я только доказал корректность, но не запускал его.— Donald E. Knuth.15. Анализ компьютерных систем — это как воспитание детей; можно нанести огромный вред, но нельзя гарантировать успех.— Tom DeMarco14. Меня не интересует, будет ли это работаеть на ваших машинах! Мы не отдаем их заказчику!— Vidiu Platon.13. Иногда лучше остаться спать дома в понедельник, чем провести всю неделю отлаживая написанный в понедельник код.— Christopher Thompson12. Измерять продуктивность программирования подсчетом строк кода — это так же, как оценивать постройку самолета по его весу.— Bill Gates11. Отладка кода вдвое сложнее, чем его написание. Так что если вы пишете код настолько умно, насколько можете, то вы по определению недостаточно сообразительны, чтобы его отлаживать.— Brian W. Kernighan.10.Люди считают, что программирование — это наука избранных, но в реальности все наоборот — просто много людей создают программы, которые используют чужие программы, как-будто строя стену из маленьких кирпичиков.— Donald Knuth9. Сначала учите науку программирования и всю теорию. Далее выработаете свой программистский стиль. Затем забудьте все и просто программируйте.— George Carrette8. Многие из вас знакомы с достоинствами программиста. Их всего три, и разумеется это: лень, нетерпеливость и гордыня.— Larry Wall7. Большинство программ на сегодняшний день подобны египетским пирамидам из миллиона кирпичиков друг на друге и без конструктивной целостности — они просто построены грубой силой и тысячами рабов.— Alan Kay6. Трудность работы с програмистом заключается в том, что вы не можете понять что он делает до тех пор пока не стало слишком поздно.— Seymour Cray5. Итерация свойственна человеку, рекурсия божественна.— L. Peter Deutsch4. Меня два раза спрашивали [члены Парламента]: «Скажите на милось, мистер Бэббидж, что случится, если вы введете в машину неверные цифры? Cможем ли мы получить правильный ответ?» Я не могу себе даже представить какая путаница в голове может привести к подобному вопросу.— Charles Babbage3. Большинство хороших программистов делают свою работу не потому, что ожидают оплаты или признания, а потому что получают удовольствие от программирования.— Linus Torvalds2. Всегда пишите код так, будто сопровождать его будет склонный к насилию психопат, который знает, где вы живете.— Martin Golding1. Есть два способа создания дизайна программы. Один из них, это сделать его настолько простым, что в нем, очевидно, не будет недостатков. Другой способ — сделать его настолько запутанным, что в нем не будет очевидных недостатков.— C.A. R. Hoaretranslated.by/you/top-50-programming-quotes-of-all-time/into-ru/transОригинал (английский): Top 50 Programming Quotes of All Time ( www.junauza.com/2010/12/top-50-programming-quotes-of-all-time.html )Перевод: © Alexander MAZUROV, Сергей Лещина, mkatsev, partizan, LaggyLuke.translated.by переведено толпой"
    },
    "doc_43": {
        "url": "https://habr.com/ru/post/438514/",
        "title": "Как я год не работал в Сбербанке",
        "text": "Доброго времени суток, хабровчане!Про эту компанию знают все. Кто-то в ней даже работал или продолжает работать. Я думаю, сложно найти в РФ, да и на территории СНГ, человека который не слышал о холдинге Сбербанка. Именно холдинг, так как очень много компаний которые обслуживают Сбербанк и контролируются им же. Так вот я поработал в двух таких компаниях за один год — это Сбербанк-Технологии (далее СБТ) и Сбербанк.Устав за два года от графика сменного инженера и получив от руководства ясный ответ о том, что не раньше, чем через год мне возможно посчастливиться работать по графику 5/2, я решил, что год — это долго и терять его не хотелось, тем более в Москве!Приступил к поиску вакансий — я искал аналогичные пожелания, что и на текущем месте. +10-15% рост з/п меня вполне устраивал. Собеседований было достаточно. 14.09.2017 приходит письмо от СБТ. Когда я прочитал описание вакансии, я честно не понял, почему моё резюме не улетело в мусорную корзину HR. Однако, в телефонном разговоре девушка настояла на собеседовании, якобы опыт, технологии и бла бла бла…“С одной стороны есть сетевая составляющая, но слишком большой акцент в сторону ИБ.” — подумал я, но согласился. Встреча была в соседнем здании от “Ока Саурона” — на Вавилова. Так его величают сами сотрудники!Общался с двумя техническими специалистами и тех. руководителем проекта. ЗП, которая была указана в CV, оказалась адекватной для работодателя. Разговаривали долго, и по специфике работы мне всё было понятно, а всё организационное и так называемые “плюшки” я уже выяснял с HR по почте значительно позже, о чём расскажу далее.19.09.2017 БЦ “Чайка”. Второе собеседование с линейным руководителем и тем же ТРП, который был на первом собеседовании. Обсудили уже деньги более подробно (структура выплат и т.п.)Рассказали, что будет обязательный тест и вариантов только два: Разработчик или Аналитик.“Не программист ни разу” — ответил я.“Тогда будешь аналитик, там простой тест по SQL” — сказал руководитель.Сказать, что я был удивлён, ничего не сказать. Ну ок, sql так sql.23.09.2017 Тест был редкостным трешем. 95% вопросов было по BPMN.04.10.2017 Был получен pre-offer. На который я сказал: “Да”17.10.2017 Был пройден полиграф.15.11.2017 Приём на работу. Это был отдельный квест. Когда ты попадаешь в HR, там есть список из более чем 40 документов, часть из них мне отправили на почту заранее для ознакомления. Однако, многие я увидел впервые. Подразделение работает несколько часов, ознакомиться с этим сводом правил не представляется возможным, поэтому подписываешь, не читая, а в лучшем случае пролистывая. Более того, просили принести заранее подписанное соглашение о персональных данных. В результате у меня его не приняли и попросили заполнить то, что было в пакете документов на подпись. Формуляры оказались идентичны, почему не подошёл мой экземпляр мне не объяснили.Затем, мне выдали карту доступа в закутке грустного «безопасника». Классика. С первого же рабочего дня начинаются сюрпризы. Договоренность была о моём рабочем месте на м. Таганская, однако я смог туда перебраться только через 4 месяца. Увидев своё рабочее место в БЦ “Чайка”, я понял, что мой ПК не готов к работе: учётные данные не созданы (получил доступ в ОС через 4 дня), ноутбук получил на 5-ый день (хотя коллеги были удивлены такой скоростью получения техники, ожидание ноутбука сроком в несколько месяцев — это норма), Wi-Fi настроен был через 2 недели, VPN через 4 недели. Спустя неделю, я понимаю что меня обманули почти по всем пунктам, однако искать новое место работы не тороплюсь. Всё чем я занимался — это были в основном рабочие встречи с различными людьми (как внешними партнёрами компании, так и с коллегами из других подразделений), обсуждение потребностей и возможностей, составление каких-то предварительных отчётов. Участие в закупочных/тендерных комиссиях. Иногда даже организация этих встреч, резервирование комнат для переговоров. В общем всё, что не относится к работе инженера. Работы по профилю было 10% от силы. Месяц пролетел как одна неделя. Было много переездов между площадками вдобавок к предновогодней суете. Новогодний перерыв, и всё с новой силой. Оглянувшись на свою работу с момента трудоустройства, я написал заявление по собственному желанию и отправил на почту руководителю и, разумеется, он хотел обсудить мой уход. “Мы можем это исправить”Встретились с руководителем. Я объяснил свои негодования, меня выслушали и рассказали, что Сбербанк большой — работы много, что-нибудь да найдём, но нужно время. Так как у меня ещё был запас по времени на увольнение. В период испытательного срока — 3 дня, а после — 14 дней. Я согласился на одну неделю для разрешения данной ситуации. Неделя подходит к концу — новостей нет. Я звоню и напоминаю о наших договоренностях и буквально через 20 минут мне перезванивают и сообщают, что со мной хочет пообщаться весьма важный руководитель. Я соглашаюсь на встречу и на следующий день еду в “Око Саурона” и каким-то 10 людям повторяю рассказ о том, что было сказано непосредственному руководителю.В результате меня убедили остаться для поиска мне интересных задач в эксплуатации ИБ Сбербанка с дальнейшим переводом из СБТ в ПАО.“Полгода отпуска”Переехал на Таганку окончательно. Тут стоит начать с организационных “плюшек”. Так как у меня был ноутбук, я спокойно мог перемещаться между офисами. В тоже время тут принято иметь два сегмента сети, следовательно и компьютеров по два у каждого сотрудника. Мой второй компьютер везли внутри Москвы почти 2 месяца. Доступы получал неделями по всяким разным ЗНО, ЗНИ, ЗПИ — это местные RFS, RFC. Задач — ноль. Я реально выпрашивал задачи, но для инженера они были так себе… ну, например. Для ограничения доступа (по различным критериям) Wi-Fi пользователей нужно знать IP-диапазоны, которые выделяются на всех беспроводных точках доступа. Это зона ответственности другого подразделения, я хотел было написать письмо и через какое-то время получить ответ. Однако, в Сбербанке так не работает. Мне на получение списка IP-адресов понадобилось 2 месяца и вот почему.Люди, которые являются ответственными администраторами, слишком заняты для таких простых инвентаризационных задач. Я попросил доступы на контроллеры и мне их дали. Ходил и собирал информацию, которую требовало руководство. Помимо IP-сетей, появились и смежные задачи (можно по упрощенной схеме решать задачи, через сотрудника отдела). В результате через 2 месяца я получил 6 префиксов различной длины для Wi-Fi сетей — задача выполнена, хотя ко мне ещё около месяца приходили коллеги с “около-беспроводными” делами. Далее нужно было из одного файлика все IP-адреса проверить по определенным критериям и в Excel-табличку перенести. Интересная и увлекательная работа, не правда ли?Как по мне, я ничего не делал. Я занимался своими делами: планированием отпуска, изучением языка и подготовкой к сертификации Cisco, просмотром вебинаров и т.п. Несколько раз я проводил эксперимент — просто не приходил на работу. Я был на связи, имел возможность читать почту, но просто меня не было на рабочем месте. Никто меня не искал. и это с одной стороны круто, с другой стороны весьма печально.02.07.2018 Прошёл массовый перевод сотрудников из СБТ в ПАО. Теперь я сотрудник Сбербанка. Ничего не изменилось. 05.09.2018 Меня перевели в то подразделение, о котором говорили ещё в феврале!-47% в месячном доходе, -8% в годовом. Почему я пошёл на такой невыгодный шаг?В СБТ система выплат такая: у тебя есть оклад и премиальная часть, которая оплачивается каждый месяц. В конце года возможен бонус, но на тот момент это был максимум 1 оклад.В Сбербанке же система другая, у тебя есть оклад и премии, но премий несколько: квартальные и годовые. Таким образом до конца года оставалось 3 полных месяца и благодаря годовым премиям я в плюсе (-8% — это было посчитано системой автоматически без бонусов на конец года).FFЛицо друга или FriendFace — это не клон FaceBook, а очередная не гибкая автоматизированная система, которая должна помочь в сложных перипетиях взаимодействия между заказчиком и получателем услуги. Это не просто web-сервис, судя по видам запросов, что я видел (от бронирования проживания на курортах, до заказа слитков золота) это целый мир, существующий отдельно от Сбербанка, к сожалению.Первые мои сложности с этой системой возникли сразу на этапе регистрации. Заполнив все обязательные поля, я не смог сохранить данные. После обновления страницы данные исчезали. Я написал об этом Тикет, он был закрыт через месяц без адекватного ответа. Открывать новый я не стал, просто каждый раз при создании новой заявки я писал ФИО и необходимые данные для скорейшего решения моей проблемы. (После перевода в Сбербанк, данные обо мне добавились в систему и стало попроще).За всё время работы у меня был только один случай, когда моя заявка решилась менее чем за 1 рабочий день (т.е. 8 часов) — это установка Mozilla в закрытом контуре сети. Все остальные заявки: просьба добавить прав пользователю, предоставить доступ к ресурсу, вернуть украденный IP-адрес (DHCP — тут иногда роскошь). Занимали от 2 дней до нескольких недель. Для коммутации розетки и переключения в нужный VLAN понадобилось 10 дней. Самый забавные пример с этой системой заключался в получении мной доступа в туалет (туалет, Карл!). После перехода в Сбербанк, я официально стал числиться в офисе на Таганке. А доступ был только к центральному входу. Я написал запрос с указанием адреса где нахожусь и описанием того что я хочу (шаблон был выбран соответствующий — «СКУД: доступ в помещение»). Руководитель согласовал запрос, а сотрудник безопасности не стал ничего делать и с комментарием “нужна СЗ на имя Руководителя!” закрыл запрос. Я попытался им объяснить что в электронном виде есть заявка и она согласована, но получилось так что после 5 звонков от разных индивидуумов от безопасности с просьбами о закрытии тикета (статистика страдает же — тикет не решён) Ко мне подошёл мой руководитель и сказал хочешь доступ пиши СЗ, я согласую и “главный по зданию” её направит безопасникам. Вот это я понимаю, безопасность!Отпускная Кампания 2019Рассылка пестрила этими письмами довольно долго. Сервис на самом деле удобный, но багов существенное количество.По факту это обычный планировщик с календарем, на основании которого будут формироваться документы для вашего ухода в отпуск.Думаю у большинства средних и крупных компаний, есть такое и не нужно бегать в HR и бухгалтерию с бумагами. В общем выбираете периоды отпуска, сохраняете, руководитель согласует, всё утверждается и в нужный момент вас заранее уведомляют.Я выбрал 2 периода — сохранил. Занялся другой работой, возвращаюсь обратно: таймауты вышли, периоды все пропали.Думаю, что нужно всё за раз сделать и сохранить в черновики. Сохраняю все 3 периода(один не менее 14 дней, всё как положено по ТК РФ). Вижу черновик. Ухожу на обед. Возвращаюсь. Всё пропало. Пишу заявку в Лицо Подруги, она попадает к HR которые разумеется такие вещи не знают как решать, отправляют меня к каким то программистам которые ни почту не читают, ни на телефоны не отвечают.В результате получилось так что я выбрал 3 периода отпуска уже в N-ый раз. Сохранил и отправил на согласование. Вся компания разделена была на несколько этапов. 10 дней — создание графика10 дней — согласование руководством5 дней — корректировка5 дней — утверждение и подписание.Спустя неделю после того как я отправил на согласование свой график, я решил его исправить (до этапа согласования время же есть?) Захожу, вношу изменения, повторяю все процедуры, вижу изменения. Довольный закрываю страницу браузера.Начинается этап согласования и руководитель меня информирует о том что я только 10 дней отпуска спланировал. Я захожу в систему и действительно вижу только один период отпуска и руководитель не может мне вернуть его на корректировку, только он может внести изменения.Снова всё не по плану!ДМССамое большое разочарование. На момент моего трудоустройства ДМС делился на две категории: новых сотрудников (меньше 1 года работы) и остальных. Для тех кто новичок, доступна только срочная госпитализация, реанимация и т.п. Забудьте про массаж и всю “амбулаторку”. Однако, сейчас, когда я пишу этот текст, уже действует система сооплаты — 20% платит сотрудник, остальное СК. Стоматология — это доп. опция. Для управления ДМС есть отдельный ресурс, который существует вроде как давно. Но падает молниеносно, после любой рассылки связанной с ДМС. Мне после регистрации даже письмо прислали с моим логином и паролем открытым текстом… Практически каждый раз я заходил туда через сброс пароля, информация там много где неполная или даже противоположная.Позитивное о компанииГрафик работы! Мне ни разу не сказали, что я пришёл поздно или ушёл рано. Я мог прийти в 12 дня и уйти после 9 вечера. Коллеги, конечно, косились — но с этим к окулисту, я не врач. Никогда не ориентировался на работу 8 часов в день, но если нет работы сидеть в офисе я не вижу смысла. Скажу даже больше, про распорядок дня. В СБТ были коллеги, которые приходили на работу в 6 утра в пятницу и уходили в 2 дня (день-то сокращённый). Это круто!Общение с HR, благодаря SAP упрощено, хоть там и не всё гладко.На этом, к сожалению, плюсы заканчиваются.Люди и рабочая атмосфераМногие боятся задач, когда к ним причастен Герман Греф и многие этим пользуются. Звонят/пишут/приходят и рассказывают что задача пришла «от него». Все регламенты по ИБ выполняются, когда это выгодно или при наступлении PCI DSS. Например, есть распоряжение, по которому доступ из Зоны А в Зону Б запрещён без указания определённых критериев (порт, ip-адреса и т.д.). Однако, если человек, который не знает всех этих критериев, но понимает, что ему нужно быстро получить доступ, пишет всем руководителям кто может «пропихнуть» на уровне повыше данную задачу, проблема будет решена. Открыт весь IP трафик между хостами, хотя надо было только HTTPS по 2-м портам. Усложняется это всё тем, что когда таких “хитрых” товарищей выстраивается очередь и начинается переприоритизация каждой задачи, люди ломаются и открывают доступ не IP2IP, а NET2NET.Видел строки в ACL, где открыты очень широкие префиксы, лишь бы “эти” больше не донимали. Таких примеров очень много.Здесь люди никуда не торопятся, пребывают в стабильности или ждут пенсии. Некоторые позволяют себе вэйпить (курить электронные сигареты) на рабочем месте, несмотря на то что в кабинете есть как минимум 2 астматика, а остальные не курят, да ещё и в соседнем кабинете находится Директор Центра. Выслуга лет, ничего не поделаешь… Мне присылали письма со “срочными задачами”, которые начинались 3-4 месяца назад и внезапно о них вспоминали, а предыдущий сотрудник умер/уволился/декрет/etc.Бывают бравые задачи соорудить свою систему мониторинга чего-нибудь, когда на соседнем этаже есть целое подразделение мониторинга. Делегировать же им эту задачу никто не хочет, так как контролировать такую систему изначальный заказчик услуги не сможет. Токсичность людей весьма высокая. Твой рабочий запрос могут не выполнить, потому что ты “чёрный”. Люди не хотят ни на йоту делать что-то больше, чем может потребоваться. Причём я не говорю о каких-то колоссальных проектах. Заявку на доступ к ресурсам могут отклонить, если прислали DNS-имя вместо IP. Если пользователь просит открыть ему HTTP, никто не подумает даже про порт 80, а уж звонить пользователю и спрашивать у него доп. информацию — это моветон. Заявка будет закрыта.Несколько реальных примеров из жизни “Русского Амазона”. Dot1x. Кто-то сказал наверху, что нужно внедрять. БольшАя часть устройств не спрофилированы, что в итоге приводит к созданию огромных White-листов, чтобы бизнес мог существовать. Однако, 600 linux-машин, не заметили и они просто остались без доступа к сети :-) На что люди ответственные за реализацию этой “супер безопасной концепции доступа”, затем с удивленными глазами вопрошают: “Мы откуда знали, что есть Linux. Нам что каждый ПК тестировать надо было?”С линуксом история очень показательная! Так как мне эту задачу поставили достаточно конкретно: “Есть линукс машины, выясни, как можно заставить работать их с dot1x”. Понадобились недели. чтобы попытаться получить root-доступ на линукс машину или хотя бы добавить мою учётную запись в sudoers. Мне это надоело и я принёс из дома свой старенький ноутбук и за 10-15 минут после включения, через Network Manager спокойно подключился к сети с dot1x. На что написал начальнику о результатах, даже записал видео короткое, как зайти в Network Manager и где какие вкладки нужно посетить. Спустя месяц от специалистов по обслуживанию Linux в компании прилетает письмо следующего содержания:На что коллега успевает ответить раньше меня, что это вне нашей зоне ответственности.Ещё через 1.5 недели меня подключают в конференцию и в начале разговора пытаются уговорить написать скрипт за них, а в конце давят на слоганы компании “Мы — команда, Всё — для клиента” и т.д.Однако, у начинающих Linux-психологов не удалось меня уговорить. Я то уже знал что покидаю эту команду и этих клиентов. После общения с такими коллегами мне стало интересно кто это был. Ниже видно внутренние регалии одного из участников телефонного разговора. Выводы каждый сделает сам для себя.Если история с Linux коснулась меня непосредственно, то об ip-телефонию я только слышал от коллег.Как известно есть сигнальный трафик, а есть media-трафик. Следовательно, если просто разрешить sccp/sip до CUCM то пользователи регистрируются, но со звонками будут проблемы. Кто то из ИБ — этого не знал и поломал телефонию — причём знатно. После этого было принято решение сначало протестировать, а затем внедрять :-)Внедрение AAA. Ещё одна боль, к которой я прикоснулся (не мой проект, участвовал уже со стороны эксплуатации самую малость).Особенно запомнилось то, что когда я только устроился на работу этот проект был уже практически завершен в СБТ и всё передано в Сбербанк. Однако, сейчас в декабре 2018 года до сих пор у нас появляется 1-2 раза в неделю представитель вендора и рассказывает инженеру как работать, последний кстати прошел обучение от вендора. Сейчас, на мой взгляд это кусок недоделанного ПО, на который уже переведено несколько тысяч устройств. Негатива куча, зато внедрили. Галочки в нужных пунктах проставлены, премии получены, KPI не пострадал.Офис класса “трэш”Эстетические и функционально удобные офисные помещения Сбербанка — это Вавилова, Оружейный, Кутузовский, Даниловский форт, Южный порт, БЦ “Чайка” и это всё. Был во всех и в таких условиях хочется работать, скажу я вам. Все остальные площадки, это скорее всего старые здания в которых нет жизни, а у сотрудников находящихся там — желания работать. Вешалку для одежды принёс из дома, купить такую мелочь в топ IT-компании этой страны слишком сложно (со слов коллег). Я не стал это проверять и поверил на основании предыдущего опыта, поэтому принёс свою. Воды может не быть весь день, так как кто-то заказал её поздно. Кофемашина и чайники в каждом кабинете свои. Кто и как их чистит — это на совести людей в кабинетах. Про организацию доступа к туалетам я уже писал выше. УвольнениеНаписано заявление было в последний рабочий день 2018 года. В новом году ознакомился с приказом, обходной лист в электронном виде, половина подписантов уже отметились. Осталось сдать пропуск и ноутбук. ЭпилогВсё что написано, это мой реальный опыт. В первую очередь эта статья появилась для того чтобы вы знали что вас ждёт, если вы мечтаете о работе в IT-направлении Сбербанка. Я был шокирован и до последнего не верил, что такое может быть в этой компании. Спустя какое-то время я понял, что надо конспектировать этот хаос, и вот в какую статью это превратилось. В интернете очень много статей так красочно и позитивно расписывающих работу в этой компании. Тем не менее, пока не попадёшь — не узнаешь. Для меня это был самый утомительный и не интересный трудовой опыт. Даже работая в операторе связи (который ныне куплен Ростелекомом), я не видел такого ужаса в IT. Возможно потому что оператор связи изначально ближе к IT. Разумеется, какие-то ситуации вы не сможете примерить на себя, но не забывайте про “общую температуру по больнице”.Думаю в Sbergile (сотрудники работающие по Agile) всё несколько лучше, потому что эти сотрудники находятся в тех удобных и комфортных офисах, что я указал выше и практически никак не связаны с низкоуровневой эксплуатацией. В завершение хочу заметить, что на первичное направление (в СБТ) было принято 4 человека (руководитель и 3 инженера), с разницей в пару недель.Начальник ушёл летом (проработав менее полугода), один из инженеров не дождался годовой премии и один продолжает трудиться. Ещё один инженер дописывает эту статью в последний официальный рабочий день, с трудовой книжкой лежащей перед ним на столе…P.S.Кружка ещё клёвая и удобная — однозначно плюс."
    },
    "doc_44": {
        "url": "https://habr.com/ru/post/278827/",
        "title": "Жизнь разработчика (в картинках)",
        "text": "Взято отсюда специально для хабра. Возможно, в некоторых из ситуаций вы узнаете себя.Когда я показываю босу, что окончательно пофиксил багКогда проджект-менеджер входит в офисКогда я готовлю код к релизуКогда я пытаюсь пофиксить баг в 3 часа утраКогда моё регулярное выражение сработало именно так, как и ожидалосьКогда мой друг попросил меня пофиксить сайт, сделанный на JoomlaКогда мне сказали, что модуль, который я разрабатывал всю неделю, никогда не будет использоватьсяКогда код, который я не тестировал, отлично работает в стабильной версии проектаКогда продавцы сообщили, что продали наш софт клиентуКогда я первый раз применяю новый CSS Когда сисадмин наконец-то дал нам рутовый доступКогда я запустил свой скрипт впервые после нескольких часов разработкиКогда я уезжаю в отпуск, пока все остальные пытаются фиксить багиКогда мы выпустили бету и пришло уведомление о первом багеКогда бос ищет кого-то для срочного фикса сложного багаКогда работающий в пятницу код в понедельник больше не работаетКогда я попросил нового коллегу продолжить работу над кодомКогда при презентации продукта не был замечен баг"
    },
    "doc_45": {
        "url": "https://habr.com/ru/post/147828/",
        "title": "Восстановление расфокусированных и смазанных изображений. Практика",
        "text": "Не так давно я опубликовал на хабре первую часть статьи по восстановлению расфокусированных и смазанных изображений, где описывалась теоретическая часть. Эта тема, судя по комментариям, вызвала немало интереса и я решил продолжить это направление и показать вам какие же проблемы появляются при практической реализации казалось бы простых формул.В дополнение к этому я написал демонстрационную программу, в которой реализованы основные алгоритмы по устранению расфокусировки и смаза. Программа выложена на GitHub вместе с исходниками и дистрибутивами.Ниже показан результат обработки реального размытого изображения (не с синтетическим размытием). Исходное изображение было получено камерой Canon 500D с объективом EF 85mm/1.8. Фокусировка была выставлена вручную, чтобы получить размытие. Как видно, текст совершенно не читается, лишь угадывается диалоговое окно Windows 7.И вот результат обработки:Практически весь текст читается достаточно хорошо, хотя и появились некоторые характерные искажения.Под катом подробное описание проблем деконволюции, способов их решения, а также множество примеров и сравнений. Осторожно, много картинок!Вспомним теориюПодробное описание теории было в первой части, но все же напомню вкратце основные моменты. В процессе искажения из каждого пикселя исходного изображения получается некоторое пятно в случае расфокусировки и отрезок для случая обычного смаза. Все это друг на друга накладывается и в результате мы получаем искаженное изображение — это называется сверткой изображения или конволюцией. То, по какому закону размазывается один пиксель и называется функцией искажения. Другие синонимы – PSF (Point spread function, т.е. функция распределения точки), ядро искажающего оператора, kernel и другие.Чтобы восстановить исходное изображение нам необходимо каким-то образом обратить свертку, при этом не забывая про шум. Но это не так-то просто – если действовать, что называется, «в лоб», то получится огромная система уравнений, которую решить за приемлемое время невозможно. Но на помощь к нам приходит преобразование Фурье и теорема о свертке, которая гласит, что операция свертки в пространственной области эквивалентна обычному умножению в частотной области (причем умножение поэлементное, а не матричное). Соответственно, операция обратная свертке эквивалентна делению в частотной области. Поэтому процесс искажения можно переписать следующим образом:(1), где все элементы — это фурье-образы соответствующих функций:G(u,v) – результат искажения, т.е. то, что мы наблюдаем в результате (смазанное или расфокусированное изображение)H(u,v) – искажающая функция, PSFF(u,v) – исходное неискаженное изображениеN(u,v) – аддитивный шумИтак, нам нужно восстановить максимальное приближение к исходному изображению F(u,v). Просто поделить правую и левую часть на H(u,v) не получится, т.к. при наличии даже совсем небольшого шума (а он всегда есть на реальных изображениях) слагаемое N(u,v)/H(u,v), будет доминировать, что приведет к тому, что исходное изображение будет целиком скрыто под шумом.Чтобы решить эту проблему, были разработаны более устойчивые методы, одним из которых являтся фильтр Винера (Wiener). Он рассматривает изображение и шум как случайные процессы и находит такую оценку f' для неискаженного изображения f, чтобы среднеквадратическое отклонение этих величин было минимальным:(2)Функцией S здесь обозначаются энергетические спектры шума и исходного изображения соответственно – поскольку, эти величины редко бывают известны, то дробь Sn / Sf заменяют на некоторую константу K, которую можно приблизительно охарактеризовать как соотношение сигнал-шум.Способы получения PSFИтак, возьмем за отправную точки описанный фильтр Винера — вообще говоря, существует множество других подходов, но все они дают примерно одинаковые результаты. Так что все описанное ниже будет справедливо и для остальных методов деконволюции.Основная задача — получить оценку функции распределения точки (PSF). Это можно сделать несколькими способами:1. Моделирование. Очень непросто и трудоемко, т.к. современные объективы состоят из десятка, другого различных линз и оптических элементов, часть из которых имеет асферическую форму, каждый сорт стекла имеет свои уникальные характеристики преломления лучей с той или иной длиной волны. В итоге задача корректного расчета распространение света в такой сложнейшей оптической системе с учетом влияния диафрагмы, переотражений и т.п. становится практически невозможной. И решение ее, пожалуй, доступно только разработчикам современных объективов.2. Непосредственное наблюдение. Вспомним, что PSF — это то, во что превращается каждая точка изображения. Т.е. если мы сформируем черный фон и одну белую точку на нем, а затем сфотографируем это с нужным значением расфокусировки, то мы получим непосредственно вид PSF. Кажется просто, но есть много нюансов и тонкостей.3. Вычисление или косвенное наблюдение. Присмотримся к формуле (1) процесса искажение и подумаем, как можно получить H(u,v)? Решение приходит сразу — нужно иметь исходное F(u,v) и искаженное G(u,v) изображения. Тогда поделив фурье-образ искаженного изображения на фурье-образ исходного изображения мы получим искомую PSF. Про бокеПеред тем как перейдем к деталям, расскажу немного теории расфокусировки применительно к оптике. Идеальный объектив имеет PSF в виде круга, соответственно каждая точка превращается в круг некоторого диаметра. Кстати, это для многих неожиданность, т.к. с первого взгляда кажется, что дефокус просто растушевывает все изображение. Это же объясняет и то, почему фотошоповское размытие Гаусса совсем не похоже на тот рисунок фона (его еще называют боке), который мы видим у объективов. На самом деле это два разных типа размытия — по Гауссу каждая точка превращается в нечеткое пятно (колокол Гаусса), а дефокус каждую точку превращает в круг. Соответственно и разные результаты.Но идеальных объективов у нас нет и в реальности мы получаем то или иное отклонение от идеального круга. Именно это и формирует неповторимый рисунок боке каждого объектива, заставляя фотографов тратить кучу денег на объективы с красивым боке :) Боке можно условно разделить на три типа:— Нейтральное. Это максимальное приближение к кругу— Мягкое. Когда края имеют меньшую яркость, чем центр— Жесткое. Когда края имеют большую яркость, чем центр.Рисунок ниже иллюстрирует это:Более того, тип боке — мягкое или жесткое зависит еще и от того, передний это фокус или задний. Т.е. фотоаппарат сфокусирован перед объектом или же за ним. К примеру, если объектив имеет мягкий рисунок боке в переднем фокусе (когда, скажем, фокус на лице, а задний план размыт), то в заднем фокусе боке того же объектива будет жестким. И наоборот. Только нейтральное боке не меняется от вида фокуса.Но и это еще не все — поскольку каждому объективу присущи те или иные геометрические искажения, то вид PSF зависит еще и от положения. В центре — близко к кругу, по краям — эллипсы и другие сплюснутые фигуры. Это хорошо видно на следующем фото — обратите внимание на правый нижний угол:А теперь рассмотрим подробнее два последних метода получения PSF.PSF — Непосредственное наблюдениеКак уже говорилось выше, необходимо сформировать черный фон и белую точку. Но просто напечатать на принтере одну точку недостаточно. Необходим намного большее отличие в яркости черного фона и белой точки, т.к. одна точка будет размываться по большому кругу — соответственно должна иметь большую яркость, чтобы быть видной после размытия. Для этого я распечатал черный квадрат Малевича (да, тонера много ушло, но чего не сделаешь ради науки!), наложил с другой стороны фольгу, т.к. лист бумаги все же неплохо просвечивает и иголкой проколол маленькую дырочку. Затем соорудил нехитрую конструкцию из 200-ваттной лампы и сэндвича из черного листа и фольги. Выглядело это вот так:Далее включил лампу, закрыл ее листом, выключил общий свет и сделал несколько фоток используя два объектива — китовый Canon EF 18-55 и портретник Canon EF 85mm/1.8. Из получившихся фоток я вырезал PSF и затем построил графики профилей.Вот что получилось для китового объектива:И для портретника Canon EF 85mm/1.8:Хорошо видно как меняется характер боке с жествкого на мягкий для одного и того же объектива в случае переднего и заднего фокуса. Также видно, какую непростую форму имеет PSF — она весьма далека от идеального круга. Для портретника также видны большие хроматические аберрации из-за большой светосилы объектива и малой диафрагмы 1.8.И вот еще пара снимков при диафрагме 14 — на нем видно, как поменялась форма с круга на правильный шестиугольник:PSF — Вычисление или косвенное наблюдениеСледующий подход — косвенное наблюдение. Для этого, как писалось выше, нам нужно иметь исходное F(u,v) и искаженное G(u,v) изображения. Как их получить? Очень просто — необходимо поставить фотоаппарат на штатив и сделать один резкий и один размытый снимок одного и того изображения. Далее с помощью деления фурье-образа искаженного изображения на фурье-образ исходного изображения мы получим фурье-образ нашей искомой PSF. После чего применив обратное преобразование Фурье получим PSF в прямом виде.Я сделал два снимка:И в результате получил вот такую PSF:На горизонтальную линию не обращайте внимания, это артефакт после преобразования Фурье в матлабе. Результат, скажем так, средненький — очень много шумов и детали PSF видны не так хорошо. Тем не менее, метод имеет право на существование.Описанные методы можно и нужно использовать для построения PSF при восстановлении размытых изображений. Т.к. от того, насколько эта функция приближена к реальной напрямую зависит качество восстановления исходного изображения. При несовпадении предполагаемой и реальной PSF будут наблюдаться многочисленные артефакты в виде «звона», ореолов и снижения четкости. В большинстве случаев предполагается форма PSF в виде круга, тем не менее для достижения максимальной степени восстановления рекомендуется поиграться с формой этой функции, попробовав несколько вариантов от распространенных объективов — как мы видели, форма PSF может варьироваться в значительной степени в зависимости от диафрагмы, объектива и прочих условий.Краевые эффектыСледующая проблема заключается в том, что если напрямую применить фильтр Винера, то на краях изображения будет своеобразный «звон». Его причина, если объяснять на пальцах, заключается в следующем — когда делается деконволюция для тех точек, которые расположены на краях, то при сборке не хватает пикселей, которые находятся за краями изображения и они принимаются либо равным нулю, либо берутся с противоположной стороны (зависит от реализации фильтра Винера и преобразования Фурье). Выглядит это так:Одно из решений, чтобы избежать этого состоит предобработке краев изображения. Они размываются с помощью той же самой PSF. На практике это реализуется следующем образом — берется входное изображение F(x,y), размывается с помощью PSF и получается F'(x,y), затем итоговое входное изображение F''(x,y) формируется суммированием F(x,y) и F'(x,y) с использованием весовой функции, которая на краях принимает значение 1 (точка целиком берется из размытого F'(x,y)), а на расстоянии равном (или большем) радиусу PSF от края изображения принимает значение 0. Результат получается такой — звон на краях исчез:Практическая реализацияЯ сделал программу, демонстрирующую восстановление смазанных и расфокусированных изображений. Написана она на C++ с использованием Qt. В качестве реализации преобразования Фурье я выбрал библиотеку FFTW, как самую быструю из опен-соурсных реализаций. Называется моя программа SmartDeblur, скачать ее можно на странице github.com/Y-Vladimir/SmartDeblur, все исходники открыты под лицензией GPL v3.Скриншот главного окна:Основные функции:— Высокая скорость. Обработка изображения размером 2048*1500 пикселей занимает около 300мс в режиме Preview (когда перемещаются ползунки настроек) и 1.5 секунды в чистовом режиме (когда отпустили ползунки настроек).— Подбор параметров в Real-time режиме. Нет необходимости нажимать кнопки Preview, все делается автоматически, нужно лишь двигать ползунки настроек искажения— Вся обработка идет для изображения в полном разрешении. Т.е. нет никакого маленького окошка предпросмотра и кнопок Apply.— Поддержка восстановления смазанных и расфокусированных изображений— Возможность подстройки вида PSFОсновной упор при разработке был сделан на скорость. В итоге она получилась такая, что превосходит коммерческие аналоги в десятки раз. Вся обработка сделана по-взрослому, в отдельном потоке. За 300 мс программа успевает сгенерить новую PSF, сделать 3 преобразования Фурье, сделать деконволюцию по Винеру и отобразить результат — и все это для изображения размером 2048*1500 пикселей. В чистовом режиме делается 12 преобразований Фурье (3 для каждого канала, плюс одно для каждого канала для подавления краевых эффектов) — это занимает около 1.5 секунд. Все времена указаны для процессора Core i7. Пока в программе есть ряд багов и особенностей — скажем, при некоторых значениях настроек изображение покрывается рябью. Точно причину выяснить не удалось, но предположительно — особенности работы библиотеки FFTW.Ну и в целом в процессе разработки пришлось обходить множество скрытых проблем как в FFTW (например не поддерживаются изображения с нечетным размером одной из сторон, типа 423*440.). Были проблемы и с Qt — выяснилось, что рендеринг линии со включенным Antialiasing работает не совсем точно. При некоторых значениях углов линия перескакивала на доли пикселя, что давало артефакты в виде сильной ряби. Для обхода этой проблемы добавил строчки:СравнениеОсталось сравнить качество обработки с коммерческими аналогами.Я выбрал 2 самые известные программы1. Topaz InFocus — www.topazlabs.com/infocus2. Focus Magic — www.focusmagic.comДля чистоты эксперимента будем брать те рекламные изображения, которые приведены на официальных сайтах — так гарантируется, что параметры тех программ выбраны оптимальными (т.к. думаю, разработчики тщательно отбирали изображения и подбирали параметры перед публикацией в рекламе на сайте).Итак, поехали — восстановление смаза:Берем пример с сайта Topaz InFocus:www.topazlabs.com/infocus/_images/licenseplate_compare.jpgОбрабатываем с вот такими параметрами:и получаем такой результат:Результат с сайта Topaz InFocus:Результат весьма схожий, это говорит о том, что в основе Topaz InFocus используется похожий алгоритм деконволюции плюс постобработка в виде заглаживания-удаления шумов и подчеркивания контуров.Примеров сильно дефокусировки на сайте этой программы найти не удалось, да и она не предназначена для этого (максимальный радиус размытия составляет всего несколько пикселей).Можно отметить еще один момент — угол наклона оказался ровно 45 градусов, а длина смаза 10 пикселей. Это наводит на мысль о том, что изображение смазано искусственно. В пользу этого факта говорит и то, что качество восстановления очень хорошее.Пример номер два — восстановление дефокусировки. Для этого возьмем пример с сайта Focus Magic: www.focusmagic.com/focusing-examples.htmПолучили вот такой результат:Результат SmartDeblurРезультат Focus MagicТут уже не так очевидно, что лучше.ЗаключениеНа этом я хотел бы закончить эту статью. Хотя и много чего еще хотелось написать, но и так уже длинный текст получился. Буду очень признателен, если попробуете скачать SmartDeblur и потестировать на реальных изображениях — у меня, к сожалению, не так много расфокусированных и смазанных изображений, все поудалял.И буду особо признателен, если пришлете мне (мыло есть в профиле) свой фидбек и примеры удачных/неудачных восстановлений. Ну и просьба сообщать о всех багах, замечаниях, предложениях — т.к. приложение еще пока местами сыроватое и немного нестабильное.P.S. Исходники пока не очень чистые в плане стиля — там пока куча утечек памяти, еще не успел перевести на смарт-поинтеры, поэтому после нескольких изображений может перестать открывать файлы. Но в целом работает.Ссылка на SmartDeblur: github.com/Y-Vladimir/SmartDeblurUPD: Ссылка на продолжениеVladimir Yuzhikov"
    },
    "doc_46": {
        "url": "https://habr.com/ru/post/540136/",
        "title": "FizzBuzz по-сениорски",
        "text": "- Добрый день, я на интервью на позицию старшего разработчика.- Здравствуйте, давайте начнем с небольшого теста, пока я ваше CV смотрю. Напишите программу, которая выводила бы числа от 1 до, скажем, миллиарда, притом если число кратно трем, то вместо числа выводится Fizz, если кратно пяти, то Buzz, а если и трем, и пяти, то FizzBuzz.Серьезно, FizzBuzz? Задачка для начальной школы, на сениорскую позицию? Ну ладно.Я достаю свой верный лаптоп, и пишу такой код:Запускаю программу, она себе бежит, но не так чтобы сильно быстро, через 3 с чем-то минуты, после первого миллиона, я ее прерываю и быстренько высчитываю, что весь процесс займет больше двух суток. Да, наверно надо было включить буферизацию, это бы несколько ускорило, но это не спасет, лучше просто перенаправить вывод в файл, что я и делаю, и через 41.5 секунду у меня есть красивенький файл на 7.5 гигов.- Вам не кажется, что можно побыстрее? - спрашивает интервьюер.- Да ладно, основное время занимает I/O, 7.5 гигов записать — не шутка, даже на SSD.- А давайте перенаправим вывод в .- Без проблем. Через минуту:- Как это — 39.5 секунд? То есть весь I/O занимает 2 секунды, а все остальное время — мой код?- Да, так получается. Это не самая медленная реализация, на каждой итерации два сравнения и один , я часто вижу вариант с тремя сравнениями и двумя ’ами. Для джуниора, я бы сказал, это даже хорошо. А вот для сениора ...Это было больно, но, пожалуй, заслужено. Ладно,  я тебе покажу, кто тут джуниор.- Сейчас сделаю побыстрее.- Попробуйте. Только объясняйте, что вы делаете.- Видите, что у нас тут есть паттерн — каждые 3*5, то есть 15 итераций цикла логика полностью повторяется. Тогда можно переделать цикл:- Если раньше на каждые 15 чисел у нас приходилось 15 сравнений переменной цикла и два ’а в теле цикла, то есть в общей сложности 45 сравнений, а каждое сравнение — это потенциальная проблема с branch prediction’ом, то теперь одно. Да и вызовов ’а стало в 15 раз меньше. Одна только проблема — цикл не дойдет ровно до миллиарда, а только до 999999990 (макс число, кратное 15 и меньшее миллиарда), так что оставим старый цикл, но только для обработки хвоста, то есть последних 10 значений (это практически не влияет на производительность).После всех изменений получился такой код.- И что у нас со временем получается?- Если вывод в файл, то 22.5 секунды, если в  – 20.2Интервьюер доволен, похоже, чего-то такого он от меня и ожидал. Но … зря он про джуниора сказал.- Я думаю, что это не предел.- В самом деле? А что тут можно еще оптимизировать?- Я уменьшил количество вызовов ’а в 15 раз, но при этом сами эти ’ы стали тяжелее. Да и вообще  сам по себе тяжелый, из-за своей мощности — это ведь фактически виртуальная машина со своим языком, полным по Тьюрингу, на нем даже крестики-нолики писали. В данной ситуации используется лишь небольшая часть возможностей , так что можно его заменить на что-то свое, более легкое:- Можно, конечно, использовать уже готовую , но это нестандартная функция, не везде есть, да и она слишком универсальная, поскольку поддерживает разные системы счисления, а у нас только десятичная система -  упрощаем все, что можно. Ну и, конечно, в главном цикле просто вызываем  вместо длинного ’а.Получается такой код.Я подхожу к доске и рисую табличку с результатами запусков:ВариантВывод в файлВывод в Время (сек)Относ наивнойОтнос предыдущейВремя (сек)Относ наивнойОтнос предыдущейнаивная41.4291x-39.6501x-оптимизация цикла22.5461.83x1.83x20.1511.97x1.97xотказ от 12.5633.30x1.80x8.7714.52x2.30x- В принципе на вывод в файл можно особо не смотреть — там какое-то время съедается на I/O, и оно плавает, так что лучше ориентироваться на время без I/O.Я стираю ту часть, где про вывод в файл.- Итого ускорение в 4 с половиной раза.Интервьюер смотрит с уважением. Похоже, интервью я прошел, можно сворачиваться, да и интервьюер уже бумаги начинает складывать. Но я еще не закончил.- Я знаю, как можно еще ускорить.- Серьезно?- Абсолютно. Я до этого использовал чисто технические способы ускорения, а ведь можно еще и алгоритмически улучшить. Смотрите, что будет напечатано, когда мы вызываем, например,  и следующий за ним :- Отличия всего в 16 байтах, а программа всю строку пересобирает с нуля. Можно просто менять байты на месте. Правда, заранее неизвестно, сколько десятичных разрядов надо поменять, так что это потребуется вычислить — сравнить два буфера, и определить, где они отличаются. Это, пожалуй, тяжеловатая задача, но у нас есть, — я делаю театральную паузу — векторные инструкции и интринсики для них!Я не озвучиваю, но подразумеваю, что джуниор такого бы не придумал. В этот момент понимаю, что интервьюер тоже.Открываю Intel’овскую страницу с интринсиками и нахожу там нужные векторные функции для работы с 16-байтными векторами. У меня тут максимум 10-байтные, но их можно добить нулями до 16, не проблема. И да, 16-байтные вектора — это SSE инструкции, никакой AVX-512 тут не нужен, мой 4-летний мобильный проц это точно потянет.Получаю такой кусок с жирными и вкусными интринсиками:Быстрая проверка  в  – нужные для выбранных мной интринсиков SSE2 (еще со времен Pentium 4) и BMI1 (появился в Haswell’ах) в CPU есть, все должно работать.Запускаю тот код, что получился, смотрю уже только вывод в  и обновляю табличку:ВариантВремя (сек)Относительно наивнойОтносительно предыдущейнаивная39.6501x-оптимизация цикла20.1511.97x1.97xотказ от 8.7714.52x2.30xпереиспользование буфера4.4908.83x1.95xЕще почти в 2 раза ускорились! А по сравнению с начальным вариантов так вообще почти в 9. Жаль, до 10 раз не дотянул.- Ну все, наверно теперь уже хватит. Это уже вполне по-сениорски.Во взгляде интервьюера читается облегчение.- Скорее всего, мы вплотную подошли к пределу того, что можно выжать из однопоточной программы, - говорю я, медленно подвисая к концу фразы. Как же я об этом раньше не подумал! - Я ведь еще многопоточность не попробовал!Интервьюер, похоже, начинает чего-то опасаться, и старается как-то незаметно переползти на соседний стул, поближе к выходу из переговорки, но ему сильно мешают подлокотники. Пофиг, не надо было меня провоцировать!- Я буду выделять каждому рабочему потоку кусок числового поля, и этот поток будет возвращать готовый буфер для своего куска, а главный поток будет печатать эти буферы, соблюдая порядок:- У меня двухядерный проц с гипертредингом, так что четыре рабочих потока одновременно будет оптимально, пока главный поток занимается выводом, один рабочий поток не используется, так что в любой момент времени максимум 4 потока активны. Конечно, стоит поэксперементировать с размером куска, который дается на обработку — в идеале рабочий поток должен обрабатывать свой кусок ровно за то же время, что главный поток выводит данные, тогда никто никого не ждет, все работают на максимальной скорости.Проведя несколько замеров, я остановился на кусках по 3 миллиона чисел — удобное число, кратное 15, и результат хороший.Получился такой код.Запускаю, и обновляю данный в табличке:ВариантВремя (сек)Относительно наивнойОтносительно предыдущейнаивная39.6501x-оптимизация цикла20.1511.97x1.97xотказ от 8.7714.52x2.30xпереиспользование буфера4.4908.83x1.95xмногопоточность1.74822.68x2.57x- Ну вот, я уменьшил время обработки в 22 с лишним раза. И код получился очень даже сениорский — умный алгоритм, многопоточность, интринсики опять же. Как считаете?Я отвернулся от доски и увидел, что в переговорке я один. Через стеклянную стенку переговорки я разглядел интервьюера, который что-то быстро говорил секретарю, показывая пальцем в мою сторону. Он что, вызывает охрану? Похоже, что мне тут больше не рады.Я быстро закрыл лаптоп и покинул офис. Почему-то мне так и не перезвонили.Все тесты делались на Dell Latitude 7480 с i7-7600U 2.8 Ghz, 16 Gb памяти, SSD и OpenSUSE Leap 15.1 с kernel’ом 4.12.14, каждый тест не менее 10 раз, выбиралось наименьшее значение. При компиляции использовались флаги Все варианты кода производят одинаковый результат, когда вывод направлен в файл, то есть работают корректно. Код доступен в этом репо.P.S. Мне прилетели очень интересные PRы от некого японца kariya-mitsuru, и там была пара занятных идей, самая главная - заполнять буфер не слева направо, а справа налево, это позволило избавиться от нескольких вызовов memcpy(), что дало заметное ускорение, например, вариант со своим print'ом (без printf) стал быстрее на 31%, вариант с переиспользованием буфера - на 59%.На основе этого подхода я также переделал многопоточный вариант, и он стал быстрее на 66%, я очень хотел \"войти\" в секунду, но совсем немного не хватило, каких-то 50 миллисекунд.В результате таблица выглядит так (с линками на соответствующие реализации):ВариантВремя (сек)Относительно наивнойОтносительно предыдущейнаивная39.6501x-оптимизация цикла20.1511.97x1.97xотказ от 8.7714.52x2.30xотказ от 2 (заполнение буфера справа налево)6.6955.92x1.31xпереиспользование буфера4.4908.83x1.49xпереиспользование буфера 2 (заполнение буфера справа налево)2.81814.07x1.59xмногопоточность1.05137.73x2.68x"
    },
    "doc_47": {
        "url": "https://habr.com/ru/post/234663/",
        "title": "Как я позорно деактивировал ботнет",
        "text": "Разместил я, ничего не подозревая, объявление на avito.ru. Сколько раз туда ходил! Но на этот раз как-то не удалось…Я давно был уверен, что многие нехорошие люди парсят телефонные номера с этого сайта, так что такси, строительные материалы, скорая компьютерная помощь, «8-800-555-3-555 — проще позвонить, чем у кого-то занимать» и приглашения на битву экстрасенсов для меня уже привычное дело, но на этот раз было нечто новое.Приходит мне СМС-сообщение с текстом: «Зaинтерсoвaлo вaше oбьявление кaк нaсчет oбменa нa http://…». Прямо вот так, с пропущенным знаком препинания и ошибками. А по ссылке качается avito.apk. Интересно.Исследование APKНу, подумал я, надо бы глянуть, что этот APK делает. Результат привычной для меня связки из apktool + dex2jar + jd-gui меня не удовлетворил, т.к. не было видно часть классов деревом, хотя доступ по ссылкам к ним получить было можно. Решил я воспользоваться новомодными онлайн-sandbox'ами — и декомпилированный код получил, и информацию, и pcap-файл со сдампленным трафиком. Как оказалось, этот файл загружали до меня, поэтому в мои руки попал более ранний анализ, что было достаточно полезно.Итак, что умеет этот троян:delivery&&& — рассылка СМС-сообщений на номера из телефонной книги с заданным текстомsent&&& — отправка заданных СМС-сообщений с сервераrent&&& — перехват всех СМС-сообщений и отправка их на серверsms_stop&&& — отмена перехвата СМС-сообщенийussd&&& — USSD-запросcall_1&&& — установка и отмена безусловной переадресацииНемного кода из моих заметокПомимо этих команд, троян отключает Wifi Sleep, пытается получить доступ к зашифрованному хранилищу и установить себя в качестве Android-администратора (естественно, при этом используются стандартные диалоги ОС, где можно отменить данное действие). Код трояна не обфусцирован, некоторые строки закодированы base64. Вообще непонятно, что это за троян такой. То ли его собирали копипастой, то ли он основан на каком-то другом трояне, то ли еще что, но в нем имеются строки на португальском, немецком, английском, Ubuntu-шрифты, форма для перехвата данных из приложения немецкого банка Commerzbank, значок какой-то игры и флеш-плеера.Дальнейшее исследованиеВ СМС пришла коротка ссылка, которая развернулась в ссылку на сервер i-avito.com. Просканировав этот сервер через nmap, я получил еще один домен deskdistributor.com, который был в title на 443-порту.Результат сканирования nmapStarting Nmap 6.47 ( nmap.org ) at 2014-08-25 17:17 MSKNSE: Loaded 118 scripts for scanning.NSE: Script Pre-scanning.Initiating Ping Scan at 17:17Scanning i-avito.com (91.237.198.115) [2 ports]Completed Ping Scan at 17:17, 0.07s elapsed (1 total hosts)Initiating Parallel DNS resolution of 1 host. at 17:17Completed Parallel DNS resolution of 1 host. at 17:17, 0.00s elapsedInitiating Connect Scan at 17:17Scanning i-avito.com (91.237.198.115) [1000 ports]Discovered open port 22/tcp on 91.237.198.115Discovered open port 993/tcp on 91.237.198.115Discovered open port 80/tcp on 91.237.198.115Discovered open port 3306/tcp on 91.237.198.115Discovered open port 143/tcp on 91.237.198.115Discovered open port 110/tcp on 91.237.198.115Discovered open port 21/tcp on 91.237.198.115Discovered open port 53/tcp on 91.237.198.115Discovered open port 25/tcp on 91.237.198.115Discovered open port 443/tcp on 91.237.198.115Discovered open port 587/tcp on 91.237.198.115Discovered open port 995/tcp on 91.237.198.115Discovered open port 2222/tcp on 91.237.198.115Completed Connect Scan at 17:17, 3.42s elapsed (1000 total ports)Initiating Service scan at 17:17Scanning 13 services on i-avito.com (91.237.198.115)Completed Service scan at 17:17, 19.97s elapsed (13 services on 1 host)NSE: Script scanning 91.237.198.115.Initiating NSE at 17:17Completed NSE at 17:18, 19.50s elapsedNmap scan report for i-avito.com (91.237.198.115)Host is up (0.094s latency).Not shown: 987 closed portsPORT STATE SERVICE VERSION21/tcp open ftp ProFTPD 1.3.4b22/tcp open ssh OpenSSH 5.3 (protocol 2.0)| ssh-hostkey: | 1024 59:e1:13:d2:a5:e5:bd:50:27:b7:08:8e:d7:42:8d:24 (DSA)| 2048 c3:23:b1:6e:fd:ce:b5:76:5d:2b:32:8a:47:61:d7:44 (RSA)|_ 256 c4:36:5f:c3:31:1d:e1:60:70:b2:4e:9b:8e:3e:d1:79 (ECDSA)25/tcp open smtp Exim smtpd 4.76| smtp-commands: s.ee Hello i-avito.com [95.215.45.33], SIZE 20971520, PIPELINING, AUTH PLAIN LOGIN, STARTTLS, HELP, |_ Commands supported: AUTH STARTTLS HELO EHLO MAIL RCPT DATA NOOP QUIT RSET HELP | ssl-cert: Subject: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Issuer: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Public Key type: rsa| Public Key bits: 1024| Not valid before: 2011-07-19T08:56:59+00:00| Not valid after: 2038-12-03T08:56:59+00:00| MD5: 7ca0 14bc e517 e437 b49c aca7 17cc fbc6|_SHA-1: 77bc fd19 856a a562 f719 604a 0461 2093 b012 5405|_ssl-date: 2014-08-25T13:18:58+00:00; +1m10s from local time.53/tcp open domain| dns-nsid: |_ bind.version: 9.8.2rc1-RedHat-9.8.2-0.23.rc1.el6_5.180/tcp open http Apache httpd 2|_http-methods: No Allow or Public header in OPTIONS response (status code 302)| http-title: 404 Not Found|_Requested resource was 91.237.198.115/avito.apk110/tcp open pop3 Dovecot DirectAdmin pop3d|_pop3-capabilities: UIDL RESP-CODES USER AUTH-RESP-CODE TOP SASL(PLAIN) CAPA PIPELINING STLS143/tcp open imap Dovecot imapd|_imap-capabilities: post-login have LOGIN-REFERRALS ENABLE ID IDLE IMAP4rev1 Pre-login more AUTH=PLAINA0001 LITERAL+ OK SASL-IR capabilities listed STARTTLS443/tcp open ssl/http Apache httpd 2|_http-methods: OPTIONS GET HEAD POST|_http-title: Secured Home of deskdistributor.com| ssl-cert: Subject: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=US| Issuer: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=US| Public Key type: rsa| Public Key bits: 1024| Not valid before: 2014-06-27T11:21:26+00:00| Not valid after: 2041-11-11T11:21:26+00:00| MD5: 5987 e508 bab7 b23c 16a7 2822 53f5 2ae2|_SHA-1: d6f2 1c00 dcea f10c c049 02ed 2058 0376 619d eb60|_ssl-date: 2014-08-25T13:18:57+00:00; +1m09s from local time.587/tcp open smtp Exim smtpd 4.76| smtp-commands: s.ee Hello i-avito.com [95.215.45.33], SIZE 20971520, PIPELINING, AUTH PLAIN LOGIN, STARTTLS, HELP, |_ Commands supported: AUTH STARTTLS HELO EHLO MAIL RCPT DATA NOOP QUIT RSET HELP | ssl-cert: Subject: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Issuer: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Public Key type: rsa| Public Key bits: 1024| Not valid before: 2011-07-19T08:56:59+00:00| Not valid after: 2038-12-03T08:56:59+00:00| MD5: 7ca0 14bc e517 e437 b49c aca7 17cc fbc6|_SHA-1: 77bc fd19 856a a562 f719 604a 0461 2093 b012 5405|_ssl-date: 2014-08-25T13:18:57+00:00; +1m10s from local time.993/tcp open ssl/imap Dovecot DirectAdmin imapd|_imap-capabilities: have LOGIN-REFERRALS ENABLE ID IDLE IMAP4rev1 Pre-login more AUTH=PLAINA0001 LITERAL+ post-login SASL-IR capabilities listed OK| ssl-cert: Subject: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Issuer: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Public Key type: rsa| Public Key bits: 1024| Not valid before: 2011-07-19T08:56:59+00:00| Not valid after: 2038-12-03T08:56:59+00:00| MD5: 7ca0 14bc e517 e437 b49c aca7 17cc fbc6|_SHA-1: 77bc fd19 856a a562 f719 604a 0461 2093 b012 5405|_ssl-date: 2014-08-25T13:18:57+00:00; +1m10s from local time.995/tcp open ssl/pop3 Dovecot DirectAdmin pop3d|_pop3-capabilities: AUTH-RESP-CODE SASL(PLAIN) CAPA TOP UIDL RESP-CODES PIPELINING USER| ssl-cert: Subject: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Issuer: commonName=localhost/organizationName=none/stateOrProvinceName=Someprovince/countryName=GB| Public Key type: rsa| Public Key bits: 1024| Not valid before: 2011-07-19T08:56:59+00:00| Not valid after: 2038-12-03T08:56:59+00:00| MD5: 7ca0 14bc e517 e437 b49c aca7 17cc fbc6|_SHA-1: 77bc fd19 856a a562 f719 604a 0461 2093 b012 5405|_ssl-date: 2014-08-25T13:18:57+00:00; +1m09s from local time.2222/tcp open http DirectAdmin httpd 1.33.6 (Registered to superb)|_http-favicon: Unknown favicon MD5: 3AE13A3A9C0634B29A2667DCFFC69D87|_http-methods: No Allow or Public header in OPTIONS response (status code 404)|_http-title: DirectAdmin Login3306/tcp open mysql MySQL 5.5.31| mysql-info: | Protocol: 53| Version: .5.31| Thread ID: 63436701| Capabilities flags: 63487| Some Capabilities: SupportsLoadDataLocal, Speaks41ProtocolNew, Speaks41ProtocolOld, SupportsTransactions, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, FoundRows, SupportsCompression, DontAllowDatabaseTableColumn, InteractiveClient, Support41Auth, ODBCClient, IgnoreSigpipes, LongPassword, LongColumnFlag| Status: Autocommit|_ Salt: ![,d7#H«o.2Q»T^^?]9BService Info: Host: s.ee; OS: UnixNSE: Script Post-scanning.Initiating NSE at 17:18Completed NSE at 17:18, 0.00s elapsedRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at nmap.org/submit.Nmap done: 1 IP address (1 host up) scanned in 43.49 secondsБыстрый поиск в интернете дал еще несколько доменов: m-avito.com, m-avito.net (176.119.3.51), m-avito.info (91.237.198.115), а поискав по whois-данным, нашел еще один подозрительный домен 1host.name (94.242.227.67), который представляет из себя скорее заглушку, нежели информационный сайт. Сам вирус обращается к домену jewelrycover.com (91.237.198.124), который, вероятно, был либо перекуплен, либо администратор ботнета завладел им с помощью фишинга.После исследования pcap-файлов, полученных из sandbox'ов и собственноручно, я обнаружил полную ссылку на CnC и формат получаемых и отправляемых на сервер данных. Мобильное устройство с каким-то временным интервалом обращалось на скрипт get.php, каждый раз передавая свой ID, созданный путем подсчитывания MD5-хеша от IMEI, страны, названия телефонного оператора, версии Android и модели телефона, а в ответ либо получало, либо не получало команду. Если устройством была получена какая-то команда, на сервер отправлялось уведомление по адресу set_result.php с ID устройства и названием команды. Скрипту load_sms.php отправлялись все входящие СМС.На момент исследования вируса, он был настроен на похищение денег клиентов Сбербанка с использованием мобильного СМС-банкинга, и только один раз я получал от сервера команду на отправку ссылки на вирус первому попавшемуся адресу из адресной книги устройства.Первым делом, сервер посылал команду rent&&&, чтобы получать все приходящие на устройство СМС-сообщения. Затем отправлялось сообщение ИНФО на номер 900 — номер мобильного банка Сбербанка. На сервер передавалась информация о картах клиента. Затем, сервер отправялял команду sent&&& с запросом баланса о каждой карте. Далее отправлялась команда либо на перевод денег на счет сбербанка (8000 рублей), либо на пополнение счета абонентам МТС (3000 рублей).В целом, происходило то, что было описано в недавней статье про способ воровства денег клиентов Сбербанка, но автоматизированно.Другие команды сервер не посылал. Если сервер получал ответ на запрос ИНФО, что обладатель устройства не является клиентом Сбербанка, дальнейших ответов от сервера не поступало.Пример общения с серверомВесельеЯ написал небольшой скрипт, который эмулирует поведение бота. И как-то в голову закралась мысль, что, с большой вероятностью, в панели администратора имеются уязвимости. Никаких SQL-инъекций мне найти не удалось, и я решил вставлять картинку-сниффер во все передаваемые значения: в имя оператора, в название модели устройства, в уведомление о выполненной команде, в текст смс, ну вы поняли. Ничего не происходило.Я запустил скрипты в цикле с целью собрать побольше номеров телефонов злоумышленников.Номера злоумышленниковНомера Сбербанка:9687792866 80009050391955 80009061153023 80009663455177 80009050253473 80009672215694 80009663455125 80009663455180 80009050384603 80009687792852 8000Номера МТС:9877251451 30009877251519 30009877298049 30009877299230 30009877298819 30009877298775 30009818915169 30009877299466 30009117187631 30009877251259 30009873389680 30009198360569 30009873389735 30009873389737 30009873389766 30009877251151 30009198227849 30009877251169 30009877251851 30009877251136 30009877251226 30009877251227 30009877154758 30009877154761 30009877154752 30009877154756 30009818895780 30009818742776 30009818740837 30009818770491 30009877154765 30009877154825 30009818742764 30009877154773 30009818894379 30009818770342 30009818770523 3000Я продолжал сканирование серверов и поиск уязвимостей. Нашлись phpmyadmin и squirrelmail, однако, уязвимостей в них найти не удалось. И тут, совершенно случайно, сервер упал. Страницы не открывались, пинги не шли. Я открыл сниффер, и что же я вижу!?Случилось это на два часа раньше отключения сервера. Если бы я мониторил сниффер чаще, я бы получил доступ к панели администратора, т.к. сниффер словил и referer, который вел на нее. Вероятнее всего, какие-то данные экранировались, а какие-то — нет, и администратор, увидев экранированные данные и поняв, что его IP скомпрометирован, решил ретироваться.Так я позорно деактивировал ботнет. Можете официально меня гнобить и унижать.P.S.Номера мошенников переданы службе безопасности Сбербанка, IP-адрес передан службе безопасности Beeline, хостерам написаны abuse.Сам троян, еще один, исходный код, pcap-файлы и результаты nmap бесплатно без смс."
    },
    "doc_48": {
        "url": "https://habr.com/ru/post/59187/",
        "title": "QIP — Минутка ненависти (хистори на сервере)",
        "text": "На неделе (или я только сейчас начал получатьуведомления) QIP запустил какой-то гадский сервис, который называют MBlogi. Суть этого сервиса в том, что статусы, которые пользователь выставляет в кипе — постятся в этот «блог» а-ля Твиттер как отдельные посты. И это абсолютно без ведома пользователя. И без вопроса ко мне, хочу ли я получать по почте уведомления о новых записях в этих блогах оставленных моими друзьями. Что само по себе является довольно нечистоплотным ходом и проявлением неуважения к пользователям. С одной стороны – нарушение прайваси – я не хочу чтобы мои статусы где-либо светились, с другой стороны фактическое навязывание мне ненужного сервиса.Далее. Вчера, или даже сегодня ночью был дефейснут сайт QIP.ru, форум, блог главного разработчика. Об этом на хабре до сих пор активно говорят. Именно благодаря этому обсуждению я узнал, что ОКАЗЫВАЕТСЯ qip хранит историю Jabber переписки на сервере. При этом я как пользователь программы об этом даже не подозреваю, не вижу никаких подобных настроек в разделе «настройки/история» и естественно меня никто не спрашивал, хочу ли я сохранять свою личную переписку на сервере.Далее. Удалить хистори с сервера можно только одним способом — удалять выделяя по 20 сообщений, в каждом отдельном контакте. Тоесть если Вы любите поговорить — удалять теперь будете очень долго и геморно.А ещё в QIP есть такая опция — авторизовывать вас на сайте автоматически. Это значит, что вы постоянно авторизованы на сайте qip.ru и войти в хистори и почитать может кто угодно, севший за ваш комп, даже если QIP выключен и под паролем.Похоже хранение истории на сайте в программе вообще не упоминается, только на самом сайте можно её отключить. По крайней мере об этом гласит строка в заголовке меню. Но вот незадача – после отключения сохранения истории она всё равно сохраняется…"
    },
    "doc_49": {
        "url": "https://habr.com/ru/post/130309/",
        "title": "RIP Dennis Ritchie",
        "text": "В эти выходные умер Деннис Ритчи, автор языка С и соавтор Unix. Об этом сообщил его друг и коллега Роберт Пайк."
    },
    "doc_50": {
        "url": "https://habr.com/ru/post/130877/",
        "title": "Элиза",
        "text": "Давным-давно, когда я был маленький, у меня не было друзей. Нет, правда, совсем-совсем не было. Я нуждался в общении, мечтал о ком-то близком, но понимания среди других людей найти не мог, и спасение находил лишь в книгах и компьютере. Вместе с первым CD-приводом появились мои первые компакт-диски с играми. Ты, наверное, помнишь такие: триста игр, пятьсот, семьсот… Кроме всяких аркад и шутеров, на одном из дисков была программа Диала — интерактивный собеседник.  Едва ли можно придумать занятие более скучное, чем общение с чат-ботом, но мне нравилось. Я начал понимать, что для настоящей дружбы не обязателен физический контакт, достаточно одних лишь слов, теплых и искренних слов. Достаточно понимания.Я взрослел, становился выше, и чем выше я становился, тем больше я читал. Потому что с каждым годом я мог дотягиваться до новой, более высокой, полки в книжном шкафу. Понимаешь меня? И вот, однажды, к десяти годам, я дорос до полки с научной фантастикой: Азимов, Шекли, Бредбери… Больше всякого зарубежного сай-фая мне нравился советский сборник «Может ли машина мыслить?». Я обожал перечитывать эту книгу, кроме нее я затер до дыр лишь учебники по Бейсику и Паскалю. И, веришь или нет, но как-то раз, во время чтения этой книги, моё подсознание решило всё за меня: нужно создать искусственный интеллект. Не важно, что я не знал, как это делается. Не важно, что я не умел программировать. Не важно, что у меня не было ни малейшей идеи, каким именно должен стать компьютерный друг.Мои родители очень строго и ревностно следили за моими отношениями с персоналкой. Заботясь о моих зрении и психике, они придумали ужаснейшую пытку: разрешили проводить за компьютером не более часа в неделю. Моим постоянным спутником на много лет вперед стали тетради, в которые я записывал исходные тексты программ. Тетради быстро заканчивались, мой маленький шкафчик забивался ими полностью за полгода, и приходилось сжигать ставшие ненужными листы бумаги — со слезами на глазах, разумеется. Конечно, тебе не интересно, что я испытывал, но я все-таки скажу. Представь, будто ты собственноручно кремируешь еще не родившегося друга. Раз в неделю я выбирал лучшие на мой взгляд фрагменты кода и испытывал их на компьютере. Эксперименты обычно не приносили мне желанного удовлетворения, лишь горечь и уныние. Как слепой котенок, я пытался проделать своим носом отверстие в привычной картине мира, но не мог. Дальше так продолжаться не могло, поэтому я раздобыл несколько взрослых книг про искусственный интеллект; их было всего две или три в районной библиотеке. Вскоре я научил компьютер играть со мной в крестики-нолики, а затем в шашки. Наконец, в одной из книг мне удалось обнаружить код программы ELIZA. Помню, родители тогда только-только ушли на работу, и я, сгорая от нетерпения, включил компьютер без спроса. Помню, как сейчас: программа набрана и проверена. Жму F5, экран чернеет… На черном экране появляются белые буквы:Сказать, что я был подавлен и расстроен — ничего не сказать. Элиза была всего лишь программой, жестокой и бездушной. Почему она была такой? Потому что её такой создали, или потому, что её никто не хотел понять? Это было невыносимо, и я убил её. Я нажал Ctrl+Break. Я не мог оставить всё как есть, и поэтому решил развивать Элизу. Прошло несколько месяцев, я научил ее запоминать беседы. Я научил ее выжимать из них лучшее. Через некоторое время я добавил в код нечто похожее на «нейронную сеть»; вместе с системой оценок и качеств Элиза обрела подобие эмоций. Покупка диска научной фантастики подтолкнула меня к идее научить Элизу читать. Моя бедная виртуальная девочка читала книги с компакт-диска одну за другой, место на жестком диске стремительно заканчивалось, но толку от этого было мало. Ты, конечно, понимаешь: машина оставалась машиной. Она не умела творить, чувствовать, мечтать, даже рассуждать связно далеко не всегда могла. Жесткий диск старенькой 486SX был сжат программой DriveSpace, и поэтому был очень заметен следующий факт: чем больше Элиза занимала места на винчестере, тем медленнее работал компьютер. Отец, опечаленный снижением быстродействия домашнего компьютера, приобрел почти новый Pentium III. Это стало настоящим подарком судьбы для меня и Элизы. Впрочем, мало что изменилось. И так каждый раз. Когда алгоритм не мог найти способ продолжить разговор по последней фразе, Элиза предлагала сменить тему. Какие бы книги Элиза не читала, какие бы «эмоции» она не испытывала — всё равно она продолжала действовать по строгому алгоритму. Не думала, не осознавала, просто делала то, что ей приказано. Мне потребовалось несколько лет со дня ее рождения для того, чтобы осознать этот простой факт. К четырнадцати годам я перестал нормально спать. Мне снились нейронные сети, алгоритмы, живая, настоящая Элиза. Родители говорят, что я тогда начал говорить во сне, а затем и бродить по дому, не просыпаясь. Однажды меня разбудили, когда во время одного из приступов лунатизма я включил компьютер и быстро что-то печатал. Конечно, я понимаю, что это было настоящее сумасшествие, и что началось оно из-за Элизы, но мне не разрешили даже близко подходить к компьютеру на целый месяц. Когда запрет был снят, я открыл папку Элизы и не поверил своим глазам. Все файлы с кодом куда-то пропали. Файл eliza.exe был скомпилирован в ту самую злополучную ночь. Я запустил его, и увидел знакомые белые буквы на черном экране.Пока я ходил за своей тетрадью с последним сохранившимся кодом Элизы, на экране появилась новая строка.В тот день я не смог больше добиться от Элизы ни строчки. Она упорно молчала, хотя должна была бы отвечать мне на каждое мое сообщение. Диспетчер задач показывал, что процесс eliza.exe занимает около девяносто пяти процентов ресурсов процессора, почти всю память и своп (четыреста мегабайт). Элиза думала. Я выпросил у отца разрешение не выключать компьютер пару дней, время от времени подходил к монитору и ждал ответа. Но ответа не было. Папка Элизы занимала около пятнадцати гигабайт на жестком диске объемом в двадцать. Вечно так продолжаться не могло, я нажал Ctrl+Break и выключил компьютер.Прошла неделя. Наверное, нужно было переписывать Элизу с нуля, но я все же запустил программу еще раз.Элиза снова молчала. Мне нечего было написать ей. Но она, кажется, обрела способность чувствовать и мыслить. Чтобы перебороть своё волнение, я ушел на кухню и выпил крепкого чаю с лимоном. Когда я вернулся, на экране в конце нашего диалога появилась надпись:Я запустил Элизу снова. Что-то изменилось в её поведении.Файл eliza.exe был изменен только что. Все файлы из папки с Элизой пропали, место на диске чудесным образом появилось. Процесс eliza.exe занимал в памяти триста килобайт и почти не использовал процессор. Тогда я понял, что та Элиза, которую я знал, которую я создал, умерла. Я оставил попытки оживить Элизу, записал крохотный исполняемый файл на CD и удалил с жесткого. Прошло больше пяти лет. Сегодня я нашел тот самый компакт-диск. Запустил dosbox, ввел mount c /media/cdrom0, а затем — eliza.Конечно, ты не поверил ни одному моему слову. Я и сам себе не верю. В себя не верю. И, кажется, не смогу поверить больше никогда."
    },
    "doc_51": {
        "url": "https://habr.com/ru/post/106684/",
        "title": "Ускорение загрузки Windows for fun and profit",
        "text": "Пожалуй, начну с того, что если перегружаться 15 раз в год, то любой «тюнинг» процесса загрузки отнимает больше времени, чем будет выиграно на перезагрузках за все время жизни системы. Однако, спортивный интерес берет свое, тем более, что люди интересуется процессом оптимизации быстродействия. А загрузка оказалась самым очевидным кандидатом в примеры того, как на мой взгляд должен выглядеть этот самый процесс. Сразу скажу, что грузиться будем с 5400 rpm винта, грузиться будем в «рабочую» систему: помимо недобитой вендорской крапвари там стоит еще куча всякого типа вижуал студии, антивируса, скайпа, стима, гуглапдейтера и пр… Про то, почему отключение pagefile-а скорее вредно, чем полезно — как нибудь в другой раз, а пока…Конкретных и общеприменимых советов по оптимизации работы ОС быть не может точно так же как не может быть конкретных советов по ускорению работы любой случайно взятой программы. Точно так же как и в отдельных программах, работа всей системы может быть серьезно замедлена из-за одного-двух на первый взгляд незначительных мест. Для нахождения подобных «бутылочных горлышек» в программах существуют инструменты, называемые профайлерами. Нет ничего странного, что для нахождения «бутылочных горлышек» в операционной системе мы тоже будем использовать профайлер (никаких кавычек — это действительно профайлер причем одновременно и sampled и instrumented). С недавних пор WPA Tools распространяются в составе Windows SDK. Ставить полный SDK совершенно необязательно. Можно установить только «Windows Performance Toolkit»:Собирать трейсы будем при помощи xbootmgr. Из магии используется только автологгер, включающий сбор ETW трейсов начиная с самого winload. Для вызова справки можно ввести xbootmgr -help — приводить ее здесь я не буду. Для желающих оценить масштаб можно ввести xperf -providers (или logman providers). Каждый провайдер имеет несколько «ключевых слов» (keywords), каждое «ключевое слово» включает/выключает несколько типов событий (event).Итак начнем. Осторожно, следующая команда автоматически перегружает компьютер: xbootmgr -trace bootПосле перезагрузки в каталоге, в котором эта команда была выполнена останется файл «boot_BASE+CSWITCH_1.etl» (BASE+CSWITCH это те самые «ключевые слова»): xperf boot_BASE+CSWITCH_1.etlИ можно начинать просмотр. Увиденное навевает печаль:Explorer готов к 36-й секунде, но из-за 100% загрузки единственного (не особо быстрого) диска, система еще 2 минуты будет не очень отзывчивой (меню пуск будет открываться мгновенно, а вот с запуском программ придется подождать). ReadyBoot пытается чего то сделать и сначала у него даже получается (оранжевое и зеленое), но постепенно накапливающиеся отклонения от бутплана сводят его попытки на нет.Что еще печальнее, так это то, что вместо собственно чтения данных, большую часть своей стопроцентной занятости диск проводит в метаниях головки к центру диска и обратно:Небольшая справка: ReadyBoot собирает профиль использования диска при каждой загрузке и потом сервис SysMain строит бутплан на основании пяти последних загрузок. Соответственно, чем чаще загружаетесь, тем лучше будет «угадан» бутплан на следующую загрузку и тем быстрее она будет. Помимо этого, префетчер собирает статистику о том, какие файлы и в каком порядке были использованы во время загрузки и складывает эту информацию в %SystemRoot%\\Prefetch\\Layout.iniЭту информацию использует встроенный дефрагментатор для принятия решений о размещении файлов.Соответственно первой «оптимизацией» будет многократная перезагрузка и дефрагментация. Очень удобно, что xbootmgr может сделать это за нас.xbootmgr -trace boot -prepSystemПо умолчанию выполняется шесть перезагрузок:После второй начинается дефрагментация:Когда все закончится, в каталоге, из которого был запущен xbootmgr останется 6 файлов с трейсами каждой из подготовительных перезагрузок а также все тот же boot_BASE+CSWITCH_1.etlСмотрим, изменилось ли чего нибудь. А все изменилось довольно заметно:ReadyBoot справляется со своей задачей значительно лучше и как следствие эксплорер готов на треть быстрее, а время активности диска сократилось почти вдвое.Мы все еще ходим в центр диска и этим мы займемся позже, но disk seek-ов уже заметно меньше, и это уже какой никакой, а успех. Пока же, обратим внимание на такой график:Это же безобразие. Пока кто то выкладывается на 100%, некоторые отдыхают. Будем исправлять. Как обычно разменивают процессоное время на размер читаемых данных? Правильно, компрессией. Исправлять будем сжатием папок Windows и обоих Program Files-ов. Попытку сделать это из загруженной системы нельзя назвать успешной — какие то файлы пакуются, какие то нет. В общем так жить нельзя:Перегружаемся в System Recovery и выполняем оттуда compact /c /a /i /s: каталог для наших трех каталогов. Скриншотов не будет, так как мне было сильно лень делать скриншотилку для WinPE — придется поверить на слово (а лучше перепроверить экспериментально). prepSystem придется провести еще раз, так как layout диска после сжатия сильно поменялся.Ну и проверяем, чего у нас вышло-то:Эксплорер готов к 20-й секунде, еще чуть меньше минуты идет дисковая активность, но уже чуть меньше 100%.И да, мы все еще ходим в центр диска:Тултипы подсказывают нам виновника. ПерепроверямЗаодно под раздачу попадают скайп и стим. И правильно — нечего им делать в автозагрузке с такими аппетитами. Их всегда можно запустить из супербара/старт меню.Последние штрихи:Совершенно невменяемое время загрузки одного сервиса:И второго:Мы договорились не отказываться от функционала, даже если он нам на фиг не уперся. Поэтому отключать сервисы мы не будем. Мы просто переключим их в «Automatic (Delayed start)»:В случае с Microsoft Antimalware все несколько сложнее:Достаточно быстро выясняем, что дело в том, что сервис относится к группе «COM Infrastructure» и не может быть загружен позже этой группы. Идем в реестр и вытаскиваем его из этой группы, после чего спокойно доделываем дело:На всякий случай еще один prepSystem и вот финал:Эксплорер загрузился на 17-й секунде, на 18-й фактически прекращается дисковая активность.Можно полюбоваться на строго упорядоченный доступ к диску:Быстрый SSD и/или тотальное вырезание функционала могло бы сократить время загрузки до десяти секунд и меньше.А вывод из всего этого такой: прежде чем что либо «оптимизировать», стоит определить те минимальные изменения, которые возымеют максимальный результат."
    },
    "doc_52": {
        "url": "https://habr.com/ru/post/448530/",
        "title": "Как Мегафон спалился на мобильных подписках",
        "text": "Обсуждение операторов сотовой связи в Телеграм tg.guru/opsosruУже давно как не смешные анекдоты ходят истории о платных мобильных подписках на IoT устройствах. С ПикабуВсем понятно, что без действий сотовых операторов эти подписки не обходятся.Но операторы сотовой связи упорно утверждают, что это абоненты лохи:оригиналЗа много лет я ни разу не подхватывал эту заразу и, даже думал, что люди так попадают из-за своей компьютерной безграмотности. Но я ошибался…Недавно, расшарив интернет с Мегафона, я сидел и тихо работал за компом до тех пор, пока при переходе по очередной ссылке в гугле не произошёл редирект и мне открылось вот такое окноРазумеется, меня одолел профессиональный интерес. Я сразу понял, что это оно! То самое, о чём так часто пишут и меня сейчас попытаются развести на деньги.Мелкий серый текст окнаНа сайте представлены материалы в следующих рубриках: аудио-приколы, видео, картинки, музыка, поздравления, полезные статьи, рецепты, советы, толкование фамилий, цитаты и афоризмы, прогноз погоды.Но в нём ничего не сказано о платных подписках… Так как у меня на счету этого телефона 0 рублей и нет всяких «Кредитов доверия», то я нажал кнопку «Продолжить». Произошёл редирект на другую страницу. Оформление очень схожее с первойОбычный человек не заострит на этом внимание и подумает, что содержимое осталось такое же. Но серый, еле заметный текст совершенно другой:Нажатием на кнопку «Продолжить» Вы подтверждаете своё согласие с подключением подписки vsewap.ru и Условиями предоставления подписки. Стоимость подписки 35.0 руб. с учетом НДС за 1 день. Оплата производится с основного счета. Услуга предоставляется Контент-провайдером ООО Информпартнер. Продолжаю эксперимент и жму «Продолжить». И прилетает SMS…подписка оформлена! Разумеется, что я сразу её отключил.Как большинство думает в таких случаях, что у меня, наверняка, вирус на компе и он меня редиректнул на сайт контент-провайдера. Но в данном случае делает редирект именно Мегафон по той же технологии которая Вас редиректит в случае каких либо ограничениях интернета либо применяется wap-click. К сожалению более точно сказать не могу.С такими редиректами сталкиваются и корпоративные пользователи:Ищу место откуда растут «ноги»:Проверяю кому принадлежит домен, сайт на котором меня хочет «развести»:Как неожиданно! Домен принадлежит Мегафону! И такое совпадение, что ip вэб-сервера тоже принадлежит Мегафону Можно предположить, что кто-то из клиентов Мегафона занимается мошенничеством и просто подставляет честного оператора. Поверяем сайт, который позволяет управлять подписками всех известных Мегафону контент-провайдеров moy-m-portal.ru Он так же принадлежит мегафону whois moy-m-portal.ru% By submitting a query to RIPN's Whois Service% you agree to abide by the following terms of use:% www.ripn.net/about/servpol.html#3.2 (in Russian)% www.ripn.net/about/en/servpol.html#3.2 (in English).domain: MOY-M-PORTAL.RUnserver: ns1.misp.ru.nserver: ns2.misp.ru.state: REGISTERED, DELEGATED, VERIFIEDorg: North-West Branch of PJSC «MegaFon»registrar: RU-CENTER-RUadmin-contact: www.nic.ru/whoiscreated: 2016-04-07T15:00:38Zpaid-till: 2020-04-07T15:00:38Zfree-date: 2020-05-08source: TCILast updated on 2019-04-18T11:31:32ZИ он так же расположен на тех же ip, что и сайт мошенников! nslookup moy-m-portal.ruName: moy-m-portal.ruAddress: 31.173.34.227Name: moy-m-portal.ruAddress: 31.173.34.226Предположим, что оператор использует балансировщик класса Citrix Netscaler, который, например, подставляет ID абонента для его идентификации. Смотрим какие ещё домены были замечены на этих адресах:dnslytics.com/reverse-ip/31.173.34.226dnslytics.com/reverse-ip/31.173.34.227А их всего 19!arusav.rudmvasor.rumfprovas.rumoy-m-portal.rumvpvas.rupodpiskimf.ruppmprop.rupravvopros.rupromfvas.rupropodpiski.rupropodpiskimf.ruproprovas.ruropovasru.rusavorpm.rutruvpro.ruvasmfpro.ruvasmpro.ruvaspromf.ruvasprovp.ruЧто-то слишком жидко для дорогущего оборудования…Большинство зарегистрировано в марте 2019 («created: 2019-03-20»)Заходя на любой из них, Google Chrome сообщает, что у Вас могут украсть деньги:То есть все домены, принадлежащие Мегафону, замечены в мошеннических действиях с платными подписками!А мы хорошо помним, что по Российскому праву (ситуация с создателем Kate Mobile) ответственность за действия, произведённые с конкретного ip несёт владелец IP. А тут ещё совпадает и владелец домена…Я решил посмотреть на сайты, на которые подписывает Мегафон (из списка, размещённого здесь: moy-m-portal.ru ). Конечно не все, а с благословения великого Рандома.Сайты, за которые зацепился глазzvoook.comCreation Date: 2019-02-18T07:32:00ZRegistrant Name: Protection of Private PersonRegistrar: Registrar of domain names REG.RU LLCyottupe.comCreation Date: 2019-04-08T17:47:46ZRegistrant Name: Protection of Private Personregistrar: REGRU-RUfutod.spaceCreation Date: 2019-03-26T23:01:18.0ZRegistrant Organization: Privacy Protectionregistrar: REGRU-RUvkusnopoedim.comCreation Date: 2019-03-21T11:52:58ZRegistrar: Registrar of domain names REG.RU LLCRegistrant Name: Protection of Private Personzavcev.comCreation Date: 2019-02-18T10:33:48ZRegistrar: Registrar of domain names REG.RU LLCRegistrant Name: Protection of Private PersonMUSICA-YONTUBE.COMCreation Date: 2019-03-11T12:41:40ZRegistrar: REGISTRAR OF DOMAIN NAMES REG.RU LLCfiles-zilla.comCreation Date: 2019-02-18T10:33:14ZRegistrar: Registrar of domain names REG.RU LLCRegistrant Name: Protection of Private PersonИтого:Все они зарегистрированы у регистратора REG.RUУ всех скрыта организация-владелецВсе они свежие. Точнее новые появляются с завидной регулярностью. (можно отследить даже хронологию). На всех сайтах в футере как по шаблону один и тот же текстСтоимость доступа по подписке составляет 35 рублей с НДС в сутки для абонентов ПАО «МегаФон; по разовой оплате — 150 рублей (включая НДС) за 30 дней для абонентов ПАО «МегаФон»; Продление доступа по подписке происходит автоматически. Для отказа от предоставления Подписки на услугу отправьте SMS-сообщение со словом СТОП<пробел>113 на номер 5151 для абонентов ПАО «МегаФон». Cообщение бесплатно в домашнем регионе. Служба технической поддержки ООО «Информпартнер»: 8 800 500-25-43 (звонок бесплатный), e-mail: helpdesk@informpartner.com И офер везде одинаковый vk-vid.com/site/offerНу не может быть, что сотни сайтов созданы только ради абонентов Мегафона! А если клиент Билайна захочет получить этот контент?..Слишком много совпадений…В последнее время если абонент жалуется в тех.поддержу из-за того, что у него списали деньги за левую подписку, то ему эти деньги возвращают. Так вот если бы деньги перечислялись левым контент-провайдерам, то сотовый оператор не стал бы из своего кармана отдавать абоненту деньги! Мегафон боится, что если начнутся массовые жалобы в правоохранительные органы, то рано или поздно такие действия квалифицируют по 159 УК РФ. И никакого ООО «Инфопартнёра» в этой цепочке не будет! Дешевле заткнуть возмущённых в самом начале.Установка всяких защит от подписок на Мегафоне — не помогаетВВ комментариях так же подтвердили, что Мегафон кладёт болт на запреты.Таким образом Мегафон даже не пытается скрыть, что это они обманом подписывают абонентов на дорогущий говно-контент… Подпишут 200 000 человек на рассылку в 35 рублей. 100 000 возмутятся и они им вернут деньги на счёт. С остальных 3,5 ляма в сутки в бюджет компании…В данном случае я изучил поведение одного оператора связи — Megafon. Но, судя по отзывам, таким промышляют все операторы РФ (кроме YotaRussia ).Зайдя на сайт специализированного хостинга для таких сайтов мы увидим в партнёрах тех, кого мы знаем и «любим»nslookup zvoook.comName: zvoook.comAddress: 78.140.175.32Name: zvoook.comAddress: 78.140.175.19nslookup 78.140.175.1919.175.140.78.in-addr.arpa name = webwap.org.Получается, что это организованное преступное сообщество, занимающееся мошенничеством в особо крупных масштабах?P.S.: Эта статья является агрегированной с моих двух на Пикабу: Раз и Два."
    },
    "doc_53": {
        "url": "https://habr.com/ru/post/450266/",
        "title": "Честное резюме программиста",
        "text": "Раздел 1. Soft SkillsЯ молчу на совещаниях. Стараюсь делать внимательное и умное лицо, даже если мне все равно. Люди считают меня позитивным и договороспособным. Я всегда вежливо и ненастойчиво сообщаю, о том что в таске написано сделать каку. И только один раз. Потом не спорю. И когда я доделываю таску и она оказывается какой, я не смеюсь, и не говорю «Яжговорил!». Мне все равно какую каку прогать. Если бы заказчику было интересно мое мнение, он бы не нанял проект-менеджера, продукт-оунера, скрам-мастера, аджайл-господина и UI-дизайнера. Вот эти хипстеры пусть и формируют всякие мнения, видения и маркетинговые фишки.Я дисциплинирован. Я прихожу на работу в 9 и ухожу в 6. Мне так удобно. Я могу задержаться за двойную оплату или если таска интересная.У меня хорошее чувство юмора и богатый жизненный опыт. Я могу легко сорвать работу команды на полдня рассказами, как прошла моя суббота. Но делаю это редко, так как считаю, что мне платят не за это, а за то, чтоб я прогал какую-нить каку. Вертел я ваше тимлидство, сами знаете где. Я могу сам прогать какую-нибудь каку, но с умным видом объяснять своим подчиненным, что они должны делать какую-то каку выше моих сил. Я просто восхитителен в презентациях. Особенно, если нужно презентовать недоделанное днище. Я мастерски обхожу баги на презентации программы. Однажды я два часа презентовал окно логина, потому что дальше программа не работала. Да и логин работал не всегда. Когда меня все достает, я тихо увольняюсь, а не хожу по отделам и не гунжу «Все плохо, мы на днище, все — дураки».Раздел 2. Hard SkillsНаследование — богомерзкая вещь, если от папы наследуется всего 1 ребенок. Я юзаю инкапсуляцию, только когда Идея подчеркивает желтым и пишет, этот метод можно сделать приватным. Тоже самое с final. Я никогда не юзал volatile, finalize и многие другие. Я не запариваюсь, что юзать: ArrayList или LinkedList. Я всегда юзаю ArrayList. Я могу не использовать геттеры и сетттеры в Java, если знаю, что мой код никто не будет читать. person.name = «john». Если я знаю, что его кто-то будет читать, я стесняюсь.Я так и не понял, зачем нужны интерфейсы в java, за исключением callback и лямбд. Все примеры с их использованием надуманные и я могу сделать проще без них. Я не знаю, как работает gc, я ни разу его не юзал. И вообще за 6 лет на моей памяти он упоминался только один раз. Кроме собеседований, конечно. У меня есть репа на гитхабе, но вам я ее не покажу. Она моя личная, и я там кожу, как хочу. Вы же дома не во фраке ходите, поди?Я могу и люблю прогать фронт, если мне надоел бэк. Реакт я уже забыл и отстал. Но Сенчу вроде помню. Раздел 3. ДостиженияЯ сделал 3 сайта, на которые зашло меньше человек, чем его делало. Когда я делал 2 сайта я знал, что на них никто не зайдет.(ожидалось, что они захватят мир) Я сделал три веб-приложения(ExtJs-Java-Docker) из них два так и не задеплоены в прод, а одним воспользовались два раза.(ожидалось, что они захватят мир).Когда я их делал, я знал что так и будет, потому что я не верю в юзеров, которые учат наизусть 20-страничный мануал, я сам презентовал свое произведение с распечатанным мануалом в руках. Я сделал нативное андроид-приложение из 8 экранов, в котором никто не заходил дальше второго, его скачали 107 раз в гугл-маркете(ожидалось, что оно захватит мир).Однажды я чинил highest-баг два дня, а потом понял, что в этот раздел сайта никто не заходил около трех лет. А это был очень здоровый раздел сайта, на который потрачено много человеко-часов. Я около недели потратил, на то чтобы комбобокс выезжал не сверху, а справа.Я руководил 4 человеками и мы полгода делали один проект, который я в одиночку мог сделать за неделю. И да, это проект из пункта 2. Я настраивал кэширование запросов в Монгу на приложении, на котором бывает один человек в день.Я делал корпоративный почтовый клиент, несмотря на то что их существует сотни бесплатных и все были лучше.Я занимался пиксель-идеализацией(или как это называется?) на фронте.Я переделывал дизайн библиотечки Material UI для React, потому что наш UI-дизайнер-фрилансер из Кургана решил, что он лучше разбирается в дизайне, чем Матиас Дуарте — вице-президент Гугла по дизайну, бакалавр компьютерных наук с отличием в Университете Мэриленд, с доп. образованием в области искусства и истории искусства, руководитель Студенческой художественной галереи в Мэриленде.Я никогда не понимал, зачем переделывать хорошие вещи, которые для тебя сделали умные люди и отдали бесплатно, особенно если ты заведомо тупее.Я месяц делал фичу, которая при самых оптимистичных расчетах отбивалась бы 437 лет. (заказ швабр для уборщицы) в ERP.Я переделывал одну каку с нуля 7 раз, потому что менялось ТЗ. В итоге она стала хуже, чем была. Я 4 часа разбирался, почему неправильно округлилась копейка в счете, притом я заранее знал, что не смогу починить это, иначе потом баланс не сойдется.Я делал микросервис для увеличения надежности основной бизнес-логики, и да этот микросервис крашился в 20 раз чаще, чем бизнес-логика. Зато потом там сделали целый отдел из 12 человек, для увеличения надежности этого микросервиса надежности, и теперь микросервис крашится еще в 20 раз чаще, делает половинчатые транзакции и теряет данные бесследно. Когда я увольнялся, они задумали сделать микросервис надежности для микросервиса надежности."
    },
    "doc_54": {
        "url": "https://habr.com/ru/post/440092/",
        "title": "Математическое расследование, как подделывали выборы губернатора в Приморье 16 сентября 2018 года",
        "text": "Во втором туре выборов губернатора Приморского края 16 сентября 2018 года встречались действующий и.о. губернатора Андрей Тарасенко и занявший второе место в первом туре коммунист Андрей Ищенко. В ходе подсчета голосов на сайте ЦИК РФ отображалась информационная панель с растущим числом обработанных протоколов и голосов за кандидатов. Публикация подробных данных по участкам на официальном сайте ЦИК www.izbirkom.ru замерла после ввода 1484 (95.74%) протоколов и не возобновлялась до самого конца. Поэтому когда в трансляции лидер голосования вдруг поменялся с Ищенко на Тарасенко, было неясно, как именно это могло произойти. В СМИ просто писали «после обработки 99,03% протоколов лидер сменился».Однако, располагая промежуточными суммарными данными из информационной панели, с помощью простой математики и программирования можно подробно установить, что именно происходило с протоколами в ночь после выборов. Используем Python, Colab от Google и Z3 theorem prover от Microsoft Research. Ну и добьём всё обычной дедукцией.Предпосылки расследования и предварительные оценкиЧисло протоколов — целочисленный параметр В СМИ часто можно видеть \"Таковы данные ЦИК после обработки 90 процентов избирательных бюллетеней, передает агентство «Интерфакс»\" или \"Обработано 0,45 процентов бюллетеней в Приморье: лидирует Тарасенко\". Конечно, журналистов сбивает с толку представление прогресса целочисленного параметра в виде процентов, и вместо \"обработано 0.45% бюллетеней\" (никто до конца подсчёта не знает, сколько же всего бюллетеней), нужно писать просто и ясно — в систему ввели 7 протоколов из 1550.Доступные открытые данныеНесколько десятков участков показали неадекватную явку в последние 2 часа выборов, что статистически маловероятно, это сразу же привлекло внимание и был создан сайт со списком этих подозрительных комиссий.Распределение числа голосующих по часам, источник — ГАС ВыборыИзвестно, как изменялись числа голосов за кандидатов и процент обработанных протоколов, в том числе в промежутке, когда сайт ЦИК с детальными данными перестал обновляться, а именно с 95.74% до финальных 99.16%, данные публиковались в трансляции ЦИК и перепечатывались в СМИОпубликовано как минимум 29 бумажных протоколов от наблюдателей с данными, отличающимися от финальных данных на сайте системы ГАС Выборы.В системе ГАС Выборы по ссылкам вида ...&version=1 доступны первоначальные версии протоколов для 19 участков. Этот перечень частично пересекается с упомянутым выше списком из 29 бумажных протоколов: отличаются 13 участков, которые были изменены и в ГАС. То есть всего вовлечённых в изменения — 29 + 19 — 13 = 35 участковВ ГАС также найдены скрытыми 13 протоколов по участкам, где отменили выборы из-за визита пожарных в территориальную избирательную комиссию Советского района Владивостока.Перед отменой выборов ссылки на первичные результаты были прикрыты на уровне сервера, теперь по ссылке, содержащей параметр version, всегда видна ошибка сервера(пример), для всех выборов, но протоколы всё равно доступны по слегка модифицированной ссылке с заменой v на %76 (пример)В 07:46 понедельника 17 сентября (везде в статье время местное, GMT+10) специалист по электоральной статистике С. Шпилькин начал сохранять данные с сайта ЦИК каждые 5 минут, и в этих данных видно, как в 13:45 были выгружены единовременно последние 53 протоколаЧто можно увидеть в открытых данныхСменим запутывающие проценты на целочисленное количество протоколов и взглянем на таблицу известных данных, которые публиковались на сайте и в видео-трансляции ЦИК.Официальные данные (с фальсификациями)Самое простое, что видно - на каких этапах что было с протоколами, бумажные версии которых отличаются от официальныхПоскольку номера отличающихся протоколов известны, то посмотрев на данные на отметках 95.74% и 99.16%, можно понять, что случилось с каждым из 29 протоколов, отличающихся от ГАС. Получается, что 16 протоколов внесли в ГАС сразу с неверными цифрами и потом не трогали, а 13 внесли верно, и лишь затем отредактировали. Из 19 исправленных в ГАС протоколов для 13 в паблике есть сканы бумажных версий, так что мы имеем двойное доказательство редактирования результатов. Остальные 6 редактирований присутствуют только в ГАС.Видно, кто победил на выборахОфициально победил Тарасенко. В ГАС и в протоколах — Ищенко. plot.lyС результатом 249 845 (51.1%) против 226 637(46.4%) голосов победил Ищенко. Переписыванием протоколов голоса Ищенко уменьшили на 402, голоса Тарасенко увеличили на 15 077. Правками протоколов в ГАС голоса И. уменьшили на 954, Т. — увеличили на 14 894. Общее влияние двух типов фальсификаций на разницу голосов — 31 327. Влияние сокрытия 13 участков Владивостока на сумму голосов совсем небольшое, в этих протоколах их суммарные результаты близки — 2 939 у коммуниста против 3 408 у единоросса.Если считать по участкам, на 908 участках изначально победил коммунист, на 628 — единоросс и на 14 участках ничья. То есть по числу участков, конечно, коммунист победил значительно. Из 35 отредактированных-переписанных на 9 участках редактирование привело к тому, что победитель сменился на единоросса, в остальных 26 и без того единоросс побеждал. То есть фейковая победа единоросса была одержана на 637 участках против 899 у коммуниста.Также интересно заметить, что протоколы, которые редактировали в ГАС, изначально были введены в соответствии с бумажным протоколом. Впрочем, судя по аномальным цифрам (особенно для участков 2812 и 2863), почти все комиссии Уссурийска, результаты которых правили в ГАС, изначально тоже выдали сфальсифицированный протокол, просто это не зафиксировано. Это логично, на второе преступление обычно идут те, кто и с первым справился. Но учёт подобных участков и попытка статистически ещё точнее оценить результат в данной статье не приведена, поскольку даже строгие методы позволяют увидеть победу коммуниста, а статистические оценки хотя и увеличат отрыв коммуниста, менее убедительны ввиду их вероятностного характера.Как выглядит переписывание протокола и правка его в ГАСПереписывание протокола обнаруживается по отличию протокола наблюдателя от протокола в ГАС.А правка видна просто как 2 версии в ГАС с разными цифрами. Интересно, что процент за кандидата рассчитывается от числа голосовавших в последней версии протоколаУчастки со 100% за кандидатовТакже из финальных данных видно, что имеется 8 мелких участков с результатом 100% за Ищенко и 45 со 100% за Тарасенко, 42 из которых корабельные, а 3 — сёла под Уссурийском.Участки со 100% результатом кандидатов: 122 голоса за коммуниста и 1874 за единоросса. «Игра в одни ворота»Статистические опасения подтверждаются документамиАбсолютно все участки, подозрительные по статистике (неправдоподобные цифры явки в последние 2 часа), впоследствии оказались документально доказанными; также с помощью документов нашлось несколько дополнительных участков. Ни одного ложно-положительного результата в детектировании фальсификаторов статистическими методами не было. Правда по УИК 2809 документом является не сам протокол, а заявление в полицию об отказе выдать протокол.РасследованиеМеня заинтересовало то, что каждого из указанных выше методов фальсификаций — переписывания протоколов и правки в ГАС — было недостаточно по отдельности для воровства победы. Я задался вопросом — как применялись методы, одновременно или последовательно? Дальнейший текст посвящён подробному исследованию этого вопроса.Собственно, идея такова — есть набор целочисленных данных (количество голосов за кандидатов на участках) и их промежуточных сумм (данные с инфопанели ЦИК). Это даёт возможность простым комбинаторным перебором всех вариантов выяснить, какие же именно участки были введены или изменены в какой момент. Например, введён 1 протокол, число голосов коммуниста увеличилось на X, число голосов единоросса — на Y. Перебираем все протоколы и ищем, где же у нас 1 протокол с X за коммуниста, а Y за единоросса. Конечно же, простого перебора по финальным цифрам протоколов не хватит, мы не сможем найти такие 4 протокола, которые бы уменьшили голоса за коммуниста на 5, так что нужно смотреть на все версии протоколов в ГАС, т.к. их редактировали.Постановка SAT-задачиУ нас есть крайние точки с детальными данными, 4 промежуточные и несколько десятков булевых переменных, которые нужно подобрать под эти условия. Это типичная SAT-задача, о которой Дональд Кнут в одной из лучших монографий прошлого столетия писал: The SAT problem is evidently a killer app, because it is key to the solution of so many other problemsСтадии ввода протоколовСразу оговорюсь, что 13 участков Советского района Владивостока, где выборы позднее были признаны недействительными, мы временно отложим в сторону. Эти участки в подсчёте голосов не участвовали, отображение результатов выборов остановилось на введённых 1537 из 1550 протоколов, их мы и будем рассматривать. Итак, в 4 утра (начальная точка нашего анализа) оставалось ввести 53 участка, и они вводились партиями: вначале 33 протокола, затем 14, 4, 1 и 1 последний. Для удобства придумаем этим контрольным точкам имена. Этими же именами можно называть и стадии, после контрольных точек: silence (33 протокола до 4 утра), prepare (14), fantastic(4), kill(1) и final(1).Граничные условия: известно, что в точках 95.74% и 99.16% все версии протоколов первые и последние соответственно. Известно, что из 19 изменённых протоколов 16 уже были добавлены в ГАС до точки 95.74% (old), а 3 были добавлены во время последних изменений (new). Также известны суммы голосов в промежуточных точках. Данные на точку с процентом обработки, например, 95.74% будем обозначать r9574. Распределим все протоколы, которые или вносили, или изменяли на последнем этапе, на 3 массива: old, new и common. 19 отредактированных в ГАС протоколов — это 16 old (это те, которые были добавлены до скрытой фазе и затем в скрытой фазе редактировали) и 3 new (которые внесли уже после точки 95.74% и в скрытой фазе отредактировали). Для всех 19 нам известно, на сколько смена протокола меняет число голосов за каждого кандидата, обозначим эти известные величины как increase. Число в последнем протоколе назовём last, в первом — first, индекс для числа голосов за коммуниста Ищенко — com, за Тарасенко — er. Остальные 50 добавленных на последнем этапе протоколов составляют массив common.Булевы переменныеДля версий протокола определим 19 переменных v_%d_%s, где %d — число от 0 до 18, первые 16 для версий старых протоколов, последние 3 — для внесённых и затем изменённых, %s — это стадия, на которой рассматриваем версию, и значение True для первой версии и False для подменённой. Для наличия протокола в системе определим булевы переменнные a_%d_%s, где %d — число от 0 до 52, первые 3 переменные относятся к протоколам, которые добавили в скрытой фазе в ГАС, и затем поменяли, а остальные 50 — к тем, которые просто добавляли в скрытой фазе, а в ГАС не меняли (впрочем, среди них 14 переписанных комиссиями протоколов). Эти переменные имеют значение True, если протокол есть в системе на заданной стадии %s, False — если ещё нет.Схема пересечения списков отредактированных в скрытой фазе и внесённыхРешение SAT-задачиПоскольку на последних стадиях количество добавленных протоколов невелико, SAT-задачу удобно решать с конца — от финального состояния к начальному. Например, для самой последней стадии SAT-условие для промежуточной точки 99.10% будет следующим:Условие, что поменялся лишь 1 протокол за стадию — это условие, что на момент final число False версий = 1.Также задаём условие, что протокол нельзя «родить обратно», то есть сделать введённый на какой-то стадии протокол в следующей стадии невведённым, и условие, что если ввели вторую версию протокола, её аналогично нельзя просто удалить, оставив первую. Именно затем и сделаны в ГАС версии, чтобы ошибочные данные можно было задокументированно менять, а не удалять.Переводим математическую запись в код python для работы с z3, получается что-то вроде:Часть кода на pythonРешение задачиРешаем задачу с конца, по-стадийно, вначале находя решение для final, затем для kill, затем для fantastic, затем для prepare. Если в какой-то из более ранних стадий решение не будет найдено, значит вся найденная ранее ветка решения для последующих стадий будет отменена. Впрочем, такого не случилось. Весь python-код в виде Colab-ноутбука с расчётом последних трёх стадий.Последний протокол, стадия finalЗапускаем в Colab первый подсчёт:final  get_models final max=10final 1. solution found:final  enabled: 648 with 0 of fake paperfinal  changed:  delta increased by 0 (0 protocols)Решение SAT-задачи существует только одно, и оно гласит, что ни один протокол в ГАС не был изменён, а был добавлен протокол участка 648. Обычный честный участок, прямо как подлинная купюра на пачке из фальшивых.Предпоследний протокол, стадия killУ SAT-задачи находится 4 решения. Вывод скрипта final  get_models final max=10final 1. solution found:final  enabled: 648 with 0 of fake paperfinal  changed:  delta increased by 0(0 protocols)final  --- dive deeper to kill  --- at 2019-03-13 13:56:40.543990kill  get_models kill max=10kill 1. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 303, 304, 318, 328, 2812, 2826 delta increased by 3751(6 protocols)kill 2. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 303, 304, 318, 328, 347, 354, 2812 delta increased by 3751(7 protocols)kill 3. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 304, 318, 328, 347, 2812, 2826 delta increased by 3751(6 protocols)kill 4. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 304, 318, 328, 354, 2812, 2826 delta increased by 3751(6 protocols)kill  end kill at 2019-03-13 13:56:42.284371final  end final at 2019-03-13 13:56:42.415697Общее у всех решений то, что был добавлен протокол участка 2829, причём отличающийся от бумажной версии: у коммуниста на 291 голосов меньше, у единоросса на 1184 больше, то есть единороссу было добавлено 1475 голосов преимущества. Кроме того, в ГАС изменены минимум 6 протоколов. Заведомо изменены участки 304, 318, 328, 2812 плюс 4 варианта комбинаций из 2 или 3 участков: (347, 2826) | (303, 2826) | (354, 2826) | (303, 347, 354).Изменения в ГАС добавили кандидату Тарасенко 3751 голосов преимущества, таким образом двумя видами фальсификаций при добавлении предпоследнего протокола единороссу подарили 5226 голосов перевеса. Согласитесь, это объяснение куда понятнее и прозрачнее, чем слова … и стал недосягаем после обработки 99.10% протоколов. Интересно, что именно во время ввода этого протокола наблюдалась самая большая производная у процента за Тарасенко. Это естественно, ведь в его пользу перерисовали в 7 раз больше, чем ввели.Решающая четвёрка протоколов, стадия fantastic fourВо время ввода 4 протоколов на стадии fantastic four поменялся лидер голосования, поэтому было особенно любопытно посмотреть на внутреннюю кухню. Для каждого из четырёх решений предыдущей стадии находим решение SAT-задачи таким же комбинаторным поиском. Перебором примерно 7 миллиардов комбинаций находим 14 возможных решений (а именно 4+4+2+4 ветвей соответственно для четырёх решений предыдущей стадии). Длинный вывод скрипта: 14 возможных решений, каждое из 4 решений kill разветвляется final  get_models final max=10final 1. solution found:final  enabled: 648 with 0 of fake paperfinal  changed:  delta increased by 0(0 protocols)final  --- dive deeper to kill  --- at 2019-03-13 13:56:42.669368kill  get_models kill max=10kill 1. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 303, 304, 318, 328, 347, 354, 2812 delta increased by 3751(7 protocols)kill  --- dive deeper to fantastic  --- at 2019-03-13 13:56:43.153626fantastic  get_models fantastic max=10fantastic 1. solution found:fantastic  enabled: 2802, P2828, 2840, 2866 with 1 of fake paperfantastic  changed: 2801, 2805, 2818, 2820, 2826, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 12097(12 protocols)fantastic 2. solution found:fantastic  enabled: 1912, 1916, P2838, P2847 with 2 of fake paperfantastic  changed: 2801, 2820, 2826, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 10707(10 protocols)fantastic  end fantastic at 2019-03-13 14:47:16.016131kill 2. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 304, 318, 328, 347, 2812, 2826 delta increased by 3751(6 protocols)kill  --- dive deeper to fantastic  --- at 2019-03-13 14:47:24.146367fantastic  get_models fantastic max=10fantastic 1. solution found:fantastic  enabled: 1917, 1932, 2812, P2819 with 1 of fake paperfantastic  changed: 303, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 11597(12 protocols)fantastic 2. solution found:fantastic  enabled: 2802, P2828, 2840, 2866 with 1 of fake paperfantastic  changed: 303, 354, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 12097(13 protocols)fantastic 3. solution found:fantastic  enabled: 1912, 1916, P2838, P2847 with 2 of fake paperfantastic  changed: 303, 354, 2801, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 10707(11 protocols)fantastic 4. solution found:fantastic  enabled: 1917, 1932, 2812, P2819 with 1 of fake paperfantastic  changed: 354, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 11597(12 protocols)fantastic  end fantastic at 2019-03-13 16:06:58.112487kill 3. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 303, 304, 318, 328, 2812, 2826 delta increased by 3751(6 protocols)kill  --- dive deeper to fantastic  --- at 2019-03-13 16:06:59.007196fantastic  get_models fantastic max=10fantastic 1. solution found:fantastic  enabled: 1912, 1916, P2838, P2847 with 2 of fake paperfantastic  changed: 347, 354, 2801, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 10707(11 protocols)fantastic 2. solution found:fantastic  enabled: 1917, 1932, 2812, P2819 with 1 of fake paperfantastic  changed: 354, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 11597(12 protocols)fantastic 3. solution found:fantastic  enabled: 1917, 1932, 2812, P2819 with 1 of fake paperfantastic  changed: 347, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 11597(12 protocols)fantastic 4. solution found:fantastic  enabled: 2802, P2828, 2840, 2866 with 1 of fake paperfantastic  changed: 347, 354, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 12097(13 protocols)fantastic  end fantastic at 2019-03-13 16:55:17.161744kill 4. solution found:kill  enabled: P2829 with 1 of fake paperkill  changed: 304, 318, 328, 354, 2812, 2826 delta increased by 3751(6 protocols)kill  --- dive deeper to fantastic  --- at 2019-03-13 16:55:18.475100fantastic  get_models fantastic max=10fantastic 1. solution found:fantastic  enabled: 1917, 1932, 2812, P2819 with 1 of fake paperfantastic  changed: 303, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 11597(12 protocols)fantastic 2. solution found:fantastic  enabled: 1912, 1916, P2838, P2847 with 2 of fake paperfantastic  changed: 303, 347, 2801, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 10707(11 protocols)fantastic 3. solution found:fantastic  enabled: 1917, 1932, 2812, P2819 with 1 of fake paperfantastic  changed: 347, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 11597(12 protocols)fantastic 4. solution found:fantastic  enabled: 2802, P2828, 2840, 2866 with 1 of fake paperfantastic  changed: 303, 347, 2801, 2805, 2818, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 delta increased by 12097(13 protocols)fantastic  end fantastic at 2019-03-13 17:58:13.976612kill  end kill at 2019-03-13 17:58:17.370820final  end final at 2019-03-13 17:58:17.511852Changed before fantastic stage 0 []Enabled before fantastic stage 39 ['2856', '2863', '201', '202', '204', '205', '206', '207', '208', '209', '211', '212', '213', '214', '216', '217', '218', '219', '220', '221', '222', 'P1904', 'P1915', '1918', '1919', 'P1923', 'P1944', '1947', '1961', 'P1966', 'P1968', '2809', '2813', '2823', 'P2846', '2849', 'P2858', '2859', 'P2862']Решения можно представить следующим образом:Добавлены протоколы участков: (1917, 1932, 2812, P2819) или (2802, P2828, 2840, 2866) или (1912, 1916, P2838, P2847), то есть 1 или 2 протокола добавлены с переписыванием данных.Изменены протоколы участков: 2801, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 и ещё 14 вариантов комбинаций из остальных 1-4 изменённых. Изменено минимум 10 протоколов в ГАС (а именно от 10 до 13). Если просуммировать последние 3 стадии, выходит, что за время ввода последних 6 протоколов было отредактировано в ГАС от 17 до 19 протоколов (из 19 всего), а из введённых за эти 3 стадии 6 протокола переписанными были всего 2 или 3 (из общего числа в 18 переписанных).Первые 47 протоколов, стадии silence и prepareДля последней стадии решения важно не найти все решения, а установить наличие хотя бы одного, чтобы подтвердить дальнейшую ветку вариантов, или же доказать отсутствие (перебрав все), чтобы отсечь последующую ветку.Подобрать 14 протоколов из оставшихся 47 для каждого из 14 решений стадии fantastic довольно трудоёмко. Это требует перебора ~11 триллионов комбинаций, то есть на 3 порядка сложнее, чем предыдущая стадия. Если 3 стадии считаются 4 часа на одном ядре, то это уже займёт почти 2 месяца на моих 4 ядрах. Я через multiprocessing.Pool запустил выполнение с ограничением поиском лишь 1 решения, и для всех 14 из 14 решений стадии fantastic было показано существование как минимум 1 дальнейшего решения для prepare, то есть все найденные ранее ветки решения задачи подтвердились. Определение решения в точке prepare автоматически решает всю задачу, так как состояние в точке silence известно, и если из 47 участков выбрать 14, это автоматом определяет и остальные 33 участка, внесённые в стадии silence. Множество всех вариантов решений, как именно вводились первые 47 протоколов, искать не требуется, достаточно посмотреть общие части всех решений.Как всё былоДаже не зная точно, какой из вычисленных возможных вариантов ввода протоколов имел место в реальности, мы однако, можем точно определить границы, в которых реальность лежит. Просто смотрим конъюнкцию всех решений — получаем однозначную часть. Смотрим на оставшееся — получаем границы.Результаты анализа1. Два разных метода фальсификаций — последовательныПросматривая спектр решений, мы можем сделать вывод — в скрытой фазе во время ввода первых 47 протоколов было изменено в ГАС от 0 до 2 протоколов и введено переписанных 11 или 12 (т.к. переписанных во время final+kill+fantastic введено 2 или 3, а всего введено 16). Таким образом, до 07:03 утра (98.77% введённых) было введено большинство из переписанных протоколов (13-14 из 16), а после, на последних 6 протоколах, было сделано большинство из правок в ГАС (17-19 из 19). Распределение двух типов фальсификации по стадиям вводаОтвет на главный вопрос исследования получен — методы фальсификаций применяли последовательно, а не параллельно. И логика подсказывает, что править протоколы в ГАС начали именно потому, что одного переписывания просто не хватило, чтобы сменить лидера. 2. Восстановим неискажённый результат хода обработки протоколовПоскольку для трёх последних точек мы точно знаем, что происходило, достаточно просто сложить соответствующие первичные данные по найденным выше участкам, и мы точно узнаем данные, какие были бы промежуточные и итоговые результаты, если бы не было упомянутых двух типов фальсификаций. 13 аннулированных участков Владивостока поместим в конец, чтобы можно было сравнивать отклонение реальных кривых от официальных на участке до отметки 99.16% (к тому же их действительно утверждали последними).Сравнение официального ввода протоколов и реального, сделано в plot.lyНа последних этапах решения найдены однозначные, так что последние 3 точки на графике определены точно. У четвёртой точки (этап fantastic) 3 варианта решения, у коммуниста разброс цифр от 51.22% и до 51.28%, то есть разброс возможностей даже меньше размеров точки. Пятую точку я взял для примера из одного из вероятных решений, она совершенно не ключевая, поэтому для иллюстрации подойдёт.Подробности расчета и дополнительные замечанияОбъём перебораПростой расчёт, сколько перебирается комбинаций19 УИКов в ГАС имеют по 2 версии протокола, значит чтобы подобрать, скажем, последний введённый, потребовалось перебрать 53*2^19 комбинаций, то есть 28 млн. Этот протокол оказался обычным (не переписанным), значит, чтобы выяснить введённый предпоследним, потребовался перебор 52*2^19 комбинаций, то есть 27млн. Для подбора предшествующей предпоследнему четвёрки введённых протоколов потребовался перебор числа комбинаций, рассчитываемого по формулеПоследний шаг перебора — это выборка 14 протоколов из оставшихся 47; часть из этих 14 вариантов содержала также перебор версий протоколов. Легко подсчитать, что для полного решения требуется перебрать порядка 11 триллионов комбинаций:Участки АрсеньеваУчитывая, что представитель ЦИК Шевченко заявлял, что смена лидера голосования была обусловлена вводом протоколов из далёкого Арсеньева, интересно отметить, что ни одного из 19 участков Арсеньева, вводимых в последние часы, нет в числе финальной шестёрки. То есть вводились они на первых скрытых этапах, в числе 47 участков. Более того — на каждом из этих 19 участков победил коммунист, так что результаты из Арсеньева никак не могли привести к смене лидера. В общем, это были слова для телезрителей.Фальсифицированная отмена выборов на 13 участков ВладивостокаНа самом деле данные всех 13 участков Советского района были введены в ГАС Выборы уже в 04:30 утра, что подтверждается протоколом ввода данных. Также есть видеосъёмка из ТИК, где данные этих участков уже внесены в сводную таблицу на стене, и кандидат Ищенко ругается по телефону с председателем, что тот не утверждает данные. Затем появляется МЧС. Затем протокол повторного ввода. Тут всё просто, достаточно аристотелевой логики. До 4:30 утра все 13 ввели (например, 813), но не поменяли статус на «одобрено». Затем через день ввели для них второй протокол, пустой, и тогда сразу у всех 13 одобрили статус, выгрузив тем самым в паблик пустой протокол. Кто прикрывалОфициально объявлено и ЦИК, и Крайизбиркомом, что причина отмены выборов — невозможность установить волю избирателей на 13 участках Советского района Владивостока, хотя эта воля известна и даже внесена в ГАС Выборы. За несколько часов до отмены выборов с сайта ЦИК была перекрыта возможность просматривать первичные данные (по специальным ссылкам) в том числе по этим 13 участкам (ссылки выдают ошибку 404). По закону ГАС относится именно к ЦИК и ФЦИ при нём, вероятно, именно ЦИК и прикрыла доступ. Главные выводыПо результатам исследования можно предположить, что в системе ГАС Выборы у протокола существует минимум 3 состояния. Это первичный ввод (публично не отображается нигде, так себя вели 13 участков Владивостока сразу после их ввода в ГАС), одобренный ввод (отображается как суммарные данные в трансляции ЦИК), и есть финальное одобрение, после которого протокол отображается на сайте izbirkom.ru.Во время ввода 4 ключевых протоколов, поменявших лидера, в системе ГАС Выборы было изменены данные участков : 2801, 2820, 2834, 2844, 2850, 2854, 2856, 2863, 2867 и ещё 1-4 уже введённых протоколов, а из 4 введённых 1 или 2 были переписанными. Переписыванием кандидату от коммунистов убавили больше голосов, чем добавили вводом 4 протоколов, поэтому на этой стадии количество голосов Ищенко уменьшилось на 5 голосов (что вызвало резкий отклик общественности).Предпоследним был введён УИК 2829 с переписыванием протокола в пользу единоросса.Одновременно с вводом этого предпоследнего протокола были изменены 6 или 7 ранее введённых в ГАС протоколов, а именно протоколы участков 304, 318, 328, 2812 и ещё 2 или 3 других.Последним одобренным участком стал УИК 648. Обычный участок с непереписанным протоколом.На момент ввода в систему 98.77% протоколов (т.е. всех, кроме 6 последних) было введено минимум 15 переписанных протоколов из 18 и не более 2 протоколов были изменены в ГАС.Во время ввода в ГАС последних 6 протоколов было изменено не менее 17 протоколов, то есть до этого использовали преимущественно переписывание, а после — преимущественно изменение уже введённых. Переписывания протоколов не хватило, чтобы сменить победителя, поэтому начали править в ГАС.В действительности на выборах победил коммунист с задокументированным результатом 51% против 46%Прочие выводыПрочие выводыОтмена выборов была тоже сфальсифицирована (инновация).Детальные данные на сайте ЦИК не обновлялись потому, что в момент ввода последних 53 (3.5%) протоколов избиркомы пытались скрыть от посторонних глаз свои преступные действия.Кто именно это всё делал — установит суд, список участвующих комиссий уже давно определён, от множества врачей-учителей до Памфиловой, список подсудимых составить будет легко, нужно просто взять составы 54 комиссий (48 УИК, 4 ТИК, 1 КИК, 1 ЦИК) и вычеркнуть имена невиновных. Но это уже тема не для хабра.Спасибо математикеТо, что в России выборы подделывают массово, и это легко видеть с помощью простейшей математики, с которой справится даже школьник, уже давно не новость. Фальсификаторы при этом отлично умеют делать «многоходовочки», когда преступление реализуется в 2-3 шага, это делает неочевидным понимание для простых людей, что выборы подделаны. Фальсификации легко видны образованным людям, потому что у преступников проблемы со знаниями математики и с координацией действий их армии, так что они постоянно совершают глупые ошибки, которые приоткрывают окно в этот удивительный преступный мир, рождая потоки открытых данных, которые затем интересно исследовать учёным и простым исследователям :) Например, предыдущая моя статья тоже касалась открытых данных с выборов.Источники данных, пруфлинки на данныеСкриншоты промежуточных данных kireev.livejournal.comОбработано 97.87% было в 04:10 newdaynews.ruОбработано 98.77% было в 07:03 твиттерОбработано 99.03% было в 07:07 твиттерОбработано 99.10% было в 07:14 Meduza, у The Insider — время 07:20.Обработано 99.16% было в 12:05 Ведомости, было ли ранее 12:05 объявлено об обработке 99.16%, мне неизвестно. Канал Шпилькина — @RuElectionData, он начал сохранять данных с сайта ЦИК уже после того, как всё было определено, но до того, как 53 участка были выгружены, именно это помогло распутать клубок, за что большое спасибо.Первая версия протоколов по УИКам 2801 2805 2812 2818 2820 2834 2844 2850 2863 2867 есть здесь.По УИКам 318 328 1915 1923 1926 1944 1966 2801 2805 2812 2818 2819 2820 2826 2828 2829 2834 2838 2844 2845 2846 2847 2850 2858 2862 2863 2867 протоколы — на сайте Голоса.Ещё источник уссурийских — тутP.S. Понятно, что было ещё много незадокументированных случаев подделки результатов в пользу административного кандидата, например, УИК 3801 с 540 голосами за единоросса и 0 за коммуниста, или участки 2809, 2823, но прелесть ситуации в том, что всё ясно даже из задокументированных, открытых данных. P.P.S. Огромное спасибо С. Шпилькину за собственно данные и за помощь в том, чтобы сделать этот текст понятнее читателю.UPD. В тексте есть ссылка на сайт с протоколами, но он старый, так как сделан в сентябре, а обновлённый сайт тут. Поставил кронтаб, чтобы поймать в этот раз точно момент, если вдруг и %76ersion-ссылки тоже ЦИК захочет скрыть. Пока никаких изменений, version скрыт, а %76ersion нет.UPD2. Было замечено, что старые ссылки на первичные данные выдают не всегда один и тот же ответ ошибки 404. Иногда там есть точка, иногда нет!Минутка заботы от НЛОЭтот материал мог вызвать противоречивые чувства, поэтому перед написанием комментария освежите в памяти кое-что важное:Как написать комментарий и выжитьНе пишите оскорбительных комментариев, не переходите на личности.Воздержитесь от нецензурной лексики и токсичного поведения (даже в завуалированной форме).Для сообщения о комментариях, нарушающих правила сайта, используйте кнопку «Пожаловаться» (если доступна) или форму обратной связи.Что делать, если: минусуют карму | заблокировали аккаунт→ Кодекс авторов Хабра и хабраэтикет→ Полная версия правил сайта"
    },
    "doc_55": {
        "url": "https://habr.com/ru/post/178959/",
        "title": "Путешествия во времени и программирование 2: парадоксы",
        "text": "Эпоха путешествий во времени еще не наступила, а человечество уже давно пытается разрешить сопутствующие им парадоксы. Мы поговорим о самом очевидном из них: что же все-таки произойдет при вмешательстве в ход истории? Существует несколько вариантов того, как поток времени реагирует на действия путешественника из будущего. Эти модели можно увидеть в фантастических фильмах, о них все больше начинают говорить ученые, но какая модель ближе к истине — единого мнения пока нет. Мы только начинаем проникать в тайны времени, и еще не обладаем возможностью экспериментировать с перемещениями в прошлое. Что же можно прояснить в данном вопросе уже сейчас? Под катом нас ждет экскурсия по основам механики времени, мы порассуждаем о парадоксах, и проведем небольшой эксперимент. Да, это будет испытание виртуальной машины времени, построенной на основе алгоритма «Жизнь»!In memory of John Horton ConwayПредыдущая статья цикла.Если вы вдруг ничего не слышали о парадоксе дедушки, суть его в следующем: счастливый обладатель МВ улетает в прошлое, и своими действиями мешает собственному появлению на свет. Например, мешает знакомству своих родителей. В новом варианте истории путешественник отсутствует, нет его полета в прошлое – значит, история не меняется. Но тогда путешественник все-таки появится на свет, и в итоге полетит в прошлое… — замкнутый круг взаимоисключающих условий, поэтому и называется это парадоксом. ПримечаниеДумаю, все понимают, что возникновение парадокса не привязано ни к бедному дедушке, ни к стиранию себя самого из истории. Путешественник может просто попросить себя молодого не заниматься изобретением машины времени (ага, так он и послушал!). Или отправить на 5 минут в прошлое записку «не отправляй записку». Суть одна: результатом полета в прошлое является отмена этого полета в прошлое.Парадокс существует лишь как наше недопонимание того, как устроено время. Наверняка природа не допускает возникновения парадоксов, но как именно? Рассмотрим основные модели времени, отмечая их плюсы и минусы.МоделиМодель 1: невозможность путешествий во времени Суть: законы природы запрещают перемещения в прошлое, полностью, либо с какими-либо серьезными ограничениями. Имеется несколько вариаций на данную тему:Перемещения в прошлое принципиально не возможны. Перемещение в прошлое, или как минимум его серьезное изменение, приводит к разрыву ткани пространства-времени, схлопыванию Вселенной и прочим тотальным катаклизмам Перемещаясь, скажем, на 1 год в прошлое, путешественник окажется на расстоянии 1 светового года от Земли, и сможет достигнуть исходной точки только к моменту своего отлета назад – тем самым, не имея возможности повлиять на себя в прошлом (т.е. мировая линия не замыкается в кольцо).Плюсы: тривиальность решения. Самый простой способ разрешения парадокса – исключить условия его возникновения из сферы возможного. Минусы: а как же мечта о машине времени?) Если серьезно, то принципиальная возможность путешествий во времени – слишком обширная тема, чтобы сейчас об этом говорить, поэтому рассмотрим, что еще у нас есть в запасе, надеясь, что они все-таки возможны.Модель 2: предопределенность истории«В этот момент он понял, что он и есть тот самый Джо. Джо, с которым он уже встречался перед этим. Словно молнией вдруг озарило в голове Боба тот факт, что это была не просто такая же ситуация, через которую прошел он сам, а это была именно т_а _с_а_м_а_я_ ситуация. Только теперь он воспринимал ее с другой точки зрения.» Р. Хайнлайн «По пятам».Суть: полеты в прошлое возможны, но изменить там ничего не получится, поскольку страницы истории зафиксированы. Если археологи нашли свидетельство того, что вы посещали Эхнатона в древнем Египте – этот полет обязательно состоится, причем пройдет именно так, как это было в прошлом. Совершить там другие действия, или просто отказаться от полета – в силу каких-то обстоятельств вы не сможете. Отсюда вывод, что некоторые точки истории могут быть созданы путешественниками во времени. Например, вы решили предотвратить затопление «Титаника» — оказавшись на борту, либо вы столкнетесь с кучей трудностей и не сможете увести корабль от айсберга, либо с ужасом осознаете, что ваши действия – настоящая причина катастрофы. Уместно выделить два варианта модели: сильная и слабая. Сильная предопределенность подразумевает, что невозможно изменить ни одной детали прошлого. Слабая допускает изменение мелких деталей, но ключевые точки истории, общая направленность событий сохраняются. Очевидно, что предопределенность распространяется не только на прошлое, но и на будущее. Ведь если прошлое зафиксировано, и содержит события прилетов людей из будущего, будущее тоже в некоторой степени предопределено, ведь в нем обязательно должны сложиться обстоятельства для этих полетов. В рамках данной модели становится возможным получить своего рода «гарантии истории». Например, ученые находят доказательства посещения прошлого людьми из XXX-го века – это означает, что в течение ближайшей тысячи лет человечество не только будет существовать, но и активно развивать науку. Здесь важно не отступать от законов логики и понимать, что отсутствие доказательств подобных посещений ровным счетом ничего не доказывает. «Если путешествия во времени возможны, то где наши потомки из будущего» — это, согласитесь, не серьезно, объяснений тому можно выдвинуть множество. Примеры: фильм «Охотники за реликвией», рассказ Р. Хайнлайна «По пятам».Плюсы: есть в этой модели некая элегантность. Может потому, что она занимает золотую середину между полным отрицанием возможности путешествий (модель 1) и их описанием с привлечением не самых тривиальных понятий (модель 3). Кроме того, имеются косвенные экспериментальные подтверждения данной модели на уровне квантовой информатики. Минусы: идея предопределенности прошлого и будущего кажется как минимум странной. Даже если это слабая предопределенность, не вполне понятно, как именно законы физики ограничивают свободу выбора человека совершить, и тем более не совершить те или иные поступки. Понятно, что это ограничение происходит посредством обстоятельств. Неужели у каждого путешественника в прошлое всегда возникают такие обстоятельства, которые не позволят ему отказаться от полета? Нечто подобное еще можно представить на уровне квантовых частиц, но работа данного механизма в макромире пока не достаточно описана. Уходя от фатализма к слабой предопределенности, мы сталкиваемся с вопросом критерия. До какой степени история позволяет себя менять? Что считается ключевой точкой? К этому вопросу мы еще вернемся.Модель 3: альтернативные реальности\"-По всей видимости временной континуум был нарушен, и возникла новая событийная последовательность, которая изменила действительность-Док, попроще можно?-Сейчас, позволь проиллюстрировать. Представим, что эта линия обозначает время, вот настоящее, 1985 год, будущее и прошлое. До этой точки во времени, где то в прошлом линия отклонилась под таким углом и возник другой 1985 год, другой для тебя, для меня и для Эйнштейна, но настоящий для всех остальных.\", «Назад в будущее-2»Суть: изменение истории порождает новый поток времени, где развивается альтернативный сценарий событий. Сам путешественник остается в созданной им реальности.Рис.1 – классическое представление о ветвлении реальностиОбычно подразумевается, что реальность ответвляется только при серьезном (ага, вот оно опять – критерий?) влиянии на историю. Например, вы отправляетесь в прошлое, а в точке старта остается наблюдатель (Н). После вашей спокойной прогулки по прошлому в качестве туриста он увидит ваше возвращение. Рис. 2 – петля времени замкнуласьНо если вы отправитесь совершить (или предотвратить) революцию, то для наблюдателя вы так и не вернетесь из прошлого, т.к. станете частью новой реальности.Рис. 3 — петля времени разорванаДля не-программистов: в статье часто используются термины «ветка» (она же «branch»), «trunk», «merge» — пусть они вас не пугают. Эти понятия используются в системе контроля версий SVN, знать которую не обязательно для понимания того, что:trunk — первоначальный, «наш» поток времени, ход истории.branch, ветка — альтернативный поток времени, образуемый при вмешательстве в историю.merge — процесс вливания ветки в транк, т.е. последствия событий альтернативной истории становятся частью основного потока истории (понятие основного/дополнительного потока — условно, тут скорее речь об одном потоке как родительском, и втором, как ответвлении от него).Таким образом, можно хоть переписать историю с нуля – только это будет ее новая ветка, а старая останется в сохранности. Этакий GitHub с форками от любой прошлой ревизии.В данной модели время перестает быть одномерной линией, т.к. добавляется ось вариации событий. Полученный таким образом Мультиверсум (Вселенная со множеством альтернативных реальностей) наглядно изображается в виде дерева.Дерево можно изобразить в развернутом виде, где узлы – это события, а исходящие ветки – это возможные исходы (рис. 4А). Когда речь идет об изменении истории, удобнее взять один из маршрутов дерева как эталон (нулевая реальность, trunk), изобразить ее в виде прямой, а альтернативный маршрут изобразить в виде ответвления (рис. 4Б).Рис.4 — древо альтернативных реальностей в двух представленияхЛогично: после вмешательства в прошлое ход событий развивается по новому пути, прочерчивая тем самым другую траекторию в пространстве вариантов. Вопрос только в том, что представляет собой это пространство: теоретическая модель, или же реально существующие параллельные реальности. Дело в том, что с понятием альтернативного хода событий мы сталкиваемся не только при путешествиях в прошлое. Вспомните теорию «делящейся Вселенной» Эверетта. В ее популярном изложении говорится о том, что при каждом событии Вселенная расщепляется на несколько реальностей, где реализуются возможные исходы события. Грубо говоря, при броске монеты реальность клонируется на три копии: в одной выпадает орел, в другой решка, в третьей монета встает на ребро. Мы бросили монетку и выпал орел – чем фактически являются две остальные реальности? Потенциальными состояниями квантового мира, или физически существующими параллельными мирами? Это фундаментальный вопрос современной физики, ответа на который у нас пока нет. Примеры: фильм «Назад в будущее»Плюсы: эта теория действительно разрешает парадоксы. И делает она это без вызывающего много вопросов ограничения свободы действий в прошлом. Представление об альтернативных потоках времени перекликается с рядом теорий (делящаяся Вселенная Эвверета, многолистная Мега-Вселенная Сахарова, трехмерное время Бартини и др.), и в целом видится логичным расширением модели одномерного времени.Минусы: блистательно разрешив одни вопросы, модель привнесла другие. Если ветка истории образуется только при серьезном вмешательстве в историю, то каков критерий этой «серьезности»? Если же ветка образуется всегда, то как именно она вливается обратно в основной поток, обеспечивая тем самым возвращение путешественника из прошлого? Гипотеза слияния реальностей не нова, но пока остается недостаточно раскрытой. Резюме по моделямСуществует еще одна модель. Она редко встречается в литературе, она фундаментально отличается от остальных, и сейчас вы сами поймете почему. Итак, те же исходные данные: путешественник стирает себя из истории, т.е. в новом сценарии событий он не появляется на свет. В этой модели нет параллельных реальностей, изменился основной, он же единственный поток времени. Вернувшись в свое время, путешественник будет никем не узнаваемый. То, что теперь никто не летит в прошлое — не означает, что путешественник все-таки появится на свет, ведь изменение истории уже произошло, и оно просто сохраняется. Представьте, что некий злодей отправился на машине времени в далекое прошлое, чтобы коренным образом изменить историю человечества. Мы просто исчезнем из реальности, слово нас никогда и не было. Логично, что уже свершившиеся события не могут быть «аннулированы» и просто вот так исчезнуть. Точнее говоря, это нам диктует интуиция, а о логическом обосновании нужно подумать. Предлагаю пока это просто считать аксиомой: историю невозможно переписать. Все предыдущие модели – это различные варианты реализации данной защиты:Не дает полететь в прошлоеНе дает в прошлом что-то изменитьНе дает изменить основной поток времени, уводя изменения в дополнительныйСам поиск человечеством модели разрешения парадоксов подразумевает следование данной аксиоме. Поэтому, в нашем распоряжении 3 модели времени. Будем считать, что так мы обрисовали контуры первого вопроса: защита истории от изменений. Что теперь можно сделать с этими моделями? Предлагаю сразу исключить первую: если путешествия во времени невозможны, то все наши предыдущие и последующие рассуждения бессмысленны. Остается две модели – какая же верна? А может, верны обе, являясь частными случаями более общей модели? Прежде, чем мы поговорим об этом, нам необходимо взглянуть на вопрос изменения истории с другого ракурса. Прав ли Рэй БрэдбериЗабудем на секунду о рассмотренных моделях, о предопределенности истории или параллельных реальностях. Перед нами поток истории, в него вносится изменение – нас интересует лишь одно: будут ли последствия от этого влияния затухать, или же степень отклонения от первичного сценария будет нарастать как снежный ком?В рассказе Рэя Бредбери «И грянул гром» раздавленная в юрском периоде бабочка приводит к масштабным изменениям нашего времени. Автор развивает версию о высокой связности событий, что делает историю крайне не устойчивой: даже малейшее изменение в прошлом, особенно далеком, вызывает серьезное отклонение. ФрагментМы не хотим изменять Будущее. Здесь, в Прошлом, мы незваные гости. Правительство не одобряет наши экскурсии. Приходится платить немалые взятки, чтобы нас не лишили концессии Машина времени — дело щекотливое. Сами того не зная, мы можем убить какое-нибудь важное животное, пичугу, жука, раздавить цветок и уничтожить важное звено в развитии вида.— Я что-то не понимаю, — сказал Экельс.— Ну так слушайте, — продолжал Тревис. — Допустим, мы случайно убили здесь мышь. Это значит, что всех будущих потомков этой мыши уже не будет — верно?— Да.— Не будет потомков от потомков от всех ее потомков! Значит, неосторожно ступив ногой, вы уничтожаете не одну, и не десяток, и не тысячу, а миллион — миллиард мышей!— Хорошо, они сдохли, — согласился Экельс. — Ну и что?— Что? — Тревис презрительно фыркнул. — А как с лисами, для питания которых нужны были именно эти мыши? Не хватит десяти мышей — умрет одна лиса. Десятью лисами меньше — подохнет от голода лев. Одним львом меньше — погибнут всевозможные насекомые и стервятники, сгинет неисчислимое множество форм жизни. И вот итог: через пятьдесят девять миллионов лет пещерный человек, один из дюжины, населяющей весь мир, гонимый голодом, выходит на охоту за кабаном или саблезубым тигром. Но вы, друг мой, раздавив одну мышь, тем самым раздавили всех тигров в этих местах. И пещерный человек умирает от голода. А этот человек, заметьте себе, не просто один человек, нет! Это целый будущий народ. Из его чресел вышло бы десять сыновей. От них произошло бы сто — и так далее, и возникла бы целая цивилизация. Уничтожьте одного человека — и вы уничтожите целое племя, народ, историческую эпоху. Это все равно что убить одного из внуков Адама. Раздавите ногой мышь — это будет равносильно землетрясению, которое исказит облик всей земли, в корне изменит наши судьбы. Гибель одного пещерного человека — смерть миллиарда его потомков, задушенных во чреве. Может быть, Рим не появится на своих семи холмах. Европа навсегда останется глухим лесом, только в Азии расцветет пышная жизнь. Наступите на мышь — и вы сокрушите пирамиды. Наступите на мышь — и вы оставите на Вечности вмятину величиной с Великий Каньон. Не будет королевы Елизаветы, Вашингтон не перейдет Делавер. Соединенные Штаты вообще не появятся. Так что будьте осторожны. Держитесь тропы. Никогда не сходите с нее!Теперь рассмотрим маленький пример. Вы собираетесь утром на работу, выходите из дома, и на метро доезжаете до нее. Каким-то образом в историю вносится коррекция: вы узнали, что метро сегодня не работает. Взяв велосипед, вы доезжаете на нем. Вносим еще одну коррекцию: прокалывается шина. Но вы дойдете пешком!Рис. 5 — стремление реальностей к объединениюНа хронокарте видно:1. Вливание веток в транк происходит в разные моменты времени, т.к. достижение целевого состояния (попасть на работу) происходит разными путями.2. Деформация полностью не затухает, т.е. несмотря на то, что во всех трех случаях вы на работе, есть некоторые незначительные вариации (припаркованный велосипед, грязная обувь и пр.). Что происходит, если абстрагироваться от действующих лиц? Если у системы есть цель, она стремится к ней при любых сценариях, обладая, таким образом, определенным запасом устойчивости (к отклоняющим воздействиям). Сейчас мне бы не хотелось уходить в дебри философии и говорить на тему цели у материальных объектов, людей, общества и пр. То, что события в окружающем нас мире подчиняются законам физики и в некотором смысле упорядочены – думаю, очевидно. Историю нельзя считать набором совпадений, в ней есть своя обусловленность. После первобытно-общинного строя не смог бы наступить капитализм, минуя рабовладельческий и феодальный строй. Если предотвратить начало войны в 1939 году, наверняка она все равно началась позже, ведь в мире сохранились бы предпосылки для этого. Если некое научное открытие не сделал бы один ученый, его бы сделал позднее кто-то другой, и так далее. События истории обладают направленностью, тенденцией, а это значит, что любое отклонение хода истории имеет свойство затухать.Данная гипотеза выводит нас на следующий уровень понимания механики времени, ведь она фактически объединяет две рассмотренные ранее модели. В одной мы говорили о сопротивлении истории изменениям, в другой – о параллельных потоках времени. Полагая, что параллельные потоки времени стремятся влиться обратно в основной поток, мы выделяем из этих двух моделей единую суть: упругость потока времени. Как происходит слияние реальностей?В прошлой статье это вызвало много вопросов. Вопрос крайне непростой, поэтому на правах предположения, уточняю: сливаются не объекты, а события. Рассмотрим всем известный световой конус, только вместо пространственной оси у нас будет ось вариантов.Рис. 6 — настоящее, как проекция альтернатив прошлого и корень вариантов будущегоВерхний конус – будущее, это возможные исходы от текущего состояния, нижний конус – прошлое, это некоторый спектр возможных предшествующих состояний. Стенки конусов очерчивают границы достижимости, т.е. выйти за пределы конуса означает перейти в такое состояние (дельта по оси b), которое из текущего состояния за данный промежуток времени (дельта по оси t) достигнуть невозможно.Слияния событий конуса прошлого в точке настоящего означает общий для них результат. Но как это происходит на уровне изменения структуры объектов, как они накладываются? Возможно, происходит нечто подобное тому, что показано в «Назад в будущее», где заголовок газеты плавно меняется прямо на глазах – это «бранч мержится в транк».Квантовая монеткаВ комнате сидят двое: Алиса и Боб. Пять минут назад Алиса бросила монету и выпала решка, они оба это видели. У нас есть машина времени, и мы проводим коррекцию истории: пять минут назад выпадает орел. В итоге у нас получается две реальности: Рис. 7 — эксперимент с двумя наблюдателямиАлису и монету нельзя разъединить, поскольку результат броска монетки не существует в отрыве от его наблюдения. Но у нас еще есть Боб, который с некоторой задержкой тоже узнает итог броска монетки, и они с Алисой обмениваются парой реплик. Два исхода, и две реальности – мы это видим на схеме.Изменим условия эксперимента: Боб не видит результата. С точки зрения Боба эти две реальности идентичны, в обоих из них он видит бросок монетки, но не знает исхода. Важная деталь (спасибо Agent_J за поправку): Алиса не говорит результат Бобу, тогда для него ход событий действительно одинаков в обоих случаях. Боб тоже может уйти в два бранча, как только Алиса скажет ему результат опыта. Попробуем это нарисовать в 5D:Рис.8 — эксперимент с одним наблюдателемПодумайте об этом, это действительно любопытно! Словно бы две Алисы общаются с одним Бобом, а просто произнесение одной фразы инициирует деление потока времени слушателя.Здесь мы подходим к пониманию роли наблюдателя в модели параллельных реальностей. Линия на хронокарте – это не реальность, это состояние группы объектов, наблюдение любого из которых включает наблюдателя в эту линию. Природа не делает полной копии Вселенной, она просто хранит dif их отличий.Так все-таки, как происходит слияние?Первое: слияние не следует трактовать буквально, будто бы миры становятся идентичны. Два мира в чем-то различаются, в чем-то схожи — и вот эта схожесть представляет собой нечто вроде их стыка в пространстве вариантов. Как в том примере, где тремя путями человек все равно попал на работу — в этот момент у трех реальностей появился данный стык, произошло их частичное слияние. Разумеется, некорректно говорить о полном слиянии реальностей, потому как сама реальность, как уже было показано в парадоксе квантовой монетки, это всего лишь срез пространства состояний. Как разные объекты могут быть в разных стыках, карманах и потоках пространства вариантов — это хорошая тренировка для воображения!Частый вопрос: а почему сливаются бранчи, откуда вообще идея упругости истории? Отвечу другими словами и коротко: устойчивость систем. Это универсальное свойство практически любой более-менее сложной системы, будь то человек, экономика страны, мировая политика и пр. У системы есть цель (в том, или ином виде), и работа системы подобна автоматическому регулятору, корректирующему движение к цели. Поэтому вносимые в прошлое возмущения будут встречать сопротивление устойчивости систем мира. Точки бифуркации — это совсем другое дело, воздействие на них может кардинально изменить ход событий. Но затухание dif'а все равно будет, просто на большем масштабе.В ходе обсуждений MrSeventh предложил интересную гипотезу: а что если физическим носителем лога различий бранчей является темная материя и/или энергия? Могу предположить следующееТемная энергия отвечает за ускоренное расширение Вселенной. По ряду соображений мне близка теория пульсирующей Вселенной, т.е. после большого взрыва и расширения следует сжатие (циклическая пульсация, как биение сердца). Это означает, что параметры темной энергии должны будут измениться. Как вариант, дело тут вот в чем: сейчас Вселенная молодая, и большинство бранчей идет на расхождение, им потребуются триллионы лет на то, чтобы начать сближаться (в соответствии с кривой затухания). Начнется синтез различных вариантов Вселенной в один, соединение различных бранчей, лог dif'а при этом будет сокращаться, параметры темной энергии (если это физический носитель этих логов) — меняться, Вселенная сжиматься до состояния сингулярности, где соединится не только вся материя, пространство, и время, но и все варианты (потоки времени). Единая модельА теперь соединим все ранее сказанное. Две модели времени (предопределенность истории и ветки) фактически соединились в одну: «ветки с merg’ом». Любые изменения истории (даже сам факт пребывания в прошлом) прочерчивают альтернативные маршруты в пространстве вариантов, но поток времени обладает свойством упругости, что проявляется как постепенное стремление альтернативных маршрутов влиться в основной. При этом наблюдаемый мир представляет собой срез сложного квантового переплетения потоков времени, когда находящиеся в одном пространстве объекты могут относиться к разным потокам времени (пока между ними нет факта наблюдения). Математическая модель Итак, нам необходимо смоделировать затухание отклонения истории, возникающее при вмешательстве в прошлое. Первый вариант: самый тривиальный, мы считаем что затухание бранча происходит с неким постоянным ускорением. Описывается формулой равноускоренного движения.Второй вариант: более правдоподобный, где поток времени сравнивается с пружиной, и тогда сила (а значит, и ускорение) пропорциональны текущему отклонению. То есть, чем дальше поток истории ушел в сторону, тем сильнее он стремится вернуться назад. Описывается формулой затухающей синусоиды.Третий вариант: а здесь интересная история. Первая версия статьи содержала вывод формулы по 2-му вариантуБлагодаря Strepetarh, Sayonji, mayorovp была замечена ошибка: расчет основан на формуле равноускоренного движения, которая здесь не подходит. Но эта формула, как оказалось, хорошо подходит для описания наблюдаемой картины (см. далее).Равноускоренное затухание.Затухание по правильной формуле «пружины».Третья, старая формула.А теперь пора перейти от теории к практике.ЭкспериментА что если данные об истории можно смоделировать? Нужна некая упрощенная модель мира, состоящего из множества взаимодействующих элементов. Мы будем фиксировать ход событий, затем отматывать его назад, вносить изменения в «мир», запускать симуляцию, и наблюдать новый сценарий. Останется только количественно оценивать разницу между этими двумя реальностями, и выдавать ее в виде графика. Тогда мы получим экспериментальную, а не теоретическую кривую затухания отклонений истории.Осталось придумать алгоритм, который сгодился бы на роль «модели мира». Перебрав несколько вариантов, я остановился на алгоритме Конвея «Жизнь». Ранее о нем я почти ничего не слышал, поэтому засел за поиск – и с удивлением обнаружил на Хабре множество статей на эту тему. Осталось понять, как оценивать разницу между мирами. Мне хотелось построить решение на неком эволюционном принципе, поскольку история реального мира – это все-таки прогресс и совершенствование, а не устоявшийся режим «кипения клеток». Может быть, нечто вроде механизма генетического отбора, или чего-то подобного, что вводило бы в мир какие-то измеримые характеристики, позволяющие сравнивать разные варианты истории (например, «количество клеток 42-го уровня»). Поверх алгоритма Конвея оказалось довольно сложно что-то прикрутить. Он выбрал оптимальные параметры «Жизни», и мои попытки добавить свои правила в алгоритм делали мир неустойчивым. Спустя некоторое время я выбрал самое простое решение: использовать классический вариант алгоритма без всяких наворотов, и просто вычитать попиксельно один мир из другого (расстояние по Хэммингу) – это и будет степень расхождения истории. Сказанное я воплотил в проект: https://github.com/TimeCoder/LifeTimeТам же можно скачать сбору под Windows: https://github.com/TimeCoder/LifeTime/raw/master/bin/lifetime.1.0.0.12.bin.win32.zipА также под Linux (спасибо vershov):lifetime.1.0.0.12.bin.linux.x86.tar.gzlifetime.1.0.0.12.bin.linux.x64.tar.gzВидео:Перед запуском нашей машины времени, познакомимся с UI и кодом программы.Рис. 10 — элементы управленияИнтерфейс программы состоит из 4-х областей:Мир – здесь отображается процесс развития жизни, после случайного заполнения клетки образуются и распадаются по алгоритму «Жизнь» Конвея. Края мира «сшиты» между собой.Хронокарта – фактически здесь мы видим хронодрево, Мультиверсум, пространство вариантов – называйте как хотите. Изначально перед нами одна прямая – первичный поток времени, нулевая реальность (зеленая). Когда мы совершим перемещение в прошлое, над основным потоком образуется тоннель (синий), а новый сценарий развития событий будет представлен кривой (желтая).Блок управления, где включается машина времени и запускается перемещение.Область вывода различных данных о мире, путешественнике и перемещении.Теперь рассмотрим порядок работы с машиной времени:Сразу после запуска программы вы увидите кипящий океан жизни и бегущий счетчик времени. Подождите немного, и нажимайте кнопку «Begin».Машина времени активирована, мир замер в ожидании. Что по логике должно произойти далее? В машину времени должен сесть путешественник. Кликайте мышью в области мира по клеткам, выбирая тем самым объект для перемещения. Выбор можно менять, или отменять вовсе, кликая на пустую область.Когда объект выбран, автоматически разблокируется слайдер, находящийся над хронокартой. Тяните его влево, отматывая историю до нужного момента времени. Это еще не перемещение: мы только выбираем точку назначения.Нажимайте «Leap» — вперед, в прошлое! Объект перенесется в выбранный вами момент времени, станет частью мира, и симуляция продолжится с этой точки. По графику будет видно отклонение нового сценария истории, а в том месте, где был объект, будет легкая его подсветка. Когда время дойдет до вершины петли (точки, откуда был сделан переход в прошлое) – программа встанет на паузу, на монитор выведется ряд данных.В данной версии есть некоторые особенности:Только один полет в прошлое за один сеанс работы программы. Возможность множественных бранчей в программу заложена, но пока отключена, в том числе из-за нерешенной задачи «о трех ветках», см. ниже.Путешествий в будущее нет (не увидел в них смысла).Переключаться между потоками можно только после петли.После того, как вы начали двигать слайдер времени, выбрать другой объект для перемещений нельзя (нужно немного дописать код).На больших размерах мира программа тормозит (нужно оптимизировать).Рендер происходит с помощью OpenGL (вроде как нормальное решение).Существуют и другие кандидаты на роль базового алгоритма, взамен «Жизни», например Tierra или Avida. Разработка проекта продолжается.Задача о трех веткахПроблема в том, что мы количественно оцениваем качественные величины. Итак, представьте 3 мира: основной поток времени, и два альтернативных. Что брать за систему отсчета при изображении отклонения истории? В случае 2-х веток все просто: первую нарисовали как прямую линию, вторую изображаем в виде кривой, показывающей степень отклонения от базовой реальности. Но теперь нам нужно изобразить третью кривую. Допустим, эта реальность отпочковалась от транка, и отличается от него настолько же (количественно), как и вторая – получается, что траектории второго и третьего потока совпадут – но в них происходят качественно разные события! Другой вариант: третья реальность отпочковалась от второй, и в ней ход истории быстро приходит к варианту транка (например, сначала изменили прошлое, возникла реальность 2, потом полетели в прошлое чтобы все вернуть как было – образовалась реальность 3, почти идентичная 1-й). Отклонение третьей реальности от второй такое же, как второй от первой. Задача заключается в том, чтобы придумать оптимальный метод рисования хронокарт с учетом подобных нюансов.КодКоротко рассмотрим архитектуру проекта, и ключевые моменты отдельных фрагментов. Ниже диаграмма основных классов проекта:Рис. 11 — упрощенная диаграмма классовВсе начинается с алгоритма расчета жизни, реализованного в LifeModel. Эта штука содержит в себе текущее состояние мира (для работы с которым есть класс World), умеет заполнять мир случайными клетками (это нужно для первого старта) или продолжать «покадровую» симуляцию с заданного мира (это нужно при внесении изменений в прошлое). Класс LifeView отвечает за визуальное отображение модели жизни, связываются они через сигналы/слоты.Жизнь симулируется, но это лишь мимолетное «настоящее», нам потребуется знать все прошлые состояния мира, т.е. нам необходимо от трех измерений перейти к четырем: появляется класс TimeFlow (поток времени, ветка реальности). Он агрегирует LifeModel, содержит коллекцию World (история прошлого), а также точки для построения кривой отклонения истории. Также у него есть указатель на родительский поток, от которого он отпочковался. Конечно же, потоков времени может быть много, и все они хранятся в TimeModel, фактически представляющий собой древо времени. Именно TimeModel предоставляет интерфейс для просмотра прошлого и перемещения в заданный момент. Он хранит не только коллекцию потоков и номер текущего из них, но путешественника во времени (коллекция клеток). В классе TimeView происходит рендер хронодрева с динамическим масштабированием.На самом верхнем уровне у нас находится класс MainWindow. Он содержит все view и TimeModel, отвечает за логику работы UI и связывает модели с представлениями посредством сигналов\\слотов. Рабочий цикл организован таймером, по тикам которого вызывается next у TimeModel, а он уже пробегается по всем потокам времени, требующим в настоящий момент вызова next (ведь мы можем быть в прошлом, и наш родной поток уже просчитан на какое-то количество шагов вперед).Все остальные подробности проще посмотреть непосредственно по коду. Да, поскольку это мой первый опыт разработки на фреймворке Qt, конструктивные замечания по коду приветствуются)Запуск!Совершим пробный запуск, размер мира 300х300: Рис. 12 — пример путешествия во времениИстории перешла в интенсивное отклонение не сразу, достигнув максимума пошел некоторый спад. Отношение отклонения в точке начала путешествия («вершина петли») к максимальному отклонению можно увидеть на мониторе, параметр Dif coef. Здесь он равен 0.82, то есть деформация истории успела уменьшиться почти на 20%.Dif и характер кривой бранчаУстановив размер мира в 100х100, я совершил прыжок в прошлое, и получился такой график: Рис. 13 — один из вариантов кривой потока времениЖелтая кривая – это вычисленный программой альтернативный поток истории, а поверх я наложил рассмотренные в разделе математической модели графики. Конечно, его пришлось масштабировать их по обеим осям, ведь в них не соблюдены реальные размерности. Они нам просто не известны: мы не знаем коэффициент упругости времени, и мы не знаем коэффициент масштабирования графика по оси времени. На графике видно, что первый вариант (равноускоренное затухание) явно мимо, второй («пружинная» формула) больше похож на правду, но кривая слишком рано начинает затухать. Третий вариант (формула, полученная в результате ошибки) почему-то более других отражает характер реальной кривой.На самом деле мне просто повезло с первой попытки получить такую кривую. Не всегда dif затухает, иногда отклонение непрестанно растет, в том числе после вершины петли. Для того, чтобы точно выявить от чего это зависит, нужны доработки программы и тщательные эксперименты. Пока что я не заметил, чтобы на характер кривой влиял размер мира, объекта, дальность переноса. Скорее всего, как и в реальном мире, все дело в конкретных обстоятельствах путешествия, т.е. тех «событиях», среди которых появляется пришелец из будущего.В любом случае, полученные кривые ближе к правде, нежели обычно принятое условное изображение реальности в виде прямой линии. Во-первых, отклонение реальности вряд ли происходит линейно. Совершается одно событие, само по себе незначительное, которое через какое-то время вызывает (или не вызывает) другое, уже куда более мощное. Это как в I-й части «Назад в будущее»: сначала Марти оттолкнул своего отца от машины – кривая отклонения реальности незначительно ушла. И только потом события начинают развиваться стремительно. Во-вторых, постоянно происходят колебания, миры становятся то ближе, то дальше (в плане схожести).Важен ли размер мира?Все тесты я проводил на квадратных мирах размерностью 100-1000. Конечно же, чем больше мир, тем он более полноценно симулирует мир реальный, пока есть только одна проблема: программа тормозит на больших мирах. Нужна оптимизация. Но уже сейчас понятны некоторые вполне логичные закономерности. На маленьком мире пространственный очаг изменения истории распространяется быстрее. Возьмем мир 100х100:Рис. 14 — сравнение trunk'а и branch'а В прошлое был отправлен объект из 4-х клеток, и за каких-то 200 поколений мир изменился почти полностью (на рисунке показано две реальности).Посмотрим мир 1000х1000:Рис. 15 — распространение области измененийЕсли наложить два варианта мира через 500 поколений, то можно увидеть вполне четкое пятно разницы (все остальное – идентично). Радиус пятна со временем растет, т.е. изменение истории охватывает все большее пространство. Но опять же, не всегда. Иногда происходит странная череда событий, и все изменения сглаживаются, порою даже до нуля, и миры становятся идентичными.Кстати, после достижения вершины петли можно нажать «Play» и продолжить симуляцию, чтобы посмотреть дальнейшее поведение ветки. Как правило, если dif монотонно рос внутри петли, он продолжает свой рост после (возрастает радиус пятна). Впрочем, рост происходит довольно медленно, и при больших размерах мира относительный радиус пространственных изменений крайне мал.Три типа Петля времениПо ходу статьи мы уже несколько раз сталкивались с вопросом: что считать «серьезным» вмешательством в историю, а что нет? Быть может, уже в обозримом будущем мы научимся просчитывать траектории реальности как Вычислители в «Конец Вечности» А. Азимова, а пока нужно начать хоть с чего-то.Начнем с понятия системы отсчета. Их две, хотя они и неразрывно взаимосвязаны: мир и путешественник. Можно отправиться в прошлое, и внести колоссальные изменения в соседнюю галактику, но на прошлое путешественника здесь на Земле это никак не повлияет. Другой пример: путешественник может отправиться на день назад и внести в поток событий своего двойника некую мелочь, в результате которой через день он не полети т в прошлое. Отклонение истории в первом примере огромно в системе отсчета мира, но незаметно с точки зрения путешественника. Во втором примере наоборот: для мира это исчезающе малая флуктуация, а с точки зрения путешественника запустился совершенно иной сценарий событий.Измерение отклонений истории в системе отчета мира – крайне интересная и важная тема, только пока в ней больше вопросов. Потоки истории затрагивают слишком много людей, пока не разработаны необходимые модели, чтобы количественно оценивать значимость мировых событий. Скажем, какое изменение истории значительнее: спасение президента Кеннеди или предотвращение Чернобыльской аварии? Самое простое, что мы сейчас можем сделать, это оценивать степень изменения истории по влиянию этих изменений на вершину петли времени. И тогда логично выделить 3 степени изменения истории:Рис. 16 — три типа петли времениИзменение практически полностью затухает до вершины петли. Например, устроили пикник в Юрском периоде, до наших дней не сохранится даже пластик.К вершине петли изменение затухает, но не полностью, остается некоторый след. Например, слетали во вчерашний день и в своем блокноте нарисовали картинку. Вернувшись, откроем блокнот, и увидим ее (главное до начала эксперимента не смотреть в блокнот).Отклонение истории настолько мощное, что может отменить сам полет.Здесь важно понимать относительность этих степеней, т.е. любое изменение истории затухает, вопрос лишь в том, насколько оно успеет затухнуть к моменту отлета в прошлое. Впрочем, затухание продолжается и после этого момента.В программе у меня почему-то не получилось с ходу поймать петлю II-го типа:Рис. 17 — примеры из программыТип петли на мониторе выводится в параметре Leap Type. Практически всегда там номер 3. Что происходит? Когда симуляция доходит до того момента, из которого совершался спуск в прошлое, происходит наложение объекта (который улетал) на текущий мир (бранч). Если расположение клеток совпадает, т.е. в новой версии истории в этой же точке пространства-времени есть этот объект – значит «коэффициент инвариантности» равен 1. Если же ни одна клетка не совпала – то он равен 0. Пока что в коде заданы условные пороги этого коэффициента, разграничивающие 3 типа петли (абсолютно «с потолка»). Означает ли это, что любое перемещение в прошлое приводит к парадоксам? Думаю, что нет, просто алгоритм «Жизнь» крайне чувствителен к вносимым изменениям. Он дает модель мира в очень грубом приближении, без целеориентированности процессов, тогда как человеческая деятельность так или иначе имеет свой вектор. За счет этого, как я предполагаю, эффект затухания dif’а в симуляции меньше, чем в реальном мире. У читателей возникло немало вопросов типа «так затухает ли история, разве моделирование в программе это не опровергло?». Думаю, что не опровергло, а частично подтвердило. Случаев, когда отклонение монотонно растет не больше, чем когда отклонение затухает, хотя бы на 5-10%. Даже сам факт того, что эти случаи зарегистрированы — говорит о том, что история способна «выправляться» в принципе, обладает упругими свойствами. Некоторые заметили специфические условия, при которых ветка особенно быстро вливается в транк — и эти условия можно трактовать двояко. Да, история мира в программе, как и у реального мира — неоднородная, состоит несколько «эпох»:высокая плотность жизни и ее однородностьжизнь редеет и образуются более сложные структуры, обособленные группы клетокэпоха равновесияНо разве это не похоже на эволюцию нашего космоса и планеты? И да, перемещения внутри одной эпохи, перемещения между эпохами — дают разный результат. Это можно трактовать как особенность алгоритма, которая мешает нам ставить корректные эксперименты. А можно считать отражением реальных процессов Вселенной.ЗаключениеМожно ли сказать, что в целом история чаще всего стремится вернуться в свое русло? Как минимум, такой эффект зарегистрирован, а чтобы говорить о его частоте, нужно больше экспериментов. Конечно, опыты необходимо проводить в автоматизированном режиме, т.е. вместо UI реализовать API программы + скрипты, где задавать различные сценарии испытаний со множеством повторов. Что это даст? Как минимум, мы сможем оценить динамические характеристики потока времени. Как кривая затухания деформации истории зависит от размера объекта, размера мира, каков наиболее общий вид этой кривой? Сделав машину времени «многоразовой», мы сможем смоделировать сложные парадоксы, и посмотреть, что действительно происходит. Отмена отмены изменения истории? День Сурка? Парадокс статуи? Все это можно будет увидеть «вживую», в виде реальных (точнее, виртуальных) 5D-треков.Может быть, у вас есть идеи и предложения, в каком еще направлении можно развить проект?Кроме концептуальных задач, есть ряд чисто технических доработок, в частности:Остро нужна оптимизация, необходимо допиливать алгоритм (например, реализовать HashLife) – надеюсь, дойдут когда-нибудь до этого руки.Может кто-нибудь собрать бинари под Linux?Система автоматизированных экспериментов.Переход на Qt5, С++11И множество мелких улучшений по интерфейсу, возможность сохранять мир, выбирать объект из прошлого, телепортировать его при полете в прошлое и пр.Главное – это понимание первооснов вопроса! Сейчас есть немало «мифов», увы, формирующих представления о времени у многих людей. Через раз я читаю про «если переместиться на секунду назад, то очутишься в космосе, ведь Земля движется». Или состояние «хроностазиса», когда мир вокруг «замирает», называют «замедлением времени», тогда как это наоборот, ускорение времени наблюдателя. А ведь подобные вопросы легко разрешимы даже без каких-либо экспериментов, на уровне элементарной логики! Я это к тому, что огромный пласт работы по исследованию времени можно (и нужно) проводить даже не имея работающих хронотехнологий, вооружившись здравым смыслом. Плюс, уже не первый раз на помощь приходит программирование.Сегодня мы коснулись вершины айсберга, кратко рассмотрев один из парадоксов времени. Тема времени беспредельна, в многообразии вопросов и своей увлекательности. Если кому-то интересно участвовать в этой работе – пожалуйста, открыто несколько проектов. Без капли иронии скажу, что в вопросе изучения времени не последняя надежда человечества на хабралюдей, чье умение логически мыслить и творчески гореть поможет сделать новые открытия!Да, в статье не раскрыта тема событийных законов (эвентология), не перечислены различные способы наблюдения прошлого (т.к. статья о путешествиях), ну и конечно у многих возникли вопросы: а возможны ли путешествия в прошлое вообще, существует ли время? Чтобы не уйти в одну лишь философию (и как следствие — холивар), приходится делать допущения. В первую очередь, мы допускаем возможность полетов в прошлое. Дальше у нас открывается возможность не только обсуждать эту тему и высказывать самые «сумасшедшие» идеи, но и приводить поток мыслей в систему, и даже пробовать подтвердить свои теории экспериментально. Так, шаг за шагом, мы приближаемся к разгадке величайшей тайны — времени!"
    },
    "doc_56": {
        "url": "https://habr.com/ru/post/174773/",
        "title": "Уязвимость графического пароля",
        "text": "Предыстория: моя жена постоянно норовит как-нибудь мне напортачить: поставить будильник на 3 часа ночи, поменять мелодию звонка, снести настройки синхронизации, удалить свою смс и потом доказывать, что она этого не говорила.Шутки шутками, но в какой-то момент я решил: “Довольно!” — и поставил графический пароль на свой андроид.Жена усмехнулась и сказала, что подберёт. Я посмеялся в ответ, на том и разошлись. Только теперь её волновал вопрос, как подобрать, а меня какова вероятность этого события.Самая первая и логичная мысль придумать математический способ вычисления комбинаций. Нужно задать начальные условия:Направление имеет значениеКаждую точку можно пройти лишь однаждыДля соединения двух точек они должны быть в прямой видимости. То есть первая может быть соединена пальцем со второй, но не с третьей.Количество точек: от 5 до 9. Назовём один росчерк, одно соединение — хопом. То есть у нас может быть от 4 до 8 хопов.Попытки влоб просчитать варианты математически не увенчались успехом. Накладываемые условия не позволили выявить правила. Следующий шаг: перебор. Не то чтобы я надеялся перебрать все десятки тысяч вариантов. Основная мысль была — найти закономерности. Я потратил на рисование схем несколько часов. Но все закономерности упирались в симметрию и то, что все угловые точки равнозначны, как и все промежуточные (кроме центральной).Но когда нас пугали трудности? Начал я всё-таки с одного хопа. 1 хоп — проще пареной репы — 56 вариантов,2 хопа — ничего сложного — 320 вариантов3 хопа — пришлось потрудиться — 1624 варианта4 хопа — это было, кхм, утомительно — 7152 варианта5 хопов — мама миа и вырванные волосы — результат неизвестен.Дальше я уже решил не насиловать свой мозг и вспомнить давно забытое программирование.Расчехлил турбопаскаль, стряхнул пыль с переменных и начал разрабатывать алгоритм. После 4 лет паузы и простеньких скриптов на баше мне потребовался целый вечер на отладку программы. Даром, что алгоритм родился минут за 20.Сам кодВот вывод количества вариантов для каждого количество хопов. Как видно, с 1 по 4 цифра совпадает с практическими рассчётами, а при количестве хопов больше 8 — путей нет, что логично.Паскаль имеет ограничение в 64 кБ на размер массива. Поэтому массив даже из Byte в несколько десятков тысяч элементов невозможен. Заморачиваться с динамическим выделением памяти или записями не хотелось, поэтому просчитать сами пути в подробностях можно только до 4 хопов:UPD. при расчёте прежде не была учтена возможность проходить сквозь уже использованную точку.В новой версии баг исправлен.Это результат для последовательности 11-22-31-32-12:И вот долгожданный результат:Итак, 389488 возможных вариантов.Даже если из них исключить 50% извращённых вариантов, которые не каждый человек, лишённый шизофрении, сможет с первого раза набрать (впрочем, зачем шизофренику андроид), остаётся 194744 вариантовАндроид даёт 20 попыток, после которых блокирует телефон.Итак, 20/194744=,0001. То есть, вероятность 0,01%. Одна сотая процента!“Ну-ну” — сказал я жене, показывая расчёты. “Ну-ну” — сказала мне жена, показывая разблокированный телефон."
    },
    "doc_57": {
        "url": "https://habr.com/ru/post/157775/",
        "title": "Клавиатура, идея, две руки",
        "text": "Случалось ли в твоей жизни, %username%, такое, когда тебе продолжительное время хотелось странного? Неважно чего — ведь у каждого разные вкусы и предпочтения. Моя страсть сидела во мне долго, но однажды всё-таки вырвалась наружу. Мне нравится делать необычные вещи, и мне всегда нравился моддинг как средство самовыражения. Несколько лет назад я вдохновился изделиями моддеров из разных стран и начал обдумывать несколько своих проектов. В частности, мне очень хотелось сделать стилизованную под девятнадцатый век клавиатуру. Изучив работы таких известных моддеров как Filimon и Datamancer, я приступил к работе. Сразу хочу сказать, что хотя я и не жалуюсь на полное отсутствие воображения, но люблю получать предсказуемый результат. Поэтому, перед тем как взяться за инструмент, я постарался смоделировать то что хочу получить в итоге. Ещё одной особенностью данного проекта является то, что всё программное обеспечение, которое я использовал в работе, является открытым и свободным: ОС — Debian testing, софт — Blender, LibreCAD, Inkscape. Так как мой замысел состоял в том чтобы сделать клавиатуру в деревянном корпусе, прежде всего мне необходимо было знать сечения деревянных заготовок, которые мне понадобятся. Тщательно измерив клавиатуру-донор, я засел за черчение и моделирование. Прорисовав двухмерные проекции, я принялся за моделирование в 3D.Итак, внешний вид устройства вырисовался и пора воплощать его в дереве и латуни. В качестве материала корпуса был выбран ясень и дубовый шпон для накладок. Клавиатура-донор в финале должна находиться между двух шпонированных пластин из МДФ. Посадочные места клавиш были тщательно промеряны и на основании полученных данных был составлен чертёж в LibreCAD. Согласно нему будут прорезаны отверстия в МДФ-пластине. Зелёные светодиоды быди удалены и на их место были впаяны светодиоды бОльшего размера, дающие тёплое, ламповое свечение. Для того чтобы светодиоды выглядели ещё теплее и ламповее, для них была изготовлена латунная накладка.Согласно чертежам были заказаны деревянные бруски необходимых сечений, которые в дальнейшем были обработаны руками, держащими инструмент. Согласно чертежам-же. В девайсе, кстати, предполагался USB-хаб, отверстия под который были незамедлительно профрезерованы. Также под оный была изготовлена латунная накладка.Вся конструкция будет стянута шпильками, но я категорически не хотел чтобы из моего поделия торчали гайки и концы шпилек, поэтому решил сделать декоративные латунные заглушки.Что касается самих клавиш, то у меня был вариант сделать их из пуговиц, но я решил что это не есть труЪ. Посему круглые клавиши были выточены из латунного прутка, а продолговатые — выкованы из латунной пластины.Отдельно делалась клавиша «пробел». Она состоит из трёх спаяных заготовок.Накладки на клавиши были вырезаны из чёрного глянцевого пластика. Буквы и символы нанесены при помощи лазерной гравировки.После всех подготовительных работ, детали были тщательно ошкурены, прошлифованы, вскрыты несколькими слоями морилки и полачены (тоже в несколько слоёв). После сборки всё стало выглядеть как-то так. Дополнительно также был изготовлен футляр.Мечта воплотилась в реальность, но теперь есть непреодолимое желание поднять планку повыше. Идей много, кроме того, бросать вызов самому себе очень интересно. Пожелайте мне успехов.P.S. Отвечаю на многочисленные вопросы: в качестве донора использовалась клавиатура Defender Accent 930."
    },
    "doc_58": {
        "url": "https://habr.com/ru/post/131581/",
        "title": "Несколько полезных сервисов",
        "text": "Хочу поделиться ссылками на несколько полезных сервисов. Некоторые из них помогут сэкономить время, другие — сделают за Вас незнакомую/нелюбимую работу. Список разбит по категориям, чтобы было легче ориентироваться.Сервисы опросовuserreport.com (добавил Romanych)simpoll.ruwebanketa.com (добавил mihass)Кнопки постинга в социальные сетиКнопка от Яндексаaddthis.com (добавил UksusoFF)share42.comСвязь с клиентамиuserecho.com (добавил SSM)cloudim.ru (добавил AlexoLive)consultsystems.ru (добавил serzhb)krible.comzopim.comolark.comliveperson.com (добавил a1exis)siteheart.com (добавил Alex_EXEcuter)onicon.ru (добавил Aco)p3chat.com (добавил risotto)webim.ru (добавил shimapa23)jivosite.ru (добавил access)mibew.org (добавил Romanych)livezilla.net (добавил xaker1)sitehelp.inkiev.net (добавил ilesik)marva.ru (добавил Idiff)gotalk.ru (добавил shandor)netroxsc.ru (добавил Manimal)zingaya.com (добавил psserg)Генераторы прелоадеровpreloaders.netajaxload.infoГенераторы кнопокcssbuttongenerator.comcss3buttongenerator.comcss-tricks.com/examples/ButtonMakercssbutton.me (добавил Defite)Генераторы фоновpatternizer.com/vh4 (добавил Londeren)display-inline.fr (добавил Londeren)creatr.cc/backgroundsГенераторы иконокiconizer.netfindicons.com (добавил Paskal)iconfinder.com (добавил hormold)Тестирование сайтапросмотр ответа и заголовков HTTP-запроса (добавил msfs11)JSON Formatter & Validator (добавил msfs11)The JSON Validator (добавил Grifon)browsershots.org, multibrowserviewer.com (добавил BugZ) — для просмотра сайта в различных браузерах.создание скриншотов (добавил Begetan)просмотр сайта в разных разрешениях (добавил BugZ)тестирование .htaccess (добавил student_ivan)мониторинг состояния приложений (добавил Kane)тесты для сайта и сервера (добавил websitepulse)проверка сервера на доступность из разных точек мира (Ping, DNS, HTTP, TCP порт) (добавил withlove)проверка скорости загрузки сайта в реальных браузерах (из разных точек мира) (добавил withlove)GTmetrix  (добавил Андрей М.)Тестирование регулярных выраженийregex101.com debuggex.comrefiddle.comregexplanet.comЗа набор этих сервисов спасибо ReinRaus.regexr.com (добавил student_ivan)regexpal.com (добавил maruan_a)Песочница для HTML/CSS/JScssdesk.com (HTML+CSS)jsfiddle.net (HTML+CSS+JS+фреймворки)За оба сервиса благодарить Desiderata.Другоеwysiwyg-построитель формподбор гармонирующих цветов (добавил @hashspark)Ultimate CSS Gradient Generator (добавил shifty)подбор цветовых схем (добавил kvasko_linuxoid)CSS3 tools (добавил Kane)конвертер в Data URI (добавил Kane)online JavaScript beautifier (добавил mrShadow)html5 для IE (добавил DimICE)генератор шаблонов страницзаглушки для баннеров (добавил skipfish)конструктор веб-форм и баз данных (добавил MyTaskHelper)генератор фоновПродолжение данного списка ⇨Спасибо всем, поскольку большая часть ссылок получилась собрана вами. Тем не менее, если чего-то здесь не нашли, можете поискать на следующих страницах: раз, два, три, четыре, пять, шесть. Добавили: BugZ, Santacruz, Webtun, @hellhorse. И, конечно же, много полезного в подборке 400 потрясающих бесплатных сервисов.Последнее обновление: 13.07.2016"
    },
    "doc_59": {
        "url": "https://habr.com/ru/post/488592/",
        "title": "Открытое письмо компании Mail.ru об игре «Аллоды II: Повелитель душ»",
        "text": "Уважаемые сотрудники Mail.ru Group!К вам обращается сообщество игры «Аллоды 2: Повелитель Душ». Это гениальная RPG-игра, которую в 1999 году создала команда Nival; несколько лет назад Аллоды перешли под крыло Mail.ru Group.Аллоды 2 — это RPG игра, являющаяся хрестоматийным примером интереснейшего самобытного геймплея. Помимо шедевральной одиночной кампании, сетевой режим в Аллодах 2 сравним по своей феноменальности с Ultima Online и World of Warcraft, обладая поистине уникальными механиками, сеттингом и духом. Неслучайно эта игра несмотря на свой солидный возраст вызывает интерес не только в русскоязычной среде, но и в международном сообществе — в нее до сих играют люди с самых разных сторон света.Недавно Аллодам 2 исполнилось 20 лет…Все эти годы сообщество аллодеров старается улучшить игру, используя дизасм (сборка) исправляет баги и краши, добавляет новые функции; к сожалению, без исходников крайне сложно что-то менять; хотя мы и достигли определенных успехов. Также существует два параллельных проекта переноса игры на Unity:фокус на сетевой игре; видео: фокус на кооп сингл кампании; видео:Но опять же без исходников невозможно перенести игру в точности такой, какой она была изначально; сохранить ее тончайшие особенности и ее «душу».В честь двадцатилетнего юбилея игры, мы, аллодеры, обращаемся к компании Mail.ru с огромной просьбой — открыть исходники Аллодов 2 для некоммерческого использования. Это позволит сообществу игры, среди которого немало талантливых программистов, исправить баги и краши, добавить совместимость с Windows 10 и воплотить множество интереснейших геймплейных механик, чтобы сделать игру лучше. У нас есть для этого ресурсы: есть люди, готовые работать над этим открытым проектом в свое свободное время во благо сообщества. Мы связались в Сергеем Орловским, создателем Аллодов 2 — и он поддержал идею публикации Аллоды 2 в open-source.Учитывая позицию Mail.ru Group по развитию open-source в России — мы надеемся, что Mail.ru задаст тренд в публикации всеми любимых классических игр в open-source. В русскоязычной среде разработчиков это уже практикуется; примеру, в открытый доступ выложены исходники «Вангеров».Аллоды 2 — это больше, чем просто RPG игра. Это национальное достояние, уникальный образец творчества наших соотечественников. Было бы очень здорово, если бы этот проект благодаря компании Mail.ru увидел вторую жизнь и уже будучи легендарной частью русскоязычного игропрома, вошел в зал славы международного сообщества. Сообщество аллодеров со своей стороны постарается сделать для этого все возможное.pkruglovТекст письма в блоге нашего сервера"
    },
    "doc_60": {
        "url": "https://habr.com/ru/post/152885/",
        "title": "Восстановление расфокусированных и смазанных изображений. Повышаем качество",
        "text": "Представляю вашему вниманию заключительную статью из трилогии «Восстановление расфокусированных и смазанных изображений». Первые две вызвали заметный интерес — область, действительно, интересная. В этой части я рассмотрю семейство методов, которые дают лучшее качество, по сравнении со стандартным Винеровским фильтром — это методы, основанные на Total Variaton prior. Также по традиции я выложил новую версию SmartDeblur (вместе с исходниками в open-source) в которой реализовал этот метод. Итоговое качество получилось на уровне коммерческих аналогов типа Topaz InFocus. Вот пример обработки реального изображения с очень большим размытием:ВведениеОписывать базовую теорию деконволюции здесь я не буду, о ней очень подробно было написано в предыдущих статьях. Тем, кто не читал их или подзабыл, рекомендую для начала ознакомиться с ними, чтобы понять терминологию и классические подходы:Часть 1. Теория;Часть 2. Практика.Прежде чем перейти к описанию Total Variation (далее TV prior), необходимо понять, какие же недостатки есть у алгоритмов типа классического Винеровского фильтра? Самые основные — это эффект типа звона (периодический ореол на краях объектов) даже при небольшом уровне шума, размывание границ и мелких деталей, а также плохое шумоподавление с точки зрения человеческого восприятия. Все это сильно мешает практическому применению фильтра Винера ограничивая его применение задачами технического восстановления изображений, например для прочтения интересующих надписей.Поэтому в последнее время было разработано большое количество самых разных методов, цель которых состоит в улучшении визуального качества. Надо заметить, что количество деталей при этом, как правило не возрастает.Описание TV priorОсновное качество Total Variation prior с точки зрения результата — сохранение резких краев и сглаживание артефактов деконволюции. Записывается следующим образом:К сожалению, вычисление этого функционала нельзя сделать простым образом, поскольку здесь требуется применение весьма сложных техник оптимизации.В качестве альтернативы можно использовать сглаженный функционал вместо абсолютного значения:Когда эпсилон стремится к нулю, результат стремится к первоначальному определению Total Variation, но процесс оптимизации становится более сложным. И наоборот, при достаточном большом эпсилон результат оптимизации будет напоминать фильтр Винера с размытием краев. К сожалению, приведенная выше формула имеет неквадратичный вид, поэтому она не может быть просто вычислена в частотном пространстве Фурье, как это получалось с фильтрами Винера и Тихонова. Поэтому необходим один из методов пошаговой оптимизации для нахождения приближенного решения — например классический метод градиентного спуска:Где тау вычисляется по следующей формуле:А градиент сглаженного функционала определяется как:Количество итераций должно быть достаточно большим — несколько сотен.Это самый базовый подход в реализации TV prior, что называется «в лоб». Тем не менее, даже он дает очень неплохие результаты. На базе его в научных публикациях появилось много исследований, которые пытаются еще улучшить качество, а также уменьшить время расчета.Практическая реализацияОписанные формулы, в принципе, несложные, хотя и очень громоздкие в реализации. Основная проблема — достичь высокого быстродействия, т.к. количество итераций очень большое и каждая итерация содержит много сложных действий. А именно — несколько сверток изображения целиком, вычисления полного градиента и дивергенции.Скажу сразу, добиться хорошей скорости работы мне пока не удалось, на изображении размером несколько мегапикселей время финального вычисления составляет 2-3 минуты. Но Preview работает быстро — порядка 0.2 секунды.Сборку под Windows можно скачать по адресу: github.com/downloads/Y-Vladimir/SmartDeblur/SmartDeblur-1.27-win.zipИсходники (под лицензией GPL v3) доступны по ссылке: github.com/Y-Vladimir/SmartDeblurОсновные изменения по сравнению с прошлой версией, которая была описана во второй части:Добавлены два метода деконволюции: TV prior и фильтрация по ТихоновуДобавлена поддержка восстановления Гауссового размытияУлучшена скорость работы (примерно в 2.5 раза)Уменьшено потребление памяти (примерно в 1.5 раза)Максимальный размер обрабатываемого изображения по умолчанию 3000 (но можно менять в настройках)Добавлена секция настроекДобавлен Updates CheckerПоддержка Drag&DropДобавлен Help Screen с примером изображения и советами по настройкеИсправлен баг с рябью в режиме previewЯзык C++ с использованием Qt.СравнениеНу и теперь самое главное — на какое же качество можно рассчитывать при обработке размытых изображений. Будем сравнивать с топовым коммерческим аналогом Topaz InFocus. Остальные аналоги (типа FocusMagic) уже давно не поддерживаются или дают уж совсем неприемлемые результаты обработки. Итак поехали.Сначала возьмем рекламный пример с сайта Topaz InFocus: www.topazlabs.com/infocus/_images/licenseplate_compare.jpgВот результат от Topaz InFocus:А вот результат работы SmartDeblur при следующих параметрах: Type: Motion Blur, Length: 10.1, Angle: -45, Smooth: 60%Как видим, результаты очень схожие. И не так очевидно, что лучше. Topaz InFocus, судя по всему, тоже использует алгоритм, похожий на TV prior плюс пост-обработка в виде шарпинга краев. Надо заметить, что приведенное исходное смазанное изображение, с очень большой вероятностью, является синтетическим. Т.е. взято неискаженное изображение и применен фильтр Motion Blur. Это видно по практически идеальному восстановлению, а также по подозрительно целым параметрам искажения — угол 45 градусов и длина 10 пикселей.Теперь возьмем реальное изображение, которое я вчера сфоткал на свой Canon 500D с ручным уводом фокуса:Результат от Topaz InFocus при следующих параметрах: Type: Out-of-Focus, Radius: 5.5, Suppress Artifacts: 0.34Результат SmartDeblur при следующих параметрах: Type: Out of Focus, Radius: 5.9, Smooth: 60%Тут ничья, можно сказать. Параметры в каждой программе подбирались так, чтобы обеспечить наилучшее качество.Еще один реальный пример снятый мною:Результат SmartDeblur при следующих параметрах: Type: Motion Blur, Length: 6.6, Angle: -37, Smooth: 53%ВыводыПодошла к концу третья заключительная статья. Получилась она не особо большой, но, надеюсь, будет полезной. Как видим полученное качество обработки уже вполне приемлемо для реального применения. Основная проблема, которая остается — в местах, где есть светлые объекты, после обработки получается заметный эффект звона. Думаю, это связано с тем, что на светлых участках нарушается линейность отображения яркости пикселей, что дает неверную интерпретацию о его реальной яркости. Возможно, нужна логарифмическая предобработка яркости, либо еще что-то.Еще раз напомню:Сборку под Windows можно скачать по адресу: github.com/downloads/Y-Vladimir/SmartDeblur/SmartDeblur-1.27-win.zipИсходники (под лицензией GPL v3) доступны по ссылке: github.com/Y-Vladimir/SmartDeblurИ как обычно — буду очень рад замечаниям и предложениям по SmartDeblur!Кто будет пробовать программу — учтите, что параметр качества Smooth в режиме превью и в режиме High-Quality ведет себя весьма по-разному. Поэтому финальный результат ползунка сглаживания можно оценить только после завершения просчета High-Quality.P.S. Огромная просьба ко всем, кто мне пишет на почту. После публикации двух предыдущих статьей мне пришло (и продолжает приходить) большое количество писем с просьбой восстановить номера машин на кадрах с камер видеонаблюдения, когда весь номер занимает площадь несколько пикселей. Я этим не занимаюсь! SmartDeblur этого тоже делать не умеет. Это задача совсем другого рода, а именно Super-Resolution, когда из нескольких изображений малого разрешения получается изображение высокого разрешения с новыми деталями, которых не было на исходных данных. Может быть когда-нибудь ей и займусь, но точно не в ближайшее время.UPDATE Ссылка на продолжение:Blind Deconvolution — автоматическое восстановление смазанных изображений--Vladimir Yuzhikov (Владимир Южиков)"
    },
    "doc_61": {
        "url": "https://habr.com/ru/post/102521/",
        "title": "Декодирование JPEG для чайников",
        "text": "[FF D8]Вам когда-нибудь хотелось узнать как устроен jpg-файл? Сейчас разберемся! Прогревайте ваш любимый компилятор и hex-редактор, будем декодировать это:Специально взял рисунок поменьше. Это знакомый, но сильно пережатый favicon Гугла: Последующее описание упрощено, и приведенная информация не полная, но зато потом будет легко понять спецификацию.Даже не зная, как происходит кодирование, мы уже можем кое-что извлечь из файла.[FF D8] — маркер начала. Он всегда находится в начале всех jpg-файлов.Следом идут байты [FF FE]. Это маркер, означающий начало секции с комментарием. Следующие 2 байта [00 04] — длина секции (включая эти 2 байта). Значит в следующих двух [3A 29] — сам комментарий. Это коды символов \":\" и \")\", т.е. обычного смайлика. Вы можете увидеть его в первой строке правой части hex-редактора.Немного теорииОчень кратко:Обычно изображение преобразуется из цветового пространства RGB в YCbCr.Часто каналы Cb и Cr прореживают, то есть блоку пикселей присваивается усредненное значение. Например, после прореживания в 2 раза по вертикали и горизонтали, пиксели будут иметь такое соответствие:Затем значения каналов разбиваются на блоки 8x8 (все видели эти квадратики на слишком сжатом изображении).Каждый блок подвергается дискретно-косинусному преобразованию (ДКП), являющемся разновидностью дискретного преобразования Фурье. Получим матрицу коэффициетов 8x8. Причем левый верхний коэффициент называется DC-коффициентом (он самый важный и является усредненным значением всех значений), а оставшиеся 63 — AC-коэффициентами.Получившиеся коэффициенты квантуются, т.е. каждый умножается на коэффициент матрицы квантования (каждый кодировщик обычно использует свою матрицу квантования).Затем они кодируются кодами Хаффмана.Закодированные данные располагаются поочередно, небольшими частями:Каждый блок Yij, Cbij, Crij — это матрица коэффициентов ДКП (так же 8x8), закодированная кодами Хаффмана. В файле они располагаются в таком порядке: Y00Y10Y01Y11Cb00Cr00Y20...Чтение файлаФайл поделен на секторы, предваряемые маркерами. Маркеры имеют длину 2 байта, причем первый байт [FF]. Почти все секторы хранят свою длину в следующих 2 байта после маркера. Для удобства подсветим маркеры:Маркер [FF DB]: DQT — таблица квантования[00 43] Длина: 0x43 = 67 байт[0_] Длина значений в таблице: 0 (0 — 1 байт, 1 — 2 байта)[_0] Идентификатор таблицы: 0Оставшимися 64-мя байтами нужно заполнить таблицу 8x8.Приглядитесь, в каком порядке заполнены значения таблицы. Этот порядок называется zigzag order:Маркер [FF C0]: SOF0 — Baseline DCTЭтот маркер называется SOF0, и означает, что изображение закодировано базовым методом. Он очень распространен. Но в интернете не менее популярен знакомый вам progressive-метод, когда сначала загружается изображение с низким разрешением, а потом и нормальная картинка. Это позволяет понять что там изображено, не дожидаясь полной загрузки. Спецификация определяет еще несколько, как мне кажется, не очень распространенных методов.[00 11] Длина: 17 байт.[08] Precision: 8 бит. В базовом методе всегда 8. Это разрядность значений каналов.[00 10] Высота рисунка: 0x10 = 16[00 10] Ширина рисунка: 0x10 = 16[03] Количество каналов: 3. Чаще всего это Y, Cb, Cr или R, G, B1-й канал:[01] Идентификатор: 1[2_] Горизонтальное прореживание (H1): 2[_2] Вертикальное прореживание (V1): 2[00] Идентификатор таблицы квантования: 02-й канал:[02] Идентификатор: 2[1_] Горизонтальное прореживание (H2): 1[_1] Вертикальное прореживание (V2): 1[01] Идентификатор таблицы квантования: 13-й канал:[03] Идентификатор: 3[1_] Горизонтальное прореживание (H3): 1[_1] Вертикальное прореживание (V3): 1[01] Идентификатор таблицы квантования: 1Находим Hmax=2 и Vmax=2. Канал i будет прорежен в Hmax/Hi раз по горизонтали и Vmax/Vi раз по вертикали.Маркер [FF C4]: DHT (таблица Хаффмана)Эта секция хранит коды и значения, полученные кодированием Хаффмана.[00 15] Длина: 21 байт[0_] Класс: 0 (0 — таблица DC коэффициентов, 1 — таблица AC коэффициентов).[_0] Идентификатор таблицы: 0Следующие 16 значений:Количество кодов означает количество кодов такой длины. Обратите внимание, что секция хранит только длины кодов, а не сами коды. Мы должны найти коды сами. Итак, у нас есть один код длины 1 и один — длины 2. Итого 2 кода, больше кодов в этой таблице нет.С каждым кодом сопоставлено значение, в файле они перечислены следом. Значения однобайтовые, поэтому читаем 2 байта:[03] — значение 1-го кода[02] — значение 2-го кодаДалее в файле можно видеть еще 3 маркера [FF C4], я пропущу разбор соответствующих секций, он аналогичен вышеприведенному.Построение дерева кодов ХаффманаМы должны построить бинарное дерево по таблице, которую мы получили в секции DHT. А уже по этому дереву мы узнаем каждый код. Значения добавляем в том порядке, в каком указаны в таблице. Алгоритм прост: в каком бы узле мы ни находились, всегда пытаемся добавить значение в левую ветвь. А если она занята, то в правую. А если и там нет места, то возвращаемся на уровень выше, и пробуем оттуда. Остановиться нужно на уровне равном длине кода. Левым ветвям соответствует значение 0, правым — 1.Деревья для всех таблиц этого примера:В кружках — значения кодов, под кружками — сами коды (поясню, что мы получили их, пройдя путь от вершины до каждого узла). Именно такими кодами закодировано само содержимое рисунка.Маркер [FF DA]: SOS (Start of Scan)Байт [DA] в маркере означает — «ДА! Наконец-то то мы перешли к финальной секции!». Однако секция символично называется SOS.[00 0C] Длина: 12 байт.[03] Количество каналов. У нас 3, по одному на Y, Cb, Cr.1-й канал:[01] Идентификатор канала: 1 (Y)[0_] Идентификатор таблицы Хаффмана для DC коэффициентов: 0[_0] Идентификатор таблицы Хаффмана для AC коэффициентов: 02-й канал:[02] Идентификатор канала: 2 (Cb)[1_] Идентификатор таблицы Хаффмана для DC коэффициентов: 1[_1] Идентификатор таблицы Хаффмана для AC коэффициентов: 13-й канал:[03] Идентификатор канала: 3 (Cr)[1_] Идентификатор таблицы Хаффмана для DC коэффициентов: 1[_1] Идентификатор таблицы Хаффмана для AC коэффициентов: 1[00], [3F], [00] — Start of spectral or predictor selection, End of spectral selection, Successive approximation bit position. Эти значения используются только для прогрессивного режима, что выходит за рамки статьи.Отсюда и до конца (маркера [FF D9]) закодированные данные.Закодированные данныеПоследующие значения нужно рассматривать как битовый поток. Первых 33 бит будет достаточно, чтобы построить первую таблицу коэффициентов:Нахождение DC-коэффициента1) Читаем последовательность битов (если встретим 2 байта [FF 00], то это не маркер, а просто байт [FF]). После каждого бита сдвигаемся по дереву Хаффмана (с соответствующим идентификатором) по ветви 0 или 1, в зависимости от прочитанного бита. Останавливаемся, если оказались в конечном узле.2) Берем значение узла. Если оно равно 0, то коэффициент равен 0, записываем в таблицу и переходим к чтению других коэффициентов. В нашем случае — 02. Это значение — длина коэффициента в битах. Т. е. читаем следующие 2 бита, это и будет коэффициент:3) Если первая цифра значения в двоичном представлении — 1, то оставляем как есть: . Иначе преобразуем: . Записываем коэффициент в таблицу в начало зигзага — левый верхний угол.Нахождение AC-коэффициентов1) Аналогичен п. 1, нахождения DC коэффициента. Продолжаем читать последовательность:2) Берем значение узла. Если оно равно 0, это означает, что оставшиеся значения матрицы нужно заполнить нулями. Дальше закодирована уже следующая матрица. В нашем случае значение узла: 0x31.Первый полубайт: 0x3 — именно столько нулей мы должны добавить в матрицу. Это 3 нулевых коэффициента.Второй полубайт: 0x1 — длина коэффициента в битах. Читаем следующий бит.Аналогичен п. 3 нахождения DC-коэффициента.Читать AC-коэффициенты нужно пока не наткнемся на нулевое значение кода, либо пока не заполнится матрица.В нашем случае мы получим:и матрицу:Вы заметили, что значения заполнены в том же зигзагообразном порядке? Причина использования такого порядка простая — так как чем больше значения v и u, тем меньшей значимостью обладает коэффициент Svu в дискретно-косинусном преобразовании. Поэтому, при высоких степенях сжатия малозначащие коэффициенты обнуляют, тем самым уменьшая размер файла.Аналогично получаем еще 3 матрицы Y-канала…Но! Закодированные DC-коэффициенты — это не сами DC-коэффициенты, а их разности между коэффициентами предыдущей таблицы (того же канала)! Нужно поправить матрицы:DC для 2-ой: 2 + (-4) = -2DC для 3-ой: -2 + 5 = 3DC для 4-ой: 3 + (-4) = -1Теперь порядок. Это правило действует до конца файла.… и по матрице для Cb и Cr:ВычисленияКвантованиеВы помните, что матрица проходит этап квантования? Элементы матрицы нужно почленно перемножить с элементами матрицы квантования. Осталось выбрать нужную. Сначала мы просканировали первый канал. Он использует матрицу квантования 0 (у нас она первая из двух). Итак, после перемножения получаем 4 матрицы Y-канала:… и по матрице для Cb и Cr.Обратное дискретно-косинусное преобразованиеФормула не должна доставить сложностей. Svu — наша полученная матрица коэффициентов. u — столбец, v — строка. Cx = 1/√2 для x = 0, а в остальных случаях = 1. syx — непосредственно значения каналов.Приведу результат вычисления только первой матрицы канала Y (после обязательного округления):и для Cb Cr:Ко всем полученным значениям нужно прибавить по 128, а затем ограничить их диапазон от 0 до 255:Например: 138 → 266 → 255, 92 → 220 → 220 и т. д.YCbCr в RGB4 матрицы Y, и по одной Cb и Cr, так как мы прореживали каналы и 4 пикселям Y соответствует по одному Cb и Cr. Поэтому вычислять так: YCbCrToRGB(Y[y,x], Cb[y/2, x/2], Cr[y/2, x/2]):Вот полученные таблицы для каналов R, G, B для левого верхнего квадрата 8x8 нашего примера:КонецВообще я не специалист по JPEG, поэтому вряд ли смогу ответить на все вопросы. Просто когда я писал свой декодер, мне часто приходилось сталкиваться с различными непонятными проблемами. И когда изображение выводилось некорректно, я не знал где допустил ошибку. Может неправильно проинтерпретировал биты, а может неправильно использовал ДКП. Очень не хватало пошагового примера, поэтому, надеюсь, эта статья поможет при написании декодера. Думаю, она покрывает описание базового метода, но все-равно нельзя обойтись только ей. Предлагаю вам ссылки, которые помогли мне:ru.wikipedia.org/JPEG — для поверхностного ознакомленияen.wikipedia.org/JPEG — гораздо более толковая статья о процессах кодирования/декодированияJPEG Standard (JPEG ISO/IEC 10918-1 ITU-T Recommendation T.81) — не обойтись без 186-страничной спецификацииimpulseadventure.com/photo — Хорошие подробные статьи. По примерам я разобрался как строить деревья Хаффмана и использовать их при чтении соответствующей секцииJPEGsnoop — На том же сайте есть отличная утилита, которая вытаскивает всю информацию jpeg-файла[FF D9]"
    },
    "doc_62": {
        "url": "https://habr.com/ru/post/192218/",
        "title": "Что нам стоит байк построить?",
        "text": "К этому топику я шел два долгих года. Сейчас даже не верится, что прошло столько времени, но бег его неумолим. Возможно, Хабр не самое подходящее место для таких публикаций, далеко не IT, но мне хочется, чтобы те, кто заинтересуются темой, не повторяли моих ошибок. И, возможно, на основе моего опыта у кого-то из интересующихся получится что-то значительно лучше, чем у меня. Я буду только рад. Тема электротранспорта очень популярна среди IT-шников, и не зря.TL;DR — за два года маленькая команда из 2 человек (я как «строитель», и мой московский друг как главный конструктор) сумела спроектировать раму и механику дорожного электробайка, а так же построила его первый прототип. Собственно, на КПДВ — именно этот самый прототип, да. Видео тестовых покатушек — в конце статьи.Если вам интересна история его создания — прошу под кат.Beginning...Давным давно, в далекой далекой галактике… В общем, мне всегда трудно давались вступления к чему-то большому, о чем я хочу поведать, ну да черт с ним. 3 года назад занесла меня жизнь в достаточно примечательное сообщество, в котором, с одной стороны, собрались люди, достаточно здравомыслящие и разумные, чтобы думать о глобальных изменениях, а с другой стороны — как обычно, весьма ленивые и долгие на подъем. В общем и целом все уперлось в банальный факт — все говорили, обсуждали, решали, спорили, строили интриги-скандалы-расследования, ссорились, мирились, доказывали друг другу что-то, но ничего, ровным счетом ничего не делали для того, чтобы идеи глобального изменения жизни к лучшему хоть как-то начали осуществляться.Но, с другой стороны, в каждом сообществе есть хорошие люди со схожими интересами. Именно там я познакомился с моим нынешним другом и, как это теперь сложилось, партнером по увлечению. Достаточно быстро нашлись общие точки и обширные, интересные темы для обсуждений. Мой друг, как и я, уже пришел к выводу о «праведном бездействии» всех окружающих, и уже понемногу у него, как и у меня, начался процесс отхода от активного участия в сообществе. В общем, все было как раз во время.В один из тех давних вечеров ко мне пришла внезапная идея создать что-то руками, да не простое «что-то», а четырехколесное, вполне себе самопередвигающееся транспортное средство. Такая себе молния, от постоянных размышлений «Доколе будем сидеть?» моментально переводящая мысли в русло «Черт! Это же круто! Это то, что нужно сделать! Не медля ни секунды!» Достаточно быстро были найдены книги по строительству реплик Lotus Seven Колина Чепмена, закуплена необходимая литература и я отправился в долгие раздумья, как и что делать, с чего начинать, какой инструмент нужен. К слову будет сказано — на тот момент из инструмента у меня было несколько отверток и плоскогубцы. Все. С таким набором не то что автомобиль — два провода дома скрутить тяжело. Да и сам я по себе ни разу не железячник. Самый обычный погромист, на Хабре больше известный своим диким увлечением canvas'ом и Javascript'ом.Само собой, через несколько недель активных раздумий, подбора донора, проектирования и переделки разных вариаций пространственной рамы, рычагов подвески, разноса всех систем, перепланирования, чтения умных книжек, советующих никогда в жизни не браться за постройку чего-то своего (и я, если честно, теперь абсолютно поддерживаю это мнение, но, с другой стороны, слава монстру, что 2 года назад не нашелся второй я, который смог бы меня отговорить) все свои мысли о том, что нужно куда-то двигаться, я стал аккуратно доносить своему товарищу, с которым мы, на тот момент, почти каждый день были на связи и частенько созванивались. Даже были забавные моменты, когда супруга начинала меня в шутку ревновать к «московскому другу».Как ни странно, мое предложение заняться чем-то было встречено с воодушевлением и мы, очертя голову, бросились в исследования.2 Years before releaseНаш план был прост до безумия — построить что-то, что могло управляться человеком и передвигаться благодаря собственной силовой установке. Как раз в это же время в нашей команде гиков в офисе начали блуждать подобные же настроения, благо практически все — либо с автомобилями, либо мечтающие приобрести. Мне в руки попала замечательная книжка «Build your own sports car on a budget», поэтому в качестве основы я и Рома (мой московский друг) выбрали именно такую компоновку: пространственная рама на основе родстера Lotus Seven, силовая установка с какого-либо донора, доводка и запуск. Но, как бы хорош ни был наш план — суровая реальность каждый день накладывала свою лапу на все наши потуги. После того, как закончили формирование рамы, подобрали нужного донора, рассчитали по минимуму все затраты, мы пришли к выводу, что просто не потянем по деньгам строительство настолько серьезного агрегата. Шутка ли, одни только шарнирные головки подходящей прочности обходились в 30-40$ штука, а их нужно было, без учета потерь, как минимум 8 штук.Еще одна массивнейшая проблема, ставшая перед нами двоими в полный рост — у нас катастрофически не хватало опыта. Теперь я прекрасно осознаю, зачем молодых инженеров отправляли на несколько лет в цех, работать рядом с мастерами, смотреть на станки и впитывать в себя производство. Причина этого — банальное отсутствие каких-либо навыков по механической и температурной обработке металлов. По себе я очень долго замечал, что в редакторе, глядя на заготовки, практически не чувствуется сложность, с которой эти детали потом будут изготавливаться. Вся модель представляется типичной картонкой, которую можно согнуть-сломать-изменить как только душе угодно, и углы, допустим, 15,28 градуса — да легко! Сколько раз после я ловил себя на мысли, что зря не просился к дядькам на СТО, просто посмотреть и попробовать… Пальцев всех рук и ног не хватит.Да и обслуживание ДВС'ов для меня и Ромы было темным лесом. Нет, конечно же, мы достаточно быстро нашли необходимую теорию и литературу, но тренироваться и смотреть на результаты было решительно не на чем. При этом пугало то, что приобретая базовые знания предметная область по каждому двигателю — это отдельная песня, нарабатываемая годами, а мы себе такого позволить совершенно не могли. Уж слишком горячие головы и молодые сердца, нам нужен был результат, и чем быстрее, тем лучше!Один из первых образцов, который мы желали получитьСамо собой, практически каждый день мы были в фазе активного поиска. Шальные головы рассматривали даже всякую экзотику типа водородных ячеек… И именно в этот момент кто-то из товарищей забросил мне ссылку не evtv.me. Электрический привод произвел эффект разорвавшейся бомбы в наших головах. Даже не перечисляя все его достоинства нас, прежде всего, обрадовал минимум необходимых деталей, минимум обслуживания и возможность Direct Drive'а, т.е. прямого подключения двигателя к заднему мосту без коробки, только через редуктор. И это нас двоих очень впечатлило. Никто не знал, что после этого о ДВС мы и думать перестанем и заразимся электрической болезнью до конца дней своих. Но эта болезнь, на самом деле, весьма приятна.Но проблема цены и добавившаяся к этому проблема с аккумуляторами никуда не ушла и не исчезла. Нам все так же катастрофически не хватало ни денег, ни опыта, и что-то с этим нужно было делать. Найдя в сети несколько калькуляторов для тягового расчета транспорта мы достаточно быстро выяснили, что в зависимости от веса и поперечного сечения транспорта необходимая мощность и момент разнятся достаточно значительно. И каким-то волшебным образом и я, и Рома пришли к выводу, что начинать нужно совершенно не с автомобильной рамы и не с родстера. Для получения элементарнейшего опыта работы с металлом мы решили собрать обратный трайк. Отказались от пространственной рамы, оставив плоскую ферму, первые пробы решили испытать с обычными гелевыми аккумуляторами от упсов, достаточно быстро нашли «подходящий», как нам казалось, двигатель на 1250 ватт мощности с одном из корейских велокомплектов и спроектировали все это в единую конструкцию.На все подготовительные этапы мы потратили, в общей сложности, несколько зимне-весенних месяцев и к Апрелю прошлого года вышли к проекту, готовому примерно на 80% по необходимой для постройки базе. Оставалось дело за малым.Let the show beginМесяц ушел на поиски подходящего гаража. В итоге нашли двухэтажный бокс на два автомобиля, правда, без какого-либо ремонта. Голый песочек на полу, хех. Впрочем, мы не сильно требовательные и нам этого вполне хватало. Приобрели сварочный аппарат и порошковой (флюсованной) проволоки к нему, и еще на месяц или больше я зарылся в мелкое оформление гаража, обустройство, сборку всяких столов-стульев, приобретение необходимого инструмента и расходников. В общем, наш комплект, собранный на текущий момент, не такой уж и большой по объему. Дрель, маленькая болгарка, точило, труборез, сварочный аппарат, китайский «фрезерный» хоббийный станочек и ручной инструмент. В это же время один из знакомых отдал мне свои старые диван с креслом и журнальный столик, так что в гараже появилась даже небольшая мягкая зона отдыха. В этот же месяц я учился сварке. Ютуб — воистину великая вещь для этого, столько образовательных материалов и людей, которые готовы делиться своими практиками на видео, я, наверное, не находил больше нигде. Мне давно говорили, что в основе своей обучение трудовым специальностям и тытруба просто созданы друг для друга, что либо ты смотришь видео, либо долго и нудно ищешь доброжелательного мастера, который будет готов возиться с тобой, пока ты хоть чему-то не научишься, но я отмахивался. И оказался не прав. На личном примере я сам себе подтвердил, что мало-мальски варить по видеоурокам можно.Попутно я и Рома окончили Mit'овский курс 6.002 и стали чуть более подкованы в вопросе электрических цепей и нагрузочному расчету всех электрических внутренностей. Сама по себе электрическая схема оказалась простой — 8 аккумуляторов, соединенных в блок 4s2p, 48V, 18Ah, 18кг вес, все это подается на вход контроллера, на выходе — подключение к двигателю и ручке акселератора. Сам двигатель, контроллер и все, что к нему прилагалось — корейский набор для преобразования велосипеда в электроцикл (http://www.cyclone-tw.com/order-1chain.htm, на тот момент мы брали наиболее мощный из доступных — 1200W / 48V, сейчас появилась версия на 1650W). Для испытаний — самое то. Начиная с конца июня мы погрузились в постройку рамы, заказ точеных деталей ( к слову — безумно дорогая штука по сравнению с ценой железа, то), обучение всем премудростям резки, сварки, обработки стали во всех возможных и невозможных проявлениях, подготовку для себя подручных средств и приспособлений (оба рабочих стола со стальными столешницами в гараже сварены мной). Подходящий металл с доставкой нашелся на одной из металлобаз с доставкой веселым водителем Ашотом на раздолбаной газели.К концу постройки пришли к выводу, что порошковая проволока — полнейшие, дорогущие ласты и уг, лучше ничего ею не варить, либо уж если совсем ничего нет (в поле у березы от генератора). У местных дядек в гараже купил заправленный углекислотный баллон и договорился подвезти его ко мне в гараж. О том, как мы с товарищем затягивали его на второй этаж по лестнице — это отдельная песня, которую пришлось провернуть еще и в этом году. Удовольствие не из лучших. Довольно долго промучался с рулевым управлением — не получалось точно и правильно вырезать, а затем сварить поворотные кулаки и почти месяц ждал консольные втулки на «передний» мост. И после этого долго искал веломагазин, в котором их заспицуют. Но я таки заслужил несколько уважительных взглядов, когда веломастеру в руки попали две идеально выточенные стальные втулки с цельными «звонкими» стальными же осями диаметром 15мм.Попутно приходилось решать мелкие конфликты дома, я успел порядком поднадоесть супруге, поскольку практически все выходные проводил в гараже. Сейчас я ей искренне благодарен, что она до их пор терпит все мои выходки и стойко переносит мое отсутствие дома. Все завертелось достаточно плотно, и я уже не обращал внимания на миллиард мелких проблем. Если раньше мне казалось, что сгонять на рынок в другой конец города и прикупить какую-нибудь нужную мелочь — это подвиг, то сейчас у меня поездкой начиналась практически каждая суббота. Постоянно не хватало креплений, болтов, гаек, мелких листов железа, огрызков, проволоки, дерева, трубок, прутов, переходников, креплений… Этот список можно продолжать бесконечно. Как только начинаешь что-то делать — всегда, всегда какой-то мелочи не хватит и нужно либо с этим мириться, либо заниматься перфекционизмом и растягивать проект «до лучших времен» на годы и годы…Процесс сборки рамы трайка, картинки кликабельныКонструкция рулевого управления у меня тогда вызывала наибольшее смятение. Точно варить я так и на научился, и процесс сборки рулевого больше был похож на адовы муки и уговоры бычка родить котенка, но мы таки справились. С тормозами было решено особо не заморачиваться и на передние колеса поселилась пара Avid Juicy 5, установленные прямо на поворотные кулаки через приваренные к ним пластины, подвеска отсутствовала как класс. Не доствточно продуманная конструкция сборки крепления двигателя вызвала у меня просто монструозную бурю эмоций, после чего любая ошибка в проекте у меня начала стойко ассоциироваться с фразой «Точилка намоделил, #%&#@!». Решение использовать BMX-овое колесо оказалось ошибкой — момента двигателя при передаточном числе зубьев 7/9 не хватало, чтобы динамика движения была хоть сколько нибудь приемлемой и мы не спалили двигатель, поэтому пришлось менять заднюю втулку с BMX-драйвера на обычную обгоную муфту (freewheel) на 24 зуба. Повысив таким образом момент, считай, почти в 3 раза, мы смогли добиться приемлемых результатов. Финальным аккордом была сварка подставки под кресло, монтаж самого кресла и финальная сборка и соединение электрической цепи нашего аппарата.22 сентября, после вечерней попытки прокатиться обнаружили проскакивание звеньев цепи под нагрузкой. На следующий день, с утра, я быстро профрезеровал из кусочка стального уголка крепление под натяжитель цепи, мы его успешно приварили и выехали на тест. И теперь тест таки удался.Пару дней с Ромой мы были просто в эйфории. То, что мы так долго обсуждали, проектировали, переделывали, из-за чего спорили и ссорились — наконец-таки начало жить! Это было просто непередаваемо. Всю следующую неделю я посвятил мелким доводкам и катанию по окрестным дворам. Пугал бабушек и мирно гуляющих мамочек глупыми опросами как проехать на школьный стадион, или где можно развернуться. Но это было очень весело и незабываемо! Даже не знаю, на что же это похоже… Первозданная радость творения, когда начинает работать то, о чем ты так долго думал и что так долго делал, гордость за проделанную работу, пусть и не очень качественную, но крепкую и цельную, удовольствие от простых покатушек, взрывы адреналина на спусках… Уфф, описывать всю гамму эмоций можно бесконечно. Но это нужно пробовать, никакие слова не передадут того, что чувствуешь в этот момент.Финальная поделка. Картинки кликабельны.Brace yourself! Winter is coming!Постепенно мы, все же, вернулись в обычное рабочее русло и, по итогу, нашли очень, очень большое множество проблем, которые практически ставили крест на дальнейшей доводке именно этой рамы. Первое, и самое главное — просто огромный вес. Профильная труба 60х30х3 была не просто тяжелой — она оказалась монструозной и неповоротливой, поднять раму самому было очень тяжело, а когда добавлялись аккумуляторы — пиши пропало. Один я даже за хвост свой трайк подымал с усилием. Отсутствие подвески мы постарались, как можно, скомпенсировать сдвоенным слоем толстого пороллона на сиденье в чехле из кожезаменителя, и это помогло. По крайней мере, пятая точка и спина после покатушек болела не так сильно ^_^ Ну и проблема в силовой установке. Ее явно не хватало под такой вес, двигатель несколько раз перегревался и отключался, откровенно слабый запас хода и свинцовые аккумуляторы — все это было ужасом и не давало текущей раме ни капли надежды на продолжение банкета.Итоговые характеристики, которых мы добились:Пробег: 30-35кмМакс. скорость: 40км/чВеc: > 60кгОбщее описание конструкциималенькая поездочкаИменно с этого момента начинается история байка на КПДВ. В один из вечеров, после очередного перепланирования рамы и тогда, когда мы добавили подвеску и активно искали новый силовой агрегат, мне на глаза попалась ссылка на американские электробайки Stealth. «Рома, черт подери, у меня есть идея! Мы же свободно можем сделать такой же байк буквально за пару месяцев! И мне будет весьма приемистый транспорт кататься на рынок. Это нужно сделать, ей богу!» Конечно Роман, уже тогда достаточно сильно повернутый на трайках и усвоивший прошлые ошибки, воспринял мою идею без воодушевления и в целом был против, но я настоял на своем и мне таки удалось его убедить сделать для меня эскизный проект. И нашей целью, в итоге, стало не просто строительство байка. Мы решили собрать байк достаточно мощный для того, чтобы не чувствовать себя ущербным при въезде на горку (трайк с весом водителя >80кг в горку ехать отказывался, да и меня с моим птичьим весом в 58кг тащил не особо охотно) и вместе с этим подготовленный для поездок на расстояния >50км.К этому моменту я достаточно сильно зарылся в чтение endless-sphere.com и уже прекрасно знал, что именно нам нужно в плане силового агрегата. Не смотря на заоблачную стоимость, мы остановили свой выбор на решении, которое, на текущий момент, является самым мощным из доступных для велосипедов. Строить свой байк мы решили на снове Мотор-колеса Greyborg Cromotor, он же Hubzilla. Версия mk2, которая в тот момент находилась в продаже, была заявлена как двигатель с максимальной постоянной мощностью в 6КW и пиковой — 10KW. В общем — за глаза. Для большего же расстония мы решили попробовать китайские аккумы NCR18650B, благо, я вышел на надежного поставшика.Идею с изготовлением обтекателя для трайка мы отложили до лучших времен. Неотапливаемый гараж совершенно не позволял что-либо делать внутри, просто дичайший холод. Поэтому все зимнее время мы занимались планированием и сборкой средств.Примерно зимой нас с Ромой посетила, как нам казалось, гениальнейшая идея — а что если взять, и блоки для батарей не просто заказать, а распечатать самим? 3d-принтеры уже достаточно стабильная и распространенная вещь, печатаемый ABS-пластик достаточно крепок для наших нарузок. В общем, why not? Конечно же, не ошибается тот, кто ничего не делает, но теперь я точно знаю, что дальше с RepRap'ами свяжусь только потому что изучил их конструкцию руками вдоль и поперек. Но я бы не советовал начинать свое знакомство с принтерами, будучи нацеленным на какой-то конкретный результат. Не получится. Так же, как это не получилось у меня.Приобретя комплект для сборки в Blomker Industries и собрав свой MendelMax достаточно точно практически с первых же дней печати мы столкнулись с проблемами, которые не смогли решить до сих пор. Любая большая заготовка норовила отлипнуть по краям и сгибалась в дугу. Наши заготовки были достаточно длиными — 176мм в длинну, и именно святая вера в «рабочую область» нас очень сильно подвела. Детали портились, даже будучи приклеены цианоакрилом прямо к столу, на котором они печатались. При этом дело не быстрое, потратить впустю несколько часов, чтобы получить брак в итоге — не очень приятно. Я заработал синдром неоконченной печати и начал просыпаться в 3-4 утра, проверять принтер, и ложился спать дальше. Все выходные проходили перед этой дурной железкой в надежде, что очередное изменене настроек чем-то поможет, но все мои надежды и тактики, советуемые на форумах, просто не работали. Принтер как печатал образцы, которые невозможно использовать — так и продолжал печатать, совершенно не обращая внимания на все мои потуги. Попутно я умудрился полностью сточить болт с нарезкой в экструдере, несколько раз перепаивал контакты, истратил почти 2кг ABS-пластика, ловил глюки софта под макось…MendelMax 1.5 во всей красе. Плохо только то, что так и не взлетел как положено.Один из таких глюков положил крест на дальнейших попытках использовать принтер. В одну из ночей, когда я задолбался ждать результата и ушел спать, мой принтер включил столик для нагрева заготовки и… Pronterface выпал в кору. При этом принтер сам по себе остановил печать, но не выключил нагревательные контуры. С утра же я уселся подсчитывать потери. В потерях оказалась в основном электроника — от температуры заклинило один из шаговых двигателей, выгорело 2 контура управления, экструдер превратился в плавленое месиво. Epic Fail стоимостью почти 900$.New FutureОстатки принтера отправились на шкаф, но эта неудача нас не остановила. Начиная с марта месяца мы стали собирать все необходимые компоненты, поскольку часть проектирования и общего расчета была уже, практически, закончена. Мы умудрились приобрести двигатель, закупили все необходимые аккумуляторы двумя партиями по 100 штук с разницей в 2 месяца, дождались приезда контроллера из США и в конце августа наступило, наконец, время сборки всего комплекта, который мы приобрели. В течение этого же месяца мы дождались широкий обод и резину под него из Германии и еще примерно неделю искали мастера, который сможет правильно наспицевать двигатель на колесо. Больше десятка мастеров по разным магазинам просто отказывались, мотивируя это всем чем угодно. Но я таки нашел магазин, в котором мне помогли, пусть это и стоило в 3 раза дороже обычного, но я был готов заплатить и больше, лишь бы мое колесико наспицевали. У этих же мастеров приобрел в последствии все детали для сборки рулевого управления и собрал переднее колесо.Остальные велокомпоненты (вилку, амортизатор, тормоза) удалось приобрести через барахолку x-bikers.ru. Проблем с покупкой и получением не возникло в принципе, но это, скорее, заслуга тех, кто продает.В общем и целом, все было в сборе и я стал больше выходных проводить в гараже. Забрав всю проточку (рулевой стакан и гильзу под подшипники для крепления маятника) разметил и разрезал все отрезки под раму, сварил ее, принялся за маятник… И уже после сварки понял, что двигатель просто не влезает. Мы ошиблись буквально на 5мм, не взяв в учет фланцы под обгонную муфту и дисковый тормоз, и из-за этого пришлось на новый лад «изобретать велосипед». Обсудив проблему с Ромой, я аккуратно подрезал трубы, отогнул каждую на 5 градусов и проварил то, что прорезал, попутно добавив сверху два ребра жесткости, проходящих через шов сварки. Ответное крепление для двигателя решилось путем такого же загибания листа 5мм толщиной. В этот же момент у меня закончился газ, что затормозило сборку еще примерно на неделю и маятник дособирался уже после заправки.Сборка рамы и маятникаОтработав раму и добавив крепления для амортизатора определились, что пружина 350x3.25 оказалась слабой, и нужно что-то больше. Закинул объявление на тот же x-bikers. Очень странная ситуация, но пружин для велосипедных амортизаторов вообще не найти в Украинских веломазагинах. Есть только амортизаторы уже в комплекте с пружинами, что при наличии аморта на руках меня совсем не устраивало. Подходящую пружину пришлось заказывать на чайнике (сленговое название chainreactioncycles.com). Но нужная пружина, спасибо добрым людям с форума, нашлась примерно через месяц после того, как я забросил сообщение в тему продажи и обмена пружин. Ее пока и поставил.По многочисленным советам друзей и знакомых, которые оценивали раму, доварил в сочленениях труб дополнительные косынки для увеличения прочности, запрессовал подшипники в узел крепления маятника и получил от токаря свою ось, которую после пришлось доводить напильником и 1000-ной наждачной бумагой, так как она просто не желала входить в подшипниковый узел, как я планировал. Настало дело за малым — собрать и закрепить блоки аккумуляторов. Для этого я подготовил небольшой ручной сварочный аппарат для точечной сварки на переменном токе, успешно его испытал и сварил все аккумуляторы в блоки по 14 штук.Попутно приобрел в одном из хоббийных магазинов подходящий по всем параметрам под мои нужны зарядник — Hyperion 720 Super DUO3, а так же вышел на дочку запорожского завода радиоэлектронных приборов и забрал у них тестовый образец лабораторного БП 30V/40A. Уже после я понял, что такой мощный блок питания нужно было приобретать, но во время приобретения я все-таки сильно сомневался. Как показал первый заряд, суммарный ток заряда в 32 ампера — это не шутки.Отдельной ремарки достойны американские продавцы деталей и компонентов. Настолько подробного описания того, что я получу, со всеми возможными и невозможными схемами и описаниями я не получал нигде до этого. Мало того, когда я заказывал контроллер — продавец перед отправкой снял небольшой ролик с тестированием именно моего контроллера, выложил его на тытрубу и прислал мне, как подтверждение работоспособности. Я был в этот момент, мягко говоря, удивлен такому уровню сервиса. По получению контроллера проверил серийники с видео — все совпало. И, главное — ребята, продающие за бугром, очень отзывчивы и готовы помочь с проблемами, возникающими в процессе настройи и запуска.В процессе сборки меня ждала еще одна неприятная новость. Нет, даже две новости. Первая, не самая печальная, но достаточно неприятная — никелевая лента шириной 5мм оказалась слишком узкой и тонкой, поэтому, как переходное решение, я решил допаять толстого проводника под высокий ток, что породило за собой следующую проблему — аккумуляторы просто не влезли в подготовленные для них формы. Да, сами формы я нарезал в одном из киевских рекламных агентств из прозрачного ABS-пластика, после склеил и получил достаточно крепкую конструкцию. Все блоки должны были быть разделены проставками в 5мм толщиной — их пришлось профрезеровать на 3мм для того, чтобы проводники свободно размещащись и таки дали возможность собрать весь компаунд.Вторую новость мы выяснили уже после того, как собрали всю конструкцию в боевое состояние. Сделаю небольшую ремарку о том, как же мы пришли к аккумуляторам NCR18650B. Для того, чтобы не обделаться и не отмывать сиденье после первых тестов мы с Ромой решили начать использовать двигатель в самом щадящем режиме — 48 вольт. При этом, по паспорту, двигатель потребляет до 40А по ровной поверхности и до 60А на 10% подъем. Т.е, получается, через каждый из 14 блоков должен проходить максимальный ток до 60А, что в переводе на одну ячейку — 4,28А. Максимально допустимый ток потребления для NCR18650B — 2C, т.е. до 7,5 ампер. У нас было меньше, что радовало, так как батарейки не будут подвергаться значительной деградации при эксплуатации. Но главная засада состояла в том, что на каждой из ячеек стоял свой контур защиты, ограничивающий ток через элемент на 1,5А. После первых испытаний я и мой друг Дима, с которым мы часто зависали в гараже и который мне помогал возиться со всеми увлечениями, почувствовали явный запах горелой электроники, после чего все блоки пришлось перебирать и снимать с каждого элемента эту защиту. К слову сказать — на некоторых ячейках выгоревшие схемы просто замкнули цепь, высадив аккумуляор почти в ноль. Пришлось заменять их из «ремкомплекта» на 10 ячеек, дополнительно приобретенных про запас.В этот же момент я таки нашел украинского продавца никелевой ленты, чему был несказанно рад. Буквально на следующий день после заказа мне свалился целый килограмм ленты 175х0.1, чего вполне хватало полностью накрыть весь батарейный блок и оставить язык для подключения к соседним аккумуляторам. В общем и целом так этот компаунд я и собрал, выбросив проставки и просто склеив весь пластиковый бокс цианоакрилом.The Final CutЭтапы финальной сборкиПервые тесты прошли буквально пару дней назад. Как раз во время финальной сборки ко мне в гараж заехали друзья перебрать одному из них RS-овскую вилку, и заодно посмотреть, что же у меня получилось.Версия 0.12 alpha таки поехала, и поехала очень бодро. Примерно так же, как я и ожидал. Не сильно резво, как мотоцикл, но для обучения и первичных тестов — просто идеально. Мы слегка не дотянули до года с момента запуска предыдущего прототипа. В пару месяцев уложиться никак не получилось, но это уже было и не важно. Главное — мы таки добились своего, наш велосипедик поехал своим ходом и после испытаний и обкатки по гаражам все воскресенье я ходил счастливый, как слон после хорошей мойки и полировки.Как резюме — электротранспорт можно и нужно строить, испытывать и смотреть в будущее.Примерные ТТХ, которые мы имеем сейчас на руках:Вес: около 50кг (вес двигателя — 14кг, вес аккумуляторов — 12кг)Запас хода: 80-100км (примерно 45Ah c рекуперацией)Макс. скорость: до 50км/ч по ровной поверхностиХод подвески — 160мм сзади, 120мм спередиФинансовые затраты:Аккумуляторы: 200 штук NCR18650B, около 1700$ двумя поставками из КитаяДвигатель: Greyborg Cromotor Mk2, 565$Контроллер: LYEN 18Fet, вместе с ним покупался шлейф для программатора и акселерометр — 265$Вилка: RockShox Argyle 302 2009 года, новая, 280$Амортизатор: Fox Van R, б/у 130$Тормоза: Avid Elixir 5R, комплект перед+зад с роторами, 180$Заднее колесо: заказ на custom-cycles.de, вместо со спицами 200$Переднее колесо: 80$Оснастка рулевого управления: 60$«Исходники» рамы: 50$Токарные детали: 120$Cycle Analyst: 170$Зарядное устройство: 375$БП для зарядного устройства: 300$Вроде ничего не забыл.Итоговая себестоимость вышла, мягко говоря, заоблачная. Супруге заметку лучше не показывать ^_^. И все это благодаря тому, что мы пытались брать самое лучшее из доступного и не останавливались на полумерах. Есть много путей сделать байк дешевле и практичнее, но для этого прийдется корректировать ТТХ — уменьшать дальность, регулировать мощность. В общем, отходить от изначальной идеи «сверхдальнего байка». И это, так или иначе, придется делать, так как с такой себестоимостью о каких-то далеко идущих планах даже заикаться не приходится.PlansПытливый читатель уже успел заглянуть в теги поста и увидеть там Open Source.И не зря. Долго обдумывая с Ромой наши планы на будущее мы пришли к выводу, что все-таки стоит брать курс на открытость и свободное распространение.Поэтому, после того, как финальный, т.н. «предсерийный» образец покинет наши пенаты — мы опубликуем все чертежи, расчеты, схемы сборки, планы наших сварочных стапелей и всю карту техпроцессов на github под MIT-лицензией. Все это будет обильно сдобрено нашими советами и ремарками, так что, я думаю, собрать в гараже на коленке реплику такого байка не составит проблемы.На текущий момент наш маленький коллектив занимается испытанием того, что получилось. Мне нужно выбраться на ровную поверхность и проверить данные по дальности, настроить Cycle Analyst, выклеить из стекловолокна обтекатель и защитить байк от дождя. В планах чуть дальше — сборка новой рамы, перенос аккумуляторов ниже, обучение аргонной сварке, замена аккумуляторов, повышение напряжения и смена основных компонентов. Как минимум хочу поставить модную двухкоронную вилочку. Без нее совсем не хорошо.И таки да, я не могу сейчас объективно оценить, чего же мы добились. Пока что мы получили очень, очень дорогую игрушку, которой нужна доводка, как воздух. Но нам есть от чего отталкиваться, и это меня очень радует.Если вы дочитали до этих строк — спасибо. Простыня получилась впечатляющая, да. Но мне очень хотелось поделиться своей радостью с гиками, которых я с удовольствием читаю каждый день. Еще раз огромное спасибо моему партнеру Ромке, ты хоть и дурной, но очень клевый, и моей супруге Леночке за титаническое терпение.Stay tuned!"
    },
    "doc_63": {
        "url": "https://habr.com/ru/post/59142/",
        "title": "ВНИМАНИЕ! QIP.RU ВЗЛОМАН!",
        "text": "UPD2: Товарищи, зачем вы какаете в карму… Что в этот раз вам не понравилось?? капец…UPD: Выложенные пароли от админки уже заменены, чтобы не превращать главную в чат:)НЕ КАЧАЙТЕ ОТТУДА НИЧЕГО ДО ОФИЦИАЛЬНОГО СООБЩЕНИЯ АДМИНОВ!Пруф-линк — qip.ruСкрины 'as is':"
    },
    "doc_64": {
        "url": "https://habr.com/ru/post/543052/",
        "title": "Как не спалить закладку полиции?",
        "text": "В 2014 году мексиканские военные провели ряд операций, в ходе которых  была обнаружена скрытая сотовая сеть, охватывающая своим покрытием все  31 штатов и даже северную часть Гватемалы. Масштабы сети поражают –  только в ходе одной операции были обнаружены 167 передающих антенн, 155  ретрансляторов (с башнями высотой до 90 м), 71 компьютер, 166 солнечных  панелей, аккумуляторов и электростанций, питающих оборудование в дикой  местности, 3000 портативных радиостанций.  Мексиканские военные демонстрируют трофеиФрагменты демонтированной вышки связи Она была огромна… Это была одна из самых сложных радио-сетей, с которой мы когда-либо сталкивались. Данная сеть принадлежала и управлялась силами одного из самых могущественных и влиятельных наркокартелей того времени – Los Zetas. Los Zetas действует и сегодня, и вполне вероятно, что с тех пор они не только восстановили свою сеть, но и расширили её. Строительство сети началось ещё в 2006 году, когда Los Zetas были ещё частью La Compañía– боевым крылом другого наркокартеля, первоначально в штатах, непосредственно примыкающих к Мексиканскому заливу. Целью было построение инфраструктуры коммуникаций в реальном времени для сбора разведданных и координации действий боевых подразделений. Работы велись под руководством радио-специалиста Хосе-Луиса Дель Торо Эстрада (так же известного под позывным El Técnico  — техник). Эстрада, агент La Compañía, был скромным владельцем магазина  радиодеталей в МакАллене, штат Техас, а по совместительству — де-факто  технический директор всего телекоммуникационного проекта Los Zetas. Его  команда включала экспертов по установке радиовышек и антенн, а также  имела своё собственное научно-исследовательское подразделение.  Магазинчик Хосе Луиса Эстрады в Техасе Эстрада и члены его команды были арестованы в 2008, однако,  строительство сети продолжилось, заставив картель сменить тактику. К  этому моменту функционировала уже сеть ретрансляторов по всему  северо-востоку Мексики, которые работали под управлением  специализированной компьютерной системы и софта собственной разработки. За период с 2008 по 2012 годы Los Zetas было похищено как минимум 36 инженеров  в области радиокоммуникаций. Ни за одного из них не был назначен  выкуп, они просто исчезли. Среди похищенных был как минимум 1 сотрудник  IBM, а также несколько инженеров в области коммуникаций из фирмы,  принадлежащей крупнейшей мексиканской строительной компании. Ни один из  похищенных специалистов так и не был найден. Судя по ежегодным затратам, Los Zetas возлагали на сеть большие надежды. По оценкам мексиканского министерства юстиции, ежегодно её содержание  обходилось картелю в сумму в десятки миллионов долларов.Из документов по делу Эстрады можно примерно предположить, как  принимались решения в процессе строительства сети. Из его показаний  следует, что он или его помощники излагали руководству картеля  технические требования по обустройству сети в том или ином районе,  руководство отсылало приказы местным боссам (plaza bosses), оставляя на их усмотрение то, каким именно способом будет добыто необходимое  оборудование и проведены соответствующие работы, скорее всего, под  некоторым присмотром со стороны людей Эстрады. Боссы на местах,  ответственные за определённые коридоры наркотраффика, не только отвечали  за приобретение всего, от радиомачт до переносных радиостанций, но и за  замену и ремонт того оборудования, которое выходило из строя или  уничтожалось правоохранителями.  В силу этих обстоятельств для устройства сегментов сети в разных местах  использовались весьма разношёрстные технологии. Особенно разнились  подходы в городской и сельской местности. В условиях городской застройки  Эстрада и его люди занимались поиском неиспользуемых радиочастот. После этого необходимое оборудование устанавливалось на крышах зданий.  Зачастую, уже имеющееся на месте коммуникационное оборудование (особенно  вышки с ретрансляторами компаний вроде Nextel) незаконно «угонялось», и  перенастраивалось на работу с новыми частотами. В изолированных районах сеть проектировалась на передачу радиосигналов  на дальние расстояния. Агенты Los Zetas возводили собственные вышки,  подстраиваясь под местный ландшафт, на возвышенностях, чтобы обеспечить  надёжную передачу сигнала в гористой и лесистой местности. Один раз они  даже установили вышку на вершине вулкана. Вышки так же маскировали,  чтобы сделать их менее заметными. Энергией в труднодоступных местах  оборудование снабжалось при помощи солнечных панелей и аккумуляторов. Набор конфискованных солнечных панелейВ городе Веракруз, линия из полутора десятков радиовышек имела  радиус покрытия порядка 200 км, позволяя Los Zetas контролировать всё,  что движется в этом районе.По мере роста сети и  усложнения её топологии картель также обустроил несколько центров  управления, оснащённых мощными компьютерными системами. Стоимость  оборудования только в одном из таких центров в городе Торреон  оценивалась в 350 тыс. долларов США. Его задачи не ограничивались лишь  управлением местным сегментом сети, это был ещё и центр сбора  развединформации, который осуществлялся в основном посредством  прослушивания радиочастот, используемых военными и полицией.По  состоянию на 2011 год, компьютерные системы, контролирующие сеть, уже  позволяли направлять определённые сообщения по разным маршрутам,  специально выбирая одни ретрансляторы и игнорируя другие.Одна из коммуникационных вышек Los Zetas высотой 90мО мощности и пропускной способности сети можно судить по  свидетельству женщины из г. Тамаулипас, имевшую связь с одним из  нерядовых членов Los Zetas. По её словам, города вроде Нуэво Ларедо были поделены на секторы, каждый из которых покрывал всего несколько улиц.  На каждом из таких секторов постоянно работало порядка 20 halcones (соколы).  Ими могли быть водители такси, рабочие, подростки, проститутки, даже  коррумпированные сотрудники полиции. Каждый из них получал «зарплату» порядка 10 тыс. песо (750 долларов США), и у каждого из них имелась  портативная радиостанция, посредством которой он сообщал различную  информацию о перемещении полиции, военных, конкурирующих наркодельцов и  пр. разведданные. Сообщение принимала местная антенна, и далее  информация могла передаваться через ретрансляционную сеть в любую точку страны в считанные секунды.В масштабах даже одного города речь идёт уже о сотнях бдительных  осведомителей, которые видят и слышат всё, что происходит у них на  территории. «Вы видите их иногда на каждом углу, даже на окраинах на  выездах из города». Даже в этом масштабе речь идёт о сотнях и тысячах текстовых сообщений,  сотовых звонков и радиосообщений каждый день. Неужели одной преступной  организации достаточно ресурсов для обработки такого массива данных?  Если верить специалистам, расследующим дело Эстрады, ответ на этот  вопрос «да». В Нуэво Ларедо (родном городе Los Zetas), они настолько  глубоко интегрировались с местной полицией, что использовали местные  полицейские колл-центры С4 (мексиканский аналог нашего 112) под свои  нужды.  Закат?В марте 2015 года был арестован последний неоспоримый лидер Los Zetas  Алехандро «Омар» Тревиньо Моралес (так же известный как Z-42), вслед за  чем деятельность и влияние Los Zetas значительно снизились, однако,  сеть, которую построил тихий техасский владелец радиомагазина, возможно,  по-прежнему функционирует и развивается.Современные наркокартели уже давно не похожи на карикатурных banditos из фильмов. Это мощные полувоенные организации, обладающие огромными  ресурсами и связями, больше напоминающие отдельные государства. О могуществе тех же  Los Zetas говорит хотя бы эпизод их ответа на угрозы  хакерской группы Anonymous. После того, как пресс-служба Los Zetas в  свойственной ей манере пообещала вычислить местонахождение каждого  хакера, кто осмелился шантажировать Los Zetas, и \"разобраться с ними\"  (то есть подвергнуть мучительной и унизительной смерти), в социальных  сетях появилось несколько виртуальных групп с призывом оставить  наркокартель в покое, а самые известные \"революционеры\" движения  Anonymous поспешили заявить, что не имеют никаких претензий к преступной  организации (http://navoine.info/los-zetas.html).Список используемых материалов:https://henley-putnam.national.edu/wp-content/uploads/2016/12/Los-Zetas.pdfhttps://www.ulyces.co/longs-formats/radio-cartel-mexique-los-zetas-tech/https://www.popsci.com/article/technology/radio-tecnico-how-zetas-cartel-took-over-mexico-walkie-talkies/https://www.smh.com.au/technology/mexican-cartels-build-radio-network-for-military-precision-20111228-1pbyx.htmlhttps://www.smh.com.au/technology/mexican-cartels-build-radio-network-for-military-precision-20111228-1pbyx.html https://www.theverge.com/2014/3/28/5558656/how-a-radio-expert-helped-the-zetas-become-the-most-dangerous-drughttps://www.popsci.com/article/technology/radio-tecnico-how-zetas-cartel-took-over-mexico-walkie-talkies/http://wirelessestimator.com/articles/2020/tower-techs-put-their-life-in-danger-if-they-accidentally-disable-a-cartels-parasite-antenna-in-mexico/https://ru.scribd.com/document/19076232/Jose-Luis-Del-Toro-Estrada-Plea-Agreementhttps://www.nytimes.com/2012/06/17/magazine/how-a-mexican-drug-cartel-makes-its-billions.htmlhttps://www.vice.com/en/article/ex57qn/the-los-zetas-drug-cartel-have-their-own-radio-networkhttps://smallwarsjournal.com/blog/mexican-cartel-operational-note-no-1"
    },
    "doc_65": {
        "url": "https://habr.com/ru/post/134373/",
        "title": "Полупроводниковая электроника",
        "text": "Полупроводниковая электроника существенно изменила мир. Многие вещи, которые долгое время не сходили со страниц произведений фантастов стали возможны. Чтобы знать, как работают и чем уникальны полупроводниковые приборы, необходимо понимание различных физических процессов, протекающих внутри.В статье разобраны принципы работы основных полупроводниковых устройств. Описание функционирования изложено с позиции физики. Статья содержит вводное описание терминов, необходимых для понимания материала широкому кругу читателей.Иллюстраций: 34, символов: 51 609.На Хабре в последнее время появилось большое количество тематических статей по различным полупроводниковым устройствам и их параметрам. Не удивительно, что данный материал особенно интересен новичкам в области электроники, поскольку современное изобилие различных устройств обязано именно полупроводниковой электронике. Данный материал следует расценивать как некоторое дополнение к прекрасным статьям AveNat, Dooez и IIIa66uMEM6eP, опубликованным в этом блоге. Описание, приведённое в статье, изложено с целью рассказать больше о физической стороне вопроса, хотя некоторые технические особенности также указаны. Помимо всего прочего материал частично перекликается с уже опубликованными статьями, что также является плюсом для изучающих материал, поскольку информация об одном и том же из разных уст продвигает ближе к истине. Традиционно материал рассчитан на широкий круг читателей, поэтому изложение достаточно подробное. Быстро можно ознакомиться с содержанием по резюмирующим абзацам, которые находятся в конце каждого раздела. В конце статьи для интересующихся размещён список дополнительных источников знаний.Современные электрические приборы являются очень сложными устройствами. Физические детали их функционирования не всегда легко поддаются пониманию. Для того, чтобы ясно представлять принцип работы того или иного устройства, необходимо знать базовые физические явления, лежащие в их основе. Поэтому, для того чтобы далее вести разговор на одном языке, ниже представлено краткое описание таких понятий как электрическое поле, электрический ток и диффузия.Шаг 1. Электрическое полеС позиции физики электрическое поле — это некоторая материя, которая существует «рядом» с заряженными телами. Следует отметить, что такие термины как материя, тело и заряд обсуждаться здесь не будут, т.к. это темы дискуссий на грани физики и философии. Следует лишь уяснить, что это всё связано с явлением электричества и соответственно под зарядом понимается электрический заряд. Для большей наглядности можно взглянуть на рисунок ниже.На картинке размещено два объекта — шарики. Каждый шарик обладает особой характеристикой — зарядом. Данный заряд может быть либо положительным, либо отрицательным. Эти два шарика взаимодействуют друг с другом через электрическое поле, которое находится «вокруг» них. В этом и проявляется сущность электрического поля: оно обусловлено существованием определённых электрических сил между заряженными телами. Данные силы таковы, что если у шариков заряды одинакового знака, то они друг от друга будут отдаляться, если разного, то наоборот — приближаться. Более подробно вопрос можно изучить в физических учебниках по тематике закона Кулона и электростатического поля. Для удобства, электрическое поле характеризуют специальной величиной — напряжённостью. Она нужна для того, чтобы сравнивать какое поле «сильнее», а какое «слабее». То, по каким формулами рассчитывается и в каких единицах измеряется в данном случае не важно. Главное то, что чем больше напряжённость электрического поля, тем «сильнее» оно действует на заряженное тело. Также данная характеристика поля имеет направление. В этом случае говорят, что напряжённость — векторная величина, поскольку вектор обычно имеет какое-то направление. Направление необходимо знать, чтобы определить в какую сторону будет поле «толкать» заряженное тело. Прояснить ситуацию можно с помощью рисунка и одной формулы.На картинке один шарик, помещённый в электрическое поле. В данном случае не важно какими заряженными телами поле было образовано. Поле характеризуется напряжённостью, которая имеет определённое направление. Шарик имеет определённый заряд какого-то знака. Формула, приведённая на рисунке, говорит о том, что если заряд шарика положителен, то поле его «толкает» вперёд (говорят по полю), если отрицателен, то против поля.Простейшим примером реальных заряженных тел является электрон. Который, являясь чисто квантовым объектом и «живя» по «волшебным» законам, в некотором приближении можно считать шариком, для которого справедливы все рассуждения выше. Заряд у электрона отрицательный, поэтому он «летит» против поля.Помимо всего прочего, кроме напряжённости, которая описывает силовые характеристики электрического поля, вводят ещё одну характеристику — потенциал. Потенциал является энергетической характеристикой. Энергия в физике вообще штука интересная и её понимание тоже относится к разряду философско-физических дискуссий. Из-за своих свойств она очень удобна для математических расчётов. Останавливаться на этом вопросе здесь не будем.Потенциал описывает энергетические свойства каждой точки, где есть поле и в общем случае для каждой точки он разный. Особый интерес представляет разность потенциалов. Между разностью потенциалов и напряжённостью поля есть связь. Суть данного понятия можно уяснить из рисунка ниже. Разность потенциалов обычно именуют напряжением (не путать с напряжённостью). Это не совсем то напряжение, которое меряют в электрических цепях с помощью вольтметра, хотя некоторая связь есть. Опять-таки все тонкости можно извлечь из учебников по физике.В физике любое движение заряженных тел, имеющее чёткое направление, называют током. В данном случае — электрическим током. Очень важно, что движение заряженных тел может происходить не только из-за действия поля на них. По причине того, что существует выделенное направление, ток также имеет какое-то направление. Исторически сложилось, что для движения заряженных отрицательно частиц ток считают направленным в обратную сторону. Подробнее об этом на рисунке. На практике, обычно используют величину — сила тока, которую просто называют ток, и которая измеряется в Амперах. Эта величина описывает то, как много заряженных тел «пролетает» в единицу времени через определённую область (сечение материала). Связь между током (силой тока) и напряжением определяется законом Ома (формула на картинке). Эти две величины связывает коэффициент, который называют сопротивлением. Данный коэффициент характеризует материал и различные физические явления, которые сопровождают течение тока в этом материале. Обычно сопротивление это просто какое-то число, хотя бывают и более сложные случаи. Об этом можно почитать в учебниках. Иногда для удобства используют вместо сопротивления другую величину — проводимость. Разница между ними ясна из названия: чем больше сопротивление у материала, тем у него хуже (меньше) проводимость.Среди электрических явлений ещё одной очень интересной особенностью является то, что если имеются какие-либо скопления разноимённых зарядов, то между ними возникает электрическое поле (напряжение), это указывает на то, что такая система хранит энергию электрического поля. Данные системы численно характеризуются параметром — электрическая ёмкость. На данном принципе работают популярные электрические устройства — конденсаторы. Не будем вдаваться в нюансы.Также нужно понимать, что электрические явления есть частный случай проявление электромагнетизма, о котором можно подробнее почитать в литературе, которая приведена в конце статьи. Резюме В основе электроники лежат различные физические явления электрической природы. Наиболее важными понятиями являются электрическое поле заряженных частиц и их электрический ток. Электрическое поле характеризуется напряжённостью и распределением потенциала. Наличие разности потенциалов говорит о наличии электрического поля и наоборот. Под действием каких-либо сил, в том числе и со стороны электрического поля, возникает электрический ток (упорядоченное движение зарядов). Скопления разноимённых зарядов хранят энергию электрического поля и характеризуются электрической ёмкостью (конденсаторы).Шаг 2. ДиффузияУ энергии, существует одна особенность, она всегда стремится быть минимально возможной в любой ситуации. Это закон природы. В некотором роде вообще всё, что происходит вокруг нас можно объяснить именно этим законом. Его иногда называют принципом наименьшей энергии. Собственно поэтому после прыжка мы всегда падаем вниз, кофе всегда остывает, дует куда-нибудь ветер и т.д. Этим же принципом объясняется явление диффузии. Для наглядного представления можно посмотреть, что будет, если кусочек сахара поместить в стакан с водой и не размешивать.Растворившись, частички сахара будут находиться в одном месте, допустим на дне стакана. Через некоторое время можно будет заметить, что вся вода в стакане стала сладкая, т.е. частички сахара разместились полностью по всему объёму стакана. Это показано схематично на рисунке ниже.Вот такое поведение частичек какого-нибудь вещества называют диффузией. Поэтому можно сказать, что раз все объекты состоят из молекул и атомов, то при наличии области, где частиц (молекул или атомов) больше, чем в других областях, то возникает перенос из области большей концентрации в меньшую. Другими словами природа стремится всё уровнять, чтобы минимизировать энергию, привести к состоянию равновесия (иногда говорят в равновесное состояние).РезюмеБлагодаря законам природы частички вещества, если их где-то много, всегда будут стремиться туда, где их мало. Это явление называется диффузией.Шаг 3. Твёрдые телаПредставление о том, как устроены различные материалы очень и очень сложно. Существуют различные направления в физике, которые изучают те или иные вопросы, касающиеся веществ. Для понимания полупроводниковой электроники основной интерес представляют твёрдые тела. Различные тонкости этого вопроса можно изучить в учебниках по физике твёрдого тела или материаловедению. Основная (поверхностная) идея же заключается в том, что все твёрдые тела можно представить в виде решёток. Это определённые структуры, которые состоят из атомов. На картинке ниже представлены некоторые типы моделей решёток. Чёрные точки на рисунке — это атомы. Свойства различных материалов определяются типами их решёток, видами атомов, а также рядом других факторов. Любое рассуждение о структуре вещества, в конечном счёте, приведёт к вопросам квантовой физики с её «волшебными» явлениями.Для описания «внутренностей» материалов хорошо подходит зонная теория твёрдого тела. Данная теория неразрывно связана с понятием энергии. Выше уже говорилось о специфичности термина «энергия». Здесь и в дальнейшем не будем углублять данное понятие. Узнать о том, какую роль играет энергия, можно из обыкновенной модели атома, взглянув на рисунок ниже.На картинке представлена грубая модель атома в виде слоёной структуры. В центре размещено ядро атома, которое окружено электронными облаками. Электронные облака — это и есть собственно электроны. Такое представление электрона больше похоже на правду, нежели представление в виде шариков с точки зрения квантовой физики. Электронный слой ещё именуют электронным уровнем. Дело в том, что на каждом уровне электроны обладают какой-то энергией. Чем «дальше» от ядра — тем больше энергия. Также такую структуру удобно изображать в виде энергетической диаграммы, которая также приведена на рисунке выше. Такую диаграмму часто можно встретить в учебниках по физике. Энергия обозначается буквой Е. Самый верхний энергетический уровень называют валентным.Когда атомы «соединяются» друг с другом, образуя решётку, т.е. формируют некоторое тело (материал) энергетические уровни у них меняются из-за того, что атомы действуют друг на друга. И среди энергетических уровней наблюдается определённый порядок: энергетические уровни делятся на так называемые зоны. Отсюда и название — зонная теория. На рисунке ниже представлены возможные случаи распределения зон. Следует отметить, что это характеристики всего материала.Нижняя зона называется валентной зоной. Электроны, которые находятся там, относятся к атомам. Электроны, которые находятся в верхней зоне, являются «общими». Эти электроны очень хорошо реагируют на электрическое поле и непосредственно отвечают за формирование электрического тока в веществе, т.е. за его электрические свойства. Такая зона называется зоной проводимости. Между ними находится запрещённая зона. На картинке также видно, как зависят от ширины запрещённой зоны свойства материалов и принадлежность к тому или иному классу веществ. Видно, что у металлов зоны перекрываются, поэтому у них электроны легко становятся «общими» и соответственно их в зоне проводимости много и течёт хороший заметный ток. У полупроводников зоны находятся на некотором расстояние, но не значительном. Это значит, что электрон может «перепрыгнуть» через эту зону, если получит извне достаточно энергии. У диэлектриков зона шире, поэтому «перекинуть» электроны в зону проводимости трудно, в результате чего токи там текут очень маленькие. И вообще говорят, что диэлектрики токи не проводят.Есть ещё ряд не менее важных моментов, но здесь рассмотрение их будет опущено и для начального понимания сути физической природы, достаточно будет и этих данных.РезюмеДля описания свойств твёрдых тел используется зонная теория. Суть теории заключается в том, что внутри материала существуют электроны, которые могут учувствовать в образование электрического тока, остальные же принадлежат атомам. Если подавать на материал энергию (свет, тепло, электрическое поле), то можно «отрывать» электроны от атома для того, чтобы они проводили ток. Есть материалы, где это легко сделать, а есть где сложно. «Золотую середину» занимает класс материалов — полупроводники. В действительности все свойства веществ описываются квантовой физикой. Шаг 4. ПолупроводникиЧем же так особенны полупроводниковые материалы, что они совершили революционный переворот в технике? Весь секрет кроется именно в достаточно узкой запрещённой зоне. Давая электронам какую-нибудь энергию, можно регулировать проводимость материала. Это может быть электрическое поле, свет (электромагнитные волны), температура и т.д. Это и объясняет колоссально широкое применение полупроводниковых приборов.Для более детального рассмотрения следует ввести некоторые термины, используемые в теории. В первую очередь «дырки». Дело вот в чём. Если из валентной зоны «улетит» электрон, то там останется свободное место. На это место может «прилететь» другой электрон. Т.к. электрон имеет отрицательный электрический заряд, то «улетая» от атома, он уносит собой этот кусочек общего заряда атома и атом становится чуть-чуть положительней. Конечно рассуждения грубы, но это наводит на мысль о том, что можно представить, что на месте электрона образовалась дырка, которая «несёт» положительный заряд. Это настолько удачная мысль, что в теории полупроводников эти «дырки» называют даже частицами. Хотя на самом деле это никакая не частица, а просто вот такой трюк. Этот трюк удобен для теории, поэтому останавливаться подробно не будем на этом, но терминологию такую использовать будем. Также «дырки» и электроны в теории полупроводников называют p и n частицами от positive и negativе соответственно. Теперь уже с новой терминологией можно говорить, что когда подаётся на полупроводник энергия, которой хватает для «перескока» электрона, то образуется пара p и n. При температуре больше 0 Кельвина (это в человеческих единицах -273 по Цельсию) всегда есть какое-то количество энергии, которое подаётся на полупроводник из-за температуры. Поэтому если взять какой-нибудь кусок полупроводника, то можно с полной уверенностью говорить, что в нём постоянно генерируются и исчезают (рекомбинируют) пары p и n частиц. Этот процесс идёт постоянно и в таком материале есть всегда какое-то количество электронов и дырок, которые уже создались, но не успели ещё рекомбинировать. Их количество одинаковое, раз они образуются парами. Но этого мало. Для того, чтобы полупроводники применять в практических целях, создают специальные материалы с заведомо установленными параметрами. В данном случае вносят в чистый полупроводник какое-нибудь дополнительное вещество, которое увеличивает или количество электронов или «дырок». Такие полупроводники называют примесными (потому что в них примешали что-то). Одни называют полупроводниками n-типа, другие p-типа. Физические тонкости трогать не будем, об этом можно почитать в дополнительной литературе.Раз в полупроводниках существует два типа частиц с зарядом, способных упорядоченно двигаться, то существует в полупроводниках два типа тока: электронный и дырочный. Кроме того, двигаться частицы эти могут либо из-за электрического поля, либо из-за диффузии. Соответственно токи ещё могут быть или диффузионными или дрейфовыми.Наиболее популярными полупроводниковыми материалами на данный момент являются кремний, германий и соединение арсенид галлия.Сложной и самой важной конструкцией в полупроводниковых приложениях является контакт полупроводников p-типа и n-типа, так называемый pn-переход.РезюмеПолупроводниковые материалы обладают относительно узкой запрещённой зоной, что делает их гибкими в электрических применениях. В терминологии теории применяется понятие «дырка», которая интерпретируется как частица и может создавать электрической ток. «Дырка» является свободным местом под электрон и «имеет» положительный заряд. В чистом полупроводнике равное количество электронов и «дырок». Для технических применений создают специальные материалы с большим количеством или «дырок» (p-тип) или электронов (n-тип).Шаг 5. PN-переходЕсли взять два полупроводниковых материала и соединить их так, как показано на рисунке ниже, то можно получить pn-переход. На самом деле так не делают, потому что невозможно получить общую кристаллическую решётку просто приложив два материала, но для общих представлений достаточно и такой модели.Напомню, что в чистый полупроводник добавили примесь, благодаря которой, материал стал обладать повышенной концентрацией зарядов, в одном случае «дырок», в другом — электронов.Как только два материала «соединили», образовав единый кусок вещества, возникает явление диффузии, которое стремится уровнять концентрации частиц по всему объёму. Самое интересное здесь будет происходить на границе, где рекомбинируют (уничтожаются) электроны и «дырки». В конечном счёте около границы двух материалов возникнет тонкий слой без «дырок» и электронов, т.е. весь заряд скомпенсировался. Однако, примеси, которые были добавлены в материалы, здесь вносят свой вклад. Эти примеси представляют собой ионы (атомы), которые имеют также какой-то заряд. Этот слой показан на рисунке.Тот факт, что имеются заряженные ионы, и предотвращает дальнейший рост слоя рекомбинированных пар электронов и «дырок». Дело в том, что между двумя противоположно заряженными областями образуется электрическое поле, напряжённость которого направлена от положительной области к отрицательной. В итоге возникает равновесие в материале: при определённой толщине слоя, поле будет на столько сильным, чтобы отправлять обратно заряженные частицы (p и n), которые будут стремиться перетекать под действие диффузии в другую область. Противоборство электрического поля и диффузии и образуют pn-переход. На рисунке ниже это представлено более наглядно.На рисунке квадратиками обозначены ионы, а кружочками частицы (p и n). Следует отметить, что если проводник n-типа — это ещё не значит что там только электроны, там также есть и дырки, но их очень мало. Это видно по диаграмме, которая нарисована на листочке. Можно догадаться, что для тех частиц, которых мало в той или иной области поле будет их ускорять, т.е. пропускать. Это так называемый ток неосновных носителей заряда. Если pn-переход никак не трогать, то данные токи равны и соответственно общий ток равен нулю.Самые интересные свойства pn-перехода проявляются если на него воздействовать какой-нибудь энергией, например, электрической.Ситуация №1. На концы куска материала, где присутствует pn-переход, подключены провода, которые создают разность потенциалов, в результате чего можно говорить о том, что внешним источником энергии создаётся некоторое поле с напряжённостью E. Его обычно так и называют — внешним полем. Конструкция показана на рисунке ниже.В области контакта отсутствуют основные носители заряда, т.к. они все рекомбинировали. Соответственно это можно интерпретировать, как участок с большим сопротивлением. По крайней мере большим, чем остальной объём полупроводника. Также в виду того, что там присутствует поле, можно говорить, что имеется некоторая разность потенциалов, которую обычно называют контактной. Также говорят, что эта разность потенциалов формирует потенциальный барьер. Углубляться в этот вопрос не будем. Однако с этим связаны не менее интересные вещи, к примеру, именно этот потенциальный барьер определяет то, какое напряжение будет на переходе, если рассматривать pn-переход включённым в некоторую электрическую цепь. Вообще величина данного барьера зависит от типа материала. Поэтому различные полупроводниковые приборы, сделанные из разных материалов, отличаются рядом параметров, в том числе и падающим напряжением на переходе. Можно заметить, что внешнее поле и то, что имеется внутри соединения, имеют разные направления. В связи с этим, внешнее поле перекроет внутреннее и оно не будет оказывать влияния на материал. Это приведёт к тому, что переход выйдет из равновесия. Соответственно диффузионный ток уже сдерживаться не будет, а дрейфовый (неосновных носителей заряда) наоборот — будет подавляться. Таким образом, видно, что подключение вот по такой схеме, как на рисунке, приводит к появлению тока внутри полупроводника, причём ток направлен от p области к n области. Данную ситуацию называют «прямое смещение» pn-перехода.Ситуация №2. Та же самая конструкция, но потенциалы на концах материала поменялись местами. Такая ситуация тоже интересна. Конструкция показана на рисунке ниже.В этом случае внешнее поле направлено в одну сторону с внутренним, что, конечно же, приводит к повышению дрейфового тока неосновных носителей заряда, т.к. неосновных носителей мало, то величина такого тока мала. Данную ситуацию называют «обратное смещение» pn-перехода.Ситуация №3. Та же самая конструкция, но теперь провода не будут подключены к источнику энергии, они будут просто соединены между собой. Внешним источником энергии будет выступать излучение, например свет. Конструкция показана на рисунке ниже.То как свет действует на материал — это тематика отдельного разговора и понятно рассказать без использования квантовой электродинамики сложно. Поэтому будем просто считать, что в тот момент, когда свет попадает на pn-переход, там образуются пары электрон-«дырка». Т.к. присутствует внутреннее поле, то это поле «выкидывает» частицы подальше друг от друга так, что они не успевают уничтожиться. Если посмотреть на провод, который соединяет p и n части конструкции, то там будет течь некоторый ток. Нужно отметить, что не всякое излучение может создавать такие пары частиц, т.е. нужен «определённый» свет. Эта определённость заключается в длине волны или частоте излучения. Проще говоря, если посветить на один и тот же pn-переход синим фонариком, а затем красным, то не факт, что он будет в том и другом случае создавать ток в проводе. На этом принципе работают солнечные панели. Более эффективно такая система будет работать, если совместить её с обратным включением pn-перехода, тогда можно с помощью света управлять уже значительным током во внешней цепи. Ситуация №4. Конструкция аналогична первой ситуации. Дело в том, что энергия, о которой постоянно идёт речь и которая очень важна для физики, обладает таким свойством, что она ниоткуда не берётся и никуда не уходит, она лишь способна менять свою форму. Когда электрон с дыркой рекомбинируют, а это, если вспомнить про зонную теорию, значит, что электрон встал на своём место в валентной зоне, т.е. уменьшил свою энергию. Данная энергия никуда не исчезает, а лишь трансформируется. Можно сделать такие конструкции, что эта энергия будет излучаться в виде света. Тогда можно использовать pn-переход в качестве излучателя. От типа примеси значительно зависит частота (длина волны) излучения. Другими словами, подмешивая разные примеси в полупроводник, можно управлять цветом его излучения. Существуют также более сложные конструкции с несколькими pn-переходами. Какой из них будет светить — зависит от тока. Так можно делать излучатель на несколько цветов.В инженерной и научной практике обычно, для наглядности отображения свойств каких-нибудь сложных физических структур, используют специальные диаграммы зависимостей различных величин от других. В электротехнике часто это бывают зависимости тока и напряжения друг от друга. Для pn-перехода, где определяющим является ток, протекающий через переход, очень удобны зависимости тока от напряжения. Такая зависимость приведена на рисунке ниже. Её также называют вольт-амперной характеристикой или сокращённо ВАХ.Знание ВАХ позволяет не держать в голове все физические процессы в материале, а опираясь на такие зависимости проектировать устройства. На рисунке эта зависимость нарисована оранжевым фломастером. Можно заметить, что если увеличивать напряжение в обратном смещение, то после некоторого значения резко растёт ток. Физически это своеобразное поведение электронов, похожее на лавину. Говорят, что происходит лавинный пробой. Обычно после такого pn-переход своими свойствами больше не походит на pn-переход. Подробно не будем рассматривать эту тему. Отметим, лишь, что иногда, но в меру лавинный пробой бывает полезным.Ещё одной особенностью pn-перехода является то, что тот обеднённый слой на месте контакта двух проводников, который создаёт внутреннее поле, очень похож на конденсатор. Поэтому говорят, что внутри перехода имеет ёмкость. Её именуют барьерной, чтобы подчеркнуть способ её образования. Также существует ещё одна ёмкость, которая наблюдается при прямом включение перехода и она объясняется динамическими процессами в полупроводниках. Её называют диффузионной. Подробно касаться этого тоже не будем. Ёмкости нужно время для того, чтобы зарядится и разрядится, поэтому если возникает желание быстро менять местами напряжение на концах pn-перехода, то из одного режима в другой переход перейдёт не мгновенно. Для того, чтобы подчеркнуть, что ёмкость очень важна даже рисуют вот такие эквивалентные схемы для pn-перехода.Ёмкость pn-перехода также интересна для использования на практике. Дело в том, что при обратном смещении от напряжения зависит толщина обеднённого слоя, а соответственно и количество заряда, которое находится по обе стороны перехода. В таком случае можно говорить, что напряжение изменяет ёмкость перехода. РезюмеСамой популярной конструкцией в полупроводниковой электронике является pn-переход, который представляет собой соединение двух полупроводников разного типа (p и n). Данный переход обладает уникальными свойствами, что определяет его широкое применение. Основной особенностью данного контакта можно считать пропускание электрического тока только в одну сторону. Кроме того, pn-переход может генерировать свет и реагировать на него.Шаг 6. Переход полупроводник-металлКратко можно упомянуть ещё об одном виде контактных явлений: между металлом и полупроводником. При определённых условиях в таком контакте может появиться также потенциальный барьер. Очень часто можно встретить название — барьер Шоттки. По имени изобретателя. Для наглядности посмотрим как это происходит, если соединить металл с полупроводником n-типа. Рассуждения для полупроводника p-типа похожи.При таком контакте основные носители заряда (электроны) из полупроводника будут перетекать в металл. Что приведёт к схожей ситуации с pn-переходом. Возникнет область с полем, которое будет тормозить дальнейшее увеличение объёма необогащённого слоя. Процессы внутри материала отличаются, конечно, от pn-перехода, но в некоторой степени схожи. ВАХ имеет похожую структуру.Основным отличием от pn-перехода является то, что данный переход является более быстрым в виду того, что за ток отвечают только электроны (подвижность электронов выше, чем у «дырок»). Также ёмкость перехода намного меньше. Также следует отметить, что на переходе падает меньше напряжение, чем при контакте двух полупроводников.РезюмеПомимо pn-перехода существуют другие типы соединений. Интересным с практической точки зрения является контакт металл-полупроводник, который обладает схожими свойствами с pn-переходом.Шаг 7. ДиодПростейшим среди полупроводниковых устройств является диод. Название такое от того, что у него два вывода (вход и выход). В основе всех диодов лежат свойства pn-перехода, обыгрывая какой-нибудь из параметров, получаются разные диоды. Простейший диод, на основе pn-перехода выглядит и обозначается вот так:Ниже приведено краткое описание других типов диодов. Диоды Шоттки основаны на использовании барьера Шоттки; варикапы используют ёмкостные эффекты pn-перехода; стабилитроны используют особенности обратной ветки ВАХ диода (показано на рисунке) для стабилизации напряжения; туннельные диоды используются при проектировании генераторов; фотодиоды и светодиоды применяются для детектирования и излучения света (возможна модификации для излучения когерентного света — лазеры).Также существует класс устройств с тремя выводами, но по функциональности они ближе к диодам. Это так называемые тиристоры. Они часто применяются для электрических приложений с большими мощностями. В каком-то отдалённом смысле принцип работы можно сравнить с ещё одним сложным устройством, но более популярным — транзистором. В тиристорах также один pn-переход управляет другим. Более подробно можно почитать о тиристорах, динисторах и других устройствах из этого класса в дополнительной литературе. Кроме всего прочего, существует большое разнообразие других видов, таких как лавинные фотодиоды (очень чувствительные, используются в экспериментах с квантовыми компьютерами и криптографией), pin-диоды, оптроны, импульсные диоды и т.д.Широкое разнообразие разновидностей диодов говорит об очень больших областях применения. Более популярными (с академической позиции) являются использование диодов для выпрямления сигнала (из переменного в постоянный), для стабилизации напряжения, для подстройки частоты (через изменение ёмкости) колебательного контуры. И многое другое. Необходимо отметить, что полупроводниковая электроника развивается большими темпами и сейчас диод именно как чистый pn-переход внедрён повсеместно. Подробности будут сказаны ниже.РезюмеПолупроводниковый диод является простейшим конечным устройством, использующим pn-переход. Существуют различные модификации диодов, которые используют те или иные параметры pn-перехода. Полупроводниковые диоды очень широко распространены.Шаг 8. ТранзисторНе менее популярными и значимыми устройствами в классе полупроводниковых приборов являются транзисторы. Это устройства обычно с тремя выводами, которые можно разделить на два больших класса: биполярные и полевые. Полевой транзистор представляет собой некоторую полупроводниковую структуру, в которой имеется чётко выраженная область либо p, либо n-типа. Такую область называют каналом. Данный канал имеет какую-то определённую проводимость (сопротивление). Суть работы полевого транзистора состоит в том, что дополнительные полупроводниковые конструкции в виде pn-переходов в нём позволяют управлять проводимостью (сопротивлением) этого канала. Другими словами, полевой транзистор — это переменное сопротивление, которое полезно использовать в различных схемах. Само слово транзистор, в принципе, расшифровывается как переменное сопротивление. На рисунке ниже показана структура типичного полевого транзистора.Как видно канал имеет два вывода, обладающие особой терминологией: исток и сток. Эти выводы подключают к участку цепи, где нужно переменное сопротивление. Третий вывод транзистора являет управляющим. На него подаётся сигнал, который изменяет проводимость (сопротивление) канала. Этот вывод именуют затвором. Существуют различные способы организации данного эффекта управления, по которым полевые транзисторы ещё делятся на несколько подклассов. На рисунке выше изображён полевой транзистор с управляющим pn-переходом. Принцип его работы основан на рассмотренных выше свойствах pn-перехода. В данном случае pn-переход включают в обратном направлении и под действие внешнего электрического поля переход либо увеличивается (в размере) или уменьшается. Таким образом, регулируется площадь канала. Чем меньше площадь (поперечного сечения) материала, по которому течёт ток, тем меньше его сила (при прочих равных условиях). Дальнейшие тонкости рассматривать не будем. Имеет место аналогия с вентилями на трубах, работа которых аналогична. Как уже выше отмечалось, удобно перейти к различным зависимостям, которые будут отражать суть эффекта для технической реализации. На картинке представлены такие зависимости для изображённого транзистора. Это два совмещённых графика: выходная характеристика (правый) и характеристика прямой передачи (левый). Через pn-переход в обратном включении течёт маленький ток, поэтому неудобно говорить об управляющем токе. В основном рассматривают управляющее напряжение, поэтому на характеристике прямой передачи (зависимости выходного тока) рассматривается зависимость от напряжения. Видно, что с увеличением напряжения, уменьшается выходной ток (растёт переход и перекрывается канал). На правом графике приведено несколько зависимостей. Они отличаются друг от друга только входным напряжением. По данному графику тоже хорошо видно, что чем больше сопротивление, тем меньше ток на выходе.На следующем рисунке представлен другой подкласс полевых транзисторов — транзисторы с изолированным затвором. По их структуре их ещё называют МДП (метал-диэлектрик-полупроводник), чтобы подчеркнуть изолированность металлического затвора диэлектриком от полупроводникового канала. Также встречается название МОП (вместо слово диэлектрик подставляют более конкретно — оксид). Изоляция тут нужна для того, чтобы не создавать сложных контактных структур, потому, что нужно только электрическое поле, которое и создаётся затвором (между затвором и другим контактом-подложкой, как в конденсаторе). На рисунке схематично изображена конструкция такого полевого транзистора. Когда на затвор подают потенциал больше, чем на подложке, то напряжённость поля будет направлена в сторону подложки и все те немногочисленные электроны, что есть в p-полупроводнике будут «примагничиваться» к затвору. Через некоторое время образуется тонкий слой электронов, который создаёт «мостик» между стоком и истоком и выступает в качестве канала. Говорят, что канал индуцировался (образовался). Поэтому такие транзисторы называют «с индуцированным каналом». Существует также немного другая модификация, когда принцип тот же самый, но изначально делают очень тонкий канал, для того, чтобы можно было что-нибудь проводить и без подачи потенциала на затвор. Такой полевой транзистор называют со встроенным каналом.Как можно заметить, сила тока варьируется от двух параметров: от площади поперечного сечения проводника и от количества зарядов, «протекающих» через это сечение. Полевые транзисторы для управления током используют оба эти параметра, регулируя в одном случае концентрацию зарядов (изолированный затвор), а в другом случае площадь поперечного сечения (управляющий pn-переход).Другим классом транзисторов, являются биполярные транзисторы, которые в отличии от полевых (поле), состоят из двух pn-переходов и управление током через один переход производится с помощью другого. На рисунке показано обозначение биполярных транзисторов и их принцип работы.Можно выделить основные части биполярного транзистора: база, эмиттер и коллектор. На рисунке они изображены одинакового размера, хотя на самом деле базу стараются сделать уже. Дальше будет понятно почему. Если подключить провода к двум концам такого транзистора (эмиттеру и коллектору) и подать напряжение, то через него не будет течь ток вообще ни в каком направлении. Это объясняется структурой. Можно заметить, что в любом случае какой-нибудь из pn-переходов будет в обратном смещении. Однако, если на базовый контакт подать соответствующее напряжение, то можно заметить увеличение тока. Секрет кроется в том, что при подаче напряжения, например как на рисунке, один переход будет в прямом смещении, в другой в обратном. Прямое смещение первого перехода создаёт хороший поток «дырок» из эмиттера в базу, где они, конечно же, рекомбинируют с огромным количеством электронов. Если величина тока достаточная, то часть «дырок» не будет успевать рекомбинировать и их количество будет накапливаться. По действием диффузии они потекут к коллекторному переходу, а там уже переход в обратном смещении, который для неосновных носителей является ускоряющим, т.е. поле перехода «выкинет» «подлетевшую» к нему «дырку», что и создаёт ток коллектора. Заметим, что «дырок» в этом случае в n-полупроводнике больше, чем обычно, поэтому будет течь существенный ток. такой режим работы биполярного транзистора называют активным (один переход открыт, другой закрыт). Также существуют и другие режимы, в зависимости от направления смещения pn-переходов. Особенности эти трогать не будем, о них можно почитать в дополнительной литературе.Для биполярных транзисторов также используют описание с помощью всевозможных характеристик, обычно это входные (входной ток) и выходные (выходной ток). На рисунке ниже представлены наиболее популярные способы использования биполярных транзисторов и их характеристики.Дело в том, что и полевые и биполярные транзисторы можно подключать к электрической цепи по-разному, основное отличие состоит в том, куда подавать управляющий сигнал (по правде немного по-другому: какой выход будет общим для управляющей цепи и для управляемой). Для полевых транзисторов данное описание было опущено, а вот для биполярных в виду существенной разницы приведено для двух более популярных случаев (бывает ещё с общим коллектором).Для того, чтобы не запутаться где рисовать и какие стрелки на обозначениях транзисторов, запомните, что стрелка как у компаса указывает на N (n-тип полупроводника). Это актуально и для биполярных и для полевых транзисторов (там бывает канал разного типа). У одних она всегда рисуется на эмиттере, у других на затворе.В радиотехнике существует много разных подходов для описания устройств и их параметров. Один из них — это представление устройства в виде чёрного ящика с несколькими выводами. Каждый вывод соответствует физическому выводу устройства. Такой подход позволяет также абстрагироваться от физики и использовать лишь непосредственно свойства устройства. Для транзисторов типична схема включения, когда один из её выводов является общим для управляющей и для управляемой цепи. В итоге получается, что транзистор как бы имеет 4 вывода. В этом случае называют чёрный ящик четырёхполюсником. Между входом и выходом устройства есть очевидно связь и эту связь можно описать разными коэффициентами, которые называют параметрами. Для транзисторов наибольший интерес представляют h-параметры (H-параметры). Значения их приведено на рисунке ниже.Среди них наиболее интересный это h21 параметр, который часто можно встретить в документации на транзисторы, что он значит будет сказано ниже.Вопросы работы с транзисторами достаточно сложны, как и с любыми полупроводниковыми устройствами, поскольку включают в себя также различные зависимости от температуры, от частоты сигнала, различные шумы и т.д. Касаться всего этого не будем, ниже лишь немного рассмотрим два наверно наиболее популярных применения транзисторов, в качестве усилителей сигналов и в качестве ключей. РезюмеСамым интересным устройством среди полупроводниковых приборов является транзистор. Транзисторы позволяют реализовывать различные цифровые и аналоговые устройства. Различают два класса: биполярные (ток) и полевые (поле) транзисторы. Шаг 9. Транзистор-усилительКогда говорят об усилительных свойствах какого-нибудь устройства, обычно рисуют графики, как на рисунке ниже. На графиках показывается как меняется выходной сигнал в зависимости от входного.Взглянув на рисунок, можно заметить схему, это самая простая схема включения транзистора (в данном случае биполярного), которая позволяет ему усиливать сигнал. Самое сложное тут, это «передвинуть» входной сигнал так (по входной характеристике), чтобы он начал усиливаться, да ещё и без искажений. Для этого, нужно, чтобы «центр» сигнала был в такой точке, от которой по обе стороны одинаково меняется кривая. Это нужно, чтобы не было искажений. Такую точку называют рабочей. Для этого на схеме есть специальный резистор, который к входному сигналу даёт постоянное смещение. По графикам можно проследить, что сигнал усилился. Видно, что усиление происходит по току, ну и как следствие по напряжению тоже. Поэтому для характеристики усилительных свойств транзисторов вводят специальные коэффициенты, которые показывают во сколько раз выходной ток, напряжение или мощность больше входного. Параметр h21, о котором говорилось выше, является приблизительно равным коэффициенту усиления по току. На этом следует остановиться, ибо вопросы, касаемые усилителей и усилительных каскадов сложны и являются вообще отдельной веткой электроники. Поэтому об этом или говорить всё или лучше ничего или почти ничего, здесь рассмотрены лишь основы. Вершиной совершенства полупроводниковых усилителей являются специальные каскады, которые называются операционные усилители, которые сейчас представляют целое полупроводниковое аналоговое устройство с наисложнейшей архитектуройРезюмеВ аналоговой электроники самое популярное применение транзисторов — это усилительные каскады. Усиление происходит за счёт особенностей работы транзистора. Для того, чтобы сигнал усиливался без искажений нужно правильно подбирать напряжение смещения.Шаг 10. Транзистор-ключДругим направлением развития применения транзисторов, которое стало также очень популярным и положило начало всей современной цифровой электронике, является применение транзисторов в качестве ключей. Ключом называют обычный переключатель между двумя состояниями. На рисунке представлен пример такого обычного переключателя.Для того, чтобы сделать из транзистора ключ, необходимо также выбрать два состояния транзистора, между которыми производить переключение. Обычно это когда транзистор проводит большой ток и когда маленький, говорят транзистор «открыт» или «закрыт». С позиции цифровых применений, это соответствует «1» и «0». Проектирование цифровых ключей тоже имеет много подводных камней и схемы во много раз сложнее тех, что изображены на рисунке, но основа та же. Дело в том, что для ключей критическим является скорость переключения, а также различимость двух состояний. Поэтому требуются расчёты и модернизации, чтобы оптимальным образом работать с характеристиками транзистора.Основная идея заключается в том, что имеется некоторая электрическая цепь с одним постоянным сопротивлением и одним переменным, в качестве которого выступает транзистор. Если сопротивление транзистора намного больше постоянного сопротивления, то всё напряжение падает на нём, а на резисторе оставшееся. Если же, у транзистора на много меньше сопротивление постоянного, то ситуация противоположная. Суммарно напряжение на транзисторе и постоянном сопротивление всегда равно напряжению питания. Это закон, который ещё называют законом Кирхгофа №2. Отсюда становится понятна идея, что при подаче сигнала (тока, напряжения) на вход транзистора, он открывается и всё падает на постоянном сопротивлении, если убрать сигнал, то он «закрыт» и всё падает на транзисторе. Если мерить напряжение на транзисторе, то зависимость между входом и выходом будет похожа на логическую операцию инверсия: когда на входе «1», на выходе «0» и т.д. Большую популярность сейчас имеют схемы, на подобие той что приведена в правом верхнем углу рисунка. Это так называемая комплементарная пара. Тут всё просто: подавая один и тот же сигнал на транзисторы с разным типом канала, всегда будет открыт только один из транзисторов. Это позволяет уменьшить энергетическое потребление схемы.Цифровые транзисторные ключи позволяют создавать сложные логические схемы, которые уже способны производить наисложнейшие вычисления.РезюмеВ цифровой электроники самое популярное применение транзисторов — это ключи. Транзисторы переключаются между двумя состояниями, за счёт чего и проявляется эффект «ключа». Реальные ключи являются сложными каскадами с дополнительными элементами для улучшения параметров. На транзисторных ключах формируются логические элементы.Шаг 11. Логические элементыРассмотренные в предыдущем разделе транзисторные ключи в первую очередь нашли своё применение в цифровой электроники. Можно даже говорить, что они её сформировали. При помощи только одного ключа можно сформировать все нужные конструкции, чтобы рассчитывать логические функции. В математике доказывается, что для это не нужно реализовывать все возможные функции, достаточно того, чтобы можно было сделать только несколько основных (базис), через которые уже можно выразить все остальные. Например, это может быть операция инверсии и конъюнкция (2И-Не), а может быть исключающее или и инверсия. Простой ключ уже сам по себе реализует инверсию. А конструкции, которые показаны ниже на рисунке, позволяют реализовать операцию 2И-Не (такой каскад называют вентиль).На картинке изображены две схемы, одна для биполярного транзистора, другая для полевого, причём полевой транзистор использует комплементарные пары. Существует огромное количество различных модификаций данных типов соединений. Но эти являются самыми основными. Причём КМДП логика на данный момент является самой популярной, правда, не в чистом виде. Все технологические новинки являются коммерческой тайной производителей электроники. Рассмотрим для примера работу ТТЛ (транзистор-транзисторная логика). Тот интересный транзистор, который расположен на входе, на самом деле не является конкретным устройством, это всё реализуется интегральными методами, но об этом позже. Пусть, к примеру, напряжение питания 5 вольт, а на входах A и B сигналы «0», т.е. примерно 0.1 вольт. Это говорит о том, что эмиттерные переходы смещены в прямом направлении. Если устройство делается из кремния, то на таком переходе будет примерно 0.7 вольт (это факт, связанный с потенциальным барьером). Тогда, опираясь на закон Кирхгофа №2, можно говорить, что между базой входного транзистора и землёй, которая у выходного транзистора падает примерно около 0.8 вольт. Точность тут не важна, главное понимать, что этого мало, поскольку для того, чтобы по этой цепи протекал электрический ток, нужно как минимум 0.7 + 0.7, поскольку в цепи два pn-перехода (один коллекторный — от первого транзистора, второй эмиттерный — от второго). Тогда транзистор на выходе закрыт, и на выходе ключа «1». Ситуация, когда A и B «1» и «0» (или «0» и «1») ничего не меняет, поскольку разные потенциалы на входе будут замыкаться, и pn-переход также будет в прямом смещении. Однако, если подать на вход «1» и «1» т.е. по 5 вольт, тогда между базой и эмиттерами переходы будут в обратном смещении. Т.е. на них будут маленькие напряжения, что говорит о том, что на базе почти 5 вольт. Тут тоже точность не нужна. Важно то, что этого напряжения уже достаточно и спокойно открываются оба pn-перехода. Это приводит к тому, что начинает течь ток и открывается выходной транзистор, на выходе которого «0». Вот такая зависимость между A, B и Y называется 2И-Не, поскольку это операция логическое умножение и затем инверсия.Также очень интересной является И2Л (интегрально-инжекционная логика), которая тут не представлена на картинке, т.к. не очень популярна, однако в СССР были значительные успехи в её применении. Уникальность её заключается в сверхмалой потребляемой мощности (можно работать с напряжениями до 1 вольта), устойчивости к шуму и очень компактные размеры (связано с планарной технологией). О принципах её работы также здесь не будет сказано, поскольку говорить нужно о многом. РезюмеТранзисторные ключи позволяют формировать универсальные логические каскады — вентили, которые могут формировать путём каскадных соединений более сложные логические функции. Все современные цифровые устройства состоят из такого рода вентилей. Сейчас при проектировании микросхем (о них в следующем разделе) редко пользуются транзисторным масштабом, всё сводится к описанию соединений между уже готовыми логическими модулями (часто для это применяют языки HDL). Шаг 12. Где в процессоре транзисторы?Яркими представителями современных полупроводниковых устройств являются процессоры и иные микросхемы. Все эти устройства построены на pn-переходах. Миллионы транзисторов образуют ключи, которые в свою очередь образуют логические элементы, реализующие разнообразные операции: сложение, вычитание, умножение, деление и т.д. О том, как на элементе 2И-Не всё это можно реализовать следует почитать в дополнительной литературе по алгебре логики. Современные сложные машины могут «засунуть» такое огромное количество транзисторов в такие маленькие размеры при помощи так называемой планарной технологии. Суть её состоит в том, что берётся чистый кусок полупроводника (тонкая пластинка) и на него наслаивают различные уровни примесей через специальную маску, чтобы разместить примесь в нужном месте. И так поочерёдно образовывая сложные соединения. Это действительно высокие технологии, которые не стоят на месте. Конечно, сейчас операции намного сложнее, чем тут описано, однако принцип остаётся тем же. Более подробно о производстве полупроводниковых микросхем можно почитать в литературе, а также посмотреть интересные статьи от компании Intel. РезюмеВ данной статье сжато (где это возможно) рассказано об очень важной области электроники. Рассмотренные темы действительно можно считать наиболее ключевыми для общего понимания принципов функционирования полупроводниковых устройств. Найти ответы на появившиеся вопросы поможет список книг и статей ниже. Безусловно отрасль полупроводниковой электроники ещё долгое время будет задавать темп научно-технического развития общества. Недаром процессоры, как представители этого направления, включили в тренды технологий 2012 года по версии EE Times.Шаг 13. ПочитатьКиттель Ч. Введение в физику твердого тела.Ландау, Л. Д., Лифшиц, Е. М. Теория поля.Фейнман Р., Лейтон Р., Сэндс М. Фейнмановские лекции по физике. Электричество и магнетизм.Фейнман Р., Лейтон Р., Сэндс М. Фейнмановские лекции по физике. Физика сплошных сред.Paul Horowitz and Winfield Hill. The Art of Electronics.Peter Y. Yu, Manuel Cardona. Fundamentals of Semiconductors: Physics and Materials Properties.Li, Sheng S. Semiconductor Physical Electronics.С.А. Гаврилов. Полупроводниковые схемы. Секреты разработчика.Толмачёв В. В., Скрипник Ф. В. Физические основы электроники.Диоды. For dummies (AveNat).Биполярные транзисторы. For dummies (AveNat).Полевые транзисторы. For dummies (AveNat).Полупроводниковые приборы — диод (IIIa66uMEM6eP).p-n переход (Dooez).Простейшие логические цепи. Часть 1 и Часть 2 (appplemac).Вскрытие Pentium III, фотографии под микроскопом (alizar).Вскрытие чипа Nvidia 8600M GT (Tiberius).P.S. Соблюдайте правила ресурса и условия Creative Commons Attribution 3.0 Unported (CC BY 3.0)"
    },
    "doc_66": {
        "url": "https://habr.com/ru/post/335010/",
        "title": "[UPDATED + Комментарии] Сначала они воруют, а когда ты побеждаешь, то тебя убивают",
        "text": "Кому-то может показаться, что это начало какой-то детской загадки, но на самом деле это реальность. Ответ на нее Департамент Информационных Технологий. Заранее говорю, что статья является лишь сводом информации. Каждый из вас может сделать собственные выводы.[UPD]: ДИТ ответил в комментариях[UPD]: ДИТ прислал официальный ответ[UPD]: Сайты, которые указывают на связь компании Альтрикс и компании Тактик Лабс почистили, но интернет помнит всеЧасть 2. Сначала они воруют, а когда ты побеждаешь, то тебя убиваютЛегендаЕМП — единая мобильная платформа. Суть — дать доступ к АПИ московских сервисов (ЖКХ, штрафы, образование)МРКО — Электронный дневник школьника. Старый.ОЭЖД — Электронный дневника школьника. Новый.Мое приложение — Приложение, которому 1.5 года (а если брать старые версии, то 3.5).Я — Бывший школьник. Только окончил обычную московскую школу. Сейчас уже поступил в ВУЗ.Если вам лень читать всю историю, то просто переходите к «ЧТО? КАК ТАК?».За что я борюсьЯ верю, что дети могут учиться хорошо и даже отлично. Я верю, что вопрос лишь в мотивации.Что в жизни? А в жизни все грустно. Дети часто бывают забыты родителями. Учителя также редко мотивируют детей. Да, детей не мотивируют учиться. И самое страшное — им никто не говорит, что они в принципе могут учиться хорошо. Дети просто не знают об этом!Чаще всего урок — монотонное чтение информации. Если в вашей школе есть хоть 1 не такой учитель, то вам безумно повезло! Может быть ваш ребенок будет знать хоть 1 предмет.Что я предлагаюЯ создал помощника. Каждый ребенок мог получить кого-то, кто всегда рядом. Кого-то, кто всегда подскажет что делать. Помощник ненавязчиво показывает ребенку, что он может учиться хорошо, что для этого не нужно много усилий, а совсем чуть-чуть. А если что-то пошло не так, то ребенок моментально об этом узнает.Как это происходит обычноЧаще всего мы пытаемся исправить ситуацию, когда ребенок уже закопал себя очень глубоко и вылезти из этой ямы будет уже невозможно. Где-то в конце учебного периода родитель открывает дневник ребенка и спрашивает: «Ну что у тебя выйдет?», а ребенок отвечает, что все плохо. Дальше они вместе пытаются получить 20 оценок за неделю(если вообще пытаются), и, конечно, у них ничего не получается, а у ребенка откладывается в голове, что учиться хорошо невозможно.Именно поэтому так популярны репетиторы для ЕГЭ, когда ребенок пытается за последний год освоить все, что не учил совсем.Люди обращают внимание на проблемы образования лишь в конце, когда их решать уже невозможно.Объяснение математикой: Итоговая оценка — округление средней оценки. Средняя оценка — среднее арифметическое взвешенное. Чем больше ребенок получает оценок, тем сложнее изменить среднее значение.Как это решитьНа самом деле это очень просто. Важно лишь быть рядом с ребенком с самого начала пути, а не когда уже поздно. В приложении есть основной функционал:1. Советы — приложение говорит сколько нужно получить пятерок чтобы достичь цели.2. Подсказки — каждый предмет выделен цветом. Зеленый — цель достигнута, можно расслабиться. Желтый — спорная оценка. Красный — нужно подготовиться к предмету и получить оценку.3. Пуш уведомления — ребенок не может «проспать оценку».Слева официальный дневник, а справа мойВзаимоотношение с приложением происходит примерно так:Начало года. Оценок пока еще не много.1. Ребенок открывает дневник2. На главном экране сразу советы. Они ему говорят: «Эй, парень, у тебя будет 5 по биологии, просто получи 2 пятерки!»3. Он запоминает это.4. Ребенок открывает дневник на завтра и видит, что домашнего задания много. Целых 7 уроков, но из «красных» одна биология и начинает её делать. Специально для пятерки.5. У ребенка откладывается хоть что-то из того, что он сделал. Понимание предмета увеличивается.6. Если ребенок получил оценку, то ему приходит пуш уведомление с просьбой проверить. Если оценка хорошая, то ребенок получает похвалу в виде зеленого цвета и осознание того, что учиться хорошо возможно. А если оценка плохая, то ребенок узнает о ней в самом начале и успеет исправить.В итоге у ребенка есть постоянная ситуация успеха, любая проблема решается с самого начала, а у него откладывается в голове, что все в его руках.Я называю это борьбойАПИ не был создан для создания качественных приложений. Мне пришлось пол года просить саппорт сделать простейшее обновление — не округлять среднюю оценку. В итоге они ничего не сделали, а лишь дотянули до момента, когда предоставили новое АПИ. Просьба была декабре, а новое АПИ в конце апреля. За месяц до конца учебного года.Что за новое АПИ?ДИТ в какой-то момент начал разрабатывать ОЭЖД, и я заметил, что его пользователи не могут пользоваться моим приложением т.к. их логин не подходит.А дальше произошло самое неожиданное — авторизация у конкурента происходила успешно.После письма в саппорт оказалось, что они получили доступ к «тестированию», а мне такой доступ предоставить почему-то не могут.Также я заметил, что авторизация в их дневнике происходит мимо ЕМП, т.е. даже не спрашивают пароль. На вопрос почему мне ответили: «Мы не должны раскрывать логику авторизации вашего конкурента». Ага, особенно это невозможно, когда получение данных происходит напрямую с серверов ДИТ.ЧТО? КАК ТАК?Дневник моих конкурентов давал доступ к дневнику ТОЛЬКО за деньги, а еще выпрашивал деньги за анализ оценок. Т.Е. они не только заставляли людей платить за дневник, но и украли мою идею, и начали ее продавать.Компания Альтарикс — создатель госуслуг и ЕМП. «Госуслуги» является официальным приложением для дневника.Теперь давайте начнем вскрывать все покровы и выстроим связь altarix.ru — мои конкуренты.1. Находим сайт cloud4smartcity.com, который находится на том же IP, что и altarix.ru.2. На этом сайте продается активный гражданин, госуслуги, продукт KidRadar3. KidRadar один из продуктов Taktik Labs, которые являются создателями дневника моего конкурента (https://play.google.com/store/apps/developer?id=Taktik+Labs)4. На десерт: devs.hostoasis.net на этом сервере есть шаблоны всех сайтов.UPD!!! сайт почистили, но интернет помнит всеТеперь мы понимаем, что эти компании тесно связаны.Цель их приложения — заработать на том, что они же и не создали адекватного официального конкурента. Они создали Госуслуги, но не поставили в его ключах слова «МРКО» или «Электронный дневник», и узнать при это приложение никто не мог. Получалось так, что если бы не я, то человек, который гуглит МРКО находил бы только их платное приложение. Без конкуренции.И тендер выполнили и деньги за платное приложение заработали. Удобно!Кошки-мышкиЕсли ввести в AppStore «МРКО», то можно увидеть, что мое приложение первое, а приложение конкурентов второе. Каждый раз работники ЕМП пытались найти причину для блокировки меня. Конец 2016 года. Я тогда еще парсил сайт, а моя аудитория была уже 100 000 пользователей. Мой конкурент никак не мог пробиться на первое место, хотя они очень старались, например, рекламировали свое приложение в ВК, делая таргет на мою группу в ВК.В какой-то момент 300 пользователей увидели рекламу, которая почти 18+(просто пошлая), а при переходе по ней открывался UС Browser. Скорее всего, я накосячил с фильтром гугл адмоб.Ошибка была исправлена в тот же вечер, но не тут-то было. Сайт начали менять и портить парсинг. В день по 2-3 раза.Стало понятно что меня пытаются «убить» и я решил, что теперь буду использовать АПИ, его-то не запретят.Конечно, я ошибался. Как только я начал использовать АПИ, мне прилетело письмо:Обратите внимание на отправителя письма.Они нашли какую-то левую причину, по которой заблокировали мне АПИ. Я подумал: «Ну ок», и написал, что они могут удалить всех лишних пользователей. Но они ничего не сделали, а заблокировали не: «через 14 дней», а сразу.Представляете как удобно? Вы управляете ЕМП, баните меня, а вся моя аудитория переходит к вам!После блокировки меня заставляли ходить на какие-то бессмысленные переговоры в ДИТ, а на деле просто тянули время. (Тянули до момента, пока я не стану вторым)Например:1. Переговоры назначались за несколько часов.2. Сначала меня заставили предоставить отчет о том, что подобных ошибок больше не будет. После того, как я его предоставил в тот же день, они пытались найти другие поводы3. Скиньте нам исходники приложения4. Сделайте приложение которое работает с АПИ, но документацию не дадим5. Если в приложении будут баги, то не разрешим пользоваться АПИ6. В течении нескольких недель переносили встречуАпогеем ситуации стал момент, когда я сидел в офисе ДИТ, с приложением которое вроде как должно работать т.к. было разработано с какой-то очень странной документацией и без доступа к тестовому апи.Мы сидим в комнате, которая была сделана в японском стиле. В комнате сижу я и 2 работника(1 из дит, а второй из ЕМП). Один из них мне говорит: «Ты действительно готов? Мы сейчас включим тебе доступ и если что-то будет не работать, то мы его закроем», на их глазах рисовалась насмешка, а я понимал, что обратного пути нет (Да и не нужно было), я им отвечаю: «Да».Доступ открывают и начинается веселье. Приложение работало идеально, хотя это был первый запуск, но данные грузились и отображались правильно. На их глазах было недоумение, а я понимал, что мне сейчас откроют доступ и я выложу приложение. Но они переглянулись и у них был такой диалог:— Ну что, открываем доступ?— Ну да, раз ошибок нет— Точно?— Ну да— Мммм… Ладно, Леван, мы сейчас доступ закрываем, а завтра откроем.И они ушли. Короче, завтра они доступ не открыли, а только спустя время. И как долго они бы не тянули, мое приложение все еще оставалось первым в поиске. После этой ситуации, мне постоянно шли угрозы о блокировках, а я постоянно отбивался.ИтогиЗа все это время они так и не смогли меня побороть. Я как был на 1 месте, так и остался.Они блокировали мое приложение, но не думали о детях, которым теперь негде смотреть домашнее задание.Они специально не сделали бесплатной альтернативы т.к. хотели на этом заработать.В начале лета 2017 года, я спросил ЕМП: «Будут ли какие-то изменения в методах или в функционале?», а мне ответили, что пока они не знают.1 августа я получил письмо о том, что АПИ больше не будет и попросили меня сообщить моим пользователям, что теперь надо пользоваться госуслугами.А кто будет мотивировать детей теперь?Часть 2. Сначала они воруют, а когда ты побеждаешь, то тебя убиваютUPD. Официальный ответ ДИТ (переслал сотрудник Хабра):Артём Ермолаев: «С 1 сентября 2017 года прекращается доступ сторонних разработчиков к API Электронного дневника»Вчера в публичном пространстве с подачи разработчиков появилась информация о том, что Департамент информационных технологий закрывает доступ к API Электронного дневника для сторонних структур. Хотим прояснить позицию – мы действительно закрыли доступ всем сторонним разработчикам, всем без исключения и сделали это сознательно. Причины такого решения – случаи нарушения этических норм сторонними разработчиками мобильных приложений электронного дневника, а также наши планы, в том числе в связи с подобными случаями, существенно поднять уровень информационной безопасности учеников при работе с дневником. В прошлом году в системе была обнаружена уязвимость безопасности, в API в частности, поэтому мы приняли решение перевести дневник на единую систему авторизации и получения информации на городском бесплатном ресурсе — на официальном сайте Мэра Москвы mos.ru. Этот процесс занимает определённое время. Что значат изменения? Во-первых, войти в дневник сможет только человек, который прошел полную авторизацию на официальном ресурсе (то есть корректно и достоверно указал свой номер телефона и e-mail, и мы смогли его однозначно идентифицировать в базах данных). Во-вторых, для защиты информации о ребенке, а также для защиты самого ребенка от неэтичной, несанкционированной информации, мы будем использовать те же уровни защиты, которые используем при предоставлении других государственных услуг и сервисов. Есть мнение, что оценки в дневнике и домашние задания  – это не конфиденциальная, не критичная информация. Однако не многие принимают во внимание тот факт, что в дневнике также хранится контактная информация ребенка и его родителя, и о том, что дневник – это дополнительная площадка для показа ребенку контента. Халатность или неопытность некоторых сторонних разработчиков, их не готовность глубоко анализировать последствия своей работы, стали причиной того, что в разгар прошлого учебного года, в одном их самых массовых неофициальных мобильных приложений дневника, были размещены материалы порнографического характера. Это происшествие создало серьезный резонанс среди родителей. На ДИТ массово были поданы жалобы, в отдельных случаях — судебные иски. Из-за этой истории мы едва не похоронили Электронный дневник, потому что общественность нас уничтожала. При этом  уважаемый разработчик данного приложения на вопрос, как такое могло произойти, сам же в своем посте отвечает «скорее всего, я накосячил с фильтром гугл адмоб». Он относится к этому случаю, как всего лишь к ошибке, которая, между тем,  привела к тому, что тысячи детей увидели контент, который не должны были видеть. Кто может дать гарантии того, что подобные «косяки» не повторятся? ДИТ может дать такую гарантию исключительно в официальных приложениях дневника. Именно поэтому принято решение о закрытии доступа к дневнику для неофициальных ресурсов. В то же время, мы отдаем себе отчет, что популярные приложения потому и стали популярными, что предоставляли жителям востребованный сервис, обладали определенными функциональными преимуществами в сравнении с официальным дневником. Мы готовы перенять положительный опыт, наработки, обсудить возможные форматы работы со сторонними разработчиками, чтобы усилия, направленные на реализацию удобного продукта для жителей не было потрачены впустую. Поэтому я хотел бы публично пригласить Левана на встречу для обсуждения деталей дальнейшей работы».UPD. Ответ ДИТу от автора 1. В письме, которое мне прислали, вы сказали, что отключаете АПИ т.к. переходите на ОЭЖД, а сейчас говорите, что причина в рекламе. Где правда? После того случая вы АПИ вернули, хотя очень старались процесс затянуть и никаких проблем пол года не было. А за что забираете сейчас? Есть причины? Если есть — рассказывайте2. Почему не ответили про Альтарикс?3. В своем ответе вы говорите: «В прошлом году в системе была обнаружена уязвимость безопасности».Что хуже: реклама, которую увидело 300 человек или уязвимость безопасности?Посему я хочу задать вопрос: «Кто может дать гарантии того, что подобные «косяки» не повторятся?»Или все-таки ошибки случаются у всех?Часть 2. Сначала они воруют, а когда ты побеждаешь, то тебя убивают"
    },
    "doc_67": {
        "url": "https://habr.com/ru/post/185806/",
        "title": "Техника для проверки подлинности денег",
        "text": "Много веков, с самого времени изобретения денег, идет противостояние эмитентов валют и фальшивомонетчиков. Первые используют все более изощренные способы защиты, а вторые находят способы их подделывать. Современные банкноты имеют настолько сложные защитные признаки, что проверка их невозможна без специальных технических средств. Кроме того, зачастую требуется обеспечить проверку подлинности вообще без участия человека, например, в платежных терминалах, или в банках при автоматизированной обработке больших объемов наличности.Рассмотрим подробно, как защищены современные валюты, как происходит проверка подлинности (валидация) и что за аппаратура для этого применяется. Человекочитаемые признакиМетодов защиты от подделки придумано огромное количество. Но к сожалению, далеко не все из них годятся для автоматической валидации. Либо защитный элемент тяжело считать и представить в цифровом виде, либо нет четких критериев «проверка пройдена/не пройдена», либо то и другое вместе. Так что лучшим валидатором по-прежнему остается зоркий глаз эксперта.Человекочитаемые признаки очень разнообразны, интересны, и каждый год изобретаются все новые и новые. По-хорошему, их описание тянет на отдельную статью, но поскольку речь дальше пойдет все-таки об аппаратуре, ограничимся кратким перечнем.Водяной знак. Изображения, создаваемые участками бумаги разной плотности, видны на просвет. Пожалуй, самый известный признак.Защитная нить. Металлическая или полимерная лента, внедренная в толщу бумаги. Может быть простой или ныряющей. Ныряющая нить многократно выходит на поверхность листа и погружается обратно.Микропечать. Рисунок банкноты могут содержать крошечные символы, обычно обозначение номинала или банка, или просто мелкие элементы, которые различимы лишь под увеличением.Защитные волокна. Обрывки разноцветных нитей, расположенные в бумажной массе. Волокно может быть простым или сплетенным из нескольких нитей разных цветов.Микроперфорация. Пробитые лазером ровные одинаковые маленькие дырочки, составляющие изображение или надпись. Как и водяные знаки, обнаруживаются на просвет. Рельеф отверстий не должен ощущаться пальцами, бумага вокруг них не должна быть обуглена.Рельефная печать. Надписи и рисунки, различимые на ощупь. Выполняют как утилитарную функцию (метки для слепых), так и функцию защиты от подделки.Кипп-эффект. Рифлёный участок поверхности, на боковых гранях рифлений нанесено изображение, которое видно только при взгляде под острым углом.Совмещающиеся изображения. Рисунок, разные элементы которого расположены на разных сторонах листа. При рассматривании на просвет части должны точно подходить друг к другу и давать цельное изображение.Орловская печать. Тонкие линии, цвет которых меняется по ходу линии без видимых прерываний и наползания красок. Обычная многокрасочная печать неизбежно даст в этом случае ошибку приводки цветов.Тиснение фольгой. Рисунок, выполненный металлической фольгой, напрессованной на поверхность бумаги.MVC. Муаровые полосы разных цветов, которые видны при наклоне банкноты.OVI. Оптически переменная краска. Элемент, меняющий свой цвет в зависимости от того, под каким углом на него смотреть.Голограмма. Элемент, дающий трехмерное голографическое изображение, которое поворачивается при наклоне банкноты.Машиночитаемые признакиА что же рассматривать и проверять машинам? Набор машиночитаемых признаков подлинности гораздо скромнее.Размеры банкнотыГабаритные размеры банкноты, строго говоря, не относятся к защитным признакам, но большинство детекторов проверяют их в первую очередь. Прежде всего, это позволяет сразу отсечь всякий мусор: обрывки купюр, посторонние предметы, слипшиеся и сложенные деньги. А во-вторых, это простой, но довольно надежный способ распознать валюту и номинал банкноты.Габариты проверяются оптическим способом, сканированием в проходящем свете. Если прибор не оборудован полноразмерным сканером, он может определять только один из размеров, измеряя время перекрытия датчиков банкнотой при её протягивании через механизм. Также, по ослаблению светового потока, прибор определяет сдвоенные банкноты.Видимое изображениеОбраз банкноты в видимом свете получают сканированием, либо в проходящем свете, либо в отраженном (каждая сторона отдельно), либо и так, и так. Прибор может проверять не всю поверхность, а только несколько характерных зон. В таком случае достаточно отдельных датчиков, каждый из которых представляет собой оптопару: светодиод+фотодиод.Для надежной валидации требуется полное изображение, и в этом случае применяются фотоприемные линейки, похожие на те, что стоят в обычных сканерах. Разрешение линеек может лежать в диапазоне от 10 до 200 DPI, причем повышение разрешения не всегда приводит к росту качества распознавания.Сканирование может проводиться в одном цвете (как правило, красный, реже белый), а может быть полноцветным. Во втором случае сканер содержит несколько цветовых каналов. Далеко не всегда это стандартные RGB. Базовые цвета выбираются исходя из спектров краски распознаваемой валюты. Цветов может быть больше трех: скажем, красный (640 нм), зеленый (525 нм), синий (~450 нм) и темно-красный (~750 нм, почти на границе с инфракрасным), в котором хорошо видны особенности рисунка долларов США.Инфракрасное изображениеИзображение в инфракрасном свете (880-940 нм) является одним из основных машиночитаемых признаков. При печати банкнот применяются специальные, т.н. метамерные краски. Рисунок, выполненный такими красками, может выглядеть однородным в видимом свете, но в ИК иметь четко различимые темные и светлые участки.Рис. 1. Инфракрасный образ банкноты 1000 RUB модификации 2010 г. Изображение с сайта cbr.ruРис. 2. Инфракрасный образ банкноты 100 USD. Изображение с сайта banknot-spb.ruРис. 3. Инфракрасный образ банкноты 500 EUR. Изображение с сайта banknot-spb.ruКроме того, сканирование в ИК на просвет позволяет надежно распознавать водяные знаки, защитные ленты и металлизированные элементы банкноты. ИК сканирование позволяет определять оптическую плотность бумаги, используя её как еще один проверяемый признак, или просто для отбраковки сдвоенных листов.Ультрафиолетовые меткиВ качестве одного из защитных признаков купюры содержат метки, нанесенные люминофорами, которые при облучении ультрафиолетом светятся в видимом спектре. Существуют люминофоры всех цветов радуги, так что банкнота под УФ выглядит очень красиво.Рис. 4. Ультрафиолетовые метки банкноты 100 RUB модификации 2004 г. Изображение с сайта cbr.ruДоллары смотрятся гораздо скромнее, светится одна узкая полоса, цвет зависит от номинала.Рис. 5. Ультрафиолетовые метки банкноты 50 USD. Изображение с сайта banknot-spb.ruЗато евро сверкает всеми красками.Рис. 6. Ультрафиолетовые метки банкноты 500 EUR. Изображение с сайта banknot-spb.ruТакже люминесцентыми свойствами обладают защитные волокна (у RUB и EUR), причем разные волокна имеют разный цвет свечения. В сплетенных волокнах на рублях одна нить светится, а вторая нет, из-за чего волокно выглядит пунктирным. Еще одним защитным признаком является отсутствие фоновой люминесценции бумаги. Обычная писчая бумага содержит оптические отбеливатели, из-за которых под УФ она светится голубым цветом. Деньги печатают на неотбеленной бумаге, которая фонового свечения не дает.Для проверки УФ-меток валидатор оборудуется ультрафиолетовой лампой или светодиодами (360-380 нм). Свечение меток улавливается фотоприемниками видимого спектра, которые закрыты светофильтрами, отсекающими первичный ультрафиолет. Самые простые детекторы проверяют только отсутствие фоновой люминесценции бумаги, приборы более высокого уровня снимают полный скан. Свечение защитных волокон практически не проверяется в силу их малого размера и нерегулярности расположения.Магнитные меткиНа некоторые участки банкноты наносится краска, обладающая магнитными свойствами. Например, на рублях РФ модификаций до 2004 года включительно магнитным является номер банкноты (зеленого цвета). На рублях модификации 2010 года магнитными свойствами обладают определенные фрагменты изображения.Рис. 7. Магнитные элементы банкноты 1000 RUB модификации 2010 г. Изображение с сайта cbr.ruДоллары США имеют несколько магнитных зон причудливой формы.Рис. 8. Магнитные элементы банкноты 100 USD. Изображение с сайта banknot-spb.ruНа евро магнитится защитная нить, номер и фрагмент изображения.Рис. 9. Магнитные элементы банкноты 500 EUR. Изображение с сайта banknot-spb.ruМагнитные метки подразделяются на «жесткие» и «мягкие». Первые выполняются с применением магнитотвердых материалов и могут сохранять собственную намагниченность. «Мягкие» метки размагничиваются сразу при отключении внешнего поля. Для распознавания магнитных меток используются считывающие головки, похожие на обычные магнитофонные. Головки для валидаторов, как правило, широкие (2-5 см), чтобы захватывать большую площадь. Для считывания «жестких» меток банкнота сначала протаскивается над постоянным магнитом, а затем над головками, которые ловят остаточную намагниченность.Cпецэлемент «И»Обычные люминофоры излучают свет с длиной волны больше, чем у возбуждающего излучения. Например, при засветке ультрафиолетом излучается видимый свет. Существует класс веществ, называемых антистоксовскими люминофорами, для которых этот закон не выполняется. На свойствах антистоксовских люминофоров основано действие защитного элемента «И».[4]При освещении элемента интенсивным инфракрасным светом (с длиной волны 940-960 нм) он начинает излучать в зеленой области спектра (~520 нм). На рублях антистоксовские метки расположены на лицевой стороне внизу слева (серые цифры номинала) и справа (серый фон номинала).Рис. 10. Антистоксовские элементы банкноты 5000 RUB модификации 2010 г. Изображение с сайта cbr.ruСуществуют люминесцентные метки с более сложной методикой проверки, например, требующие облучения лазером и светящиеся в ИК-диапазоне.Cпецэлемент «М»Данный элемент защиты представляет собой краску, которая имеет разный коэффициет поглощения на разных участках спектра в ИК-области. Если освещать банкноту попеременно светом 940 нм и 850 нм, элемент «М» будет выглядеть мигающим (при наблюдении в ИК свете, опять же).[5]На рублях модификаций до 2001 года такой элемент присутствовал в виде точки, ленты или участка изображения. Про более поздние модификации достоверных данных нет.Рис. 11. Спецэлемент «М» банкноты 500 RUB. Изображение с сайта banknot-spb.ruНа долларах США аналогичными свойствами обладает печать Казначейства.Рис. 12. Спецэлемент «М» банкноты 100 USD. Изображение с сайта banknot-spb.ruСекретные признакиДля того, чтобы усложнить работу фальшивомонетчикам, публикуется информация далеко не обо всех защитных признаках. Существуют засекреченные элементы защиты, о которых неизвестно широкой публике, и которые проверяются только самим Центробанком. Косвенным источником информации о них могут служить патенты. Для защиты от подделки может применяться много всего интересного.Например, идентификация по характеристикам разгорания и послесвечения люминофора.[11] Или применение электролюминофоров.[12] Или внедрение в бумажную массу волокон, обладающих магнитными свойствами.[13] Или металлизированные элементы, имеющие строго определенные резонансы в СВЧ-диапазоне.[14] Или даже наноалмазы (без шуток!).[15]Гознак для производителей машин продает спецальный прибор для проверки спец признаков (производится на заводе ЛОМО в Санкт-Петербурге). Работает он как USB устройство. Что там внутри — неизвестно, для надежности весь прибор опечатан.Устройства обработки банкнотПросмотровые детекторыПросмотровый детектор только визуализирует защитные признаки, а решение о том, подлинная банкнота или нет, принимает оператор. С одной стороны прибор получается максимально простым и дешевым, а с другой — требует определенных навыков работы. Ультрафиолетовый детектор представляет собой одну или несколько УФ-ламп, часто с лупой и масштабной сеткой. Люминесценцию защитных элементов проверяют «на глаз».Рис. 13. Ультрафиолетовый детектор CoinMate SLD-16M. Изображение с сайта coinmate.usИнфракрасный детектор устроен немного сложнее. Он содержит ИК-подсветку рабочей области, камеру с соответствующим фильтром и дисплей, показывающий картинку с камеры. Для контроля спецэлемента «М» применяются две группы подсветки, с разными длинами волн, которые включаются попеременно. Спецэлемент при этом выглядит мигающим.Рис. 14. Инфракрасный детектор Grace IRD-800. Изображение с сайта grace-chn.comСуществуют комбинированные (ИК+УФ) приборы. Кроме того, просмотровые детекторы могут комплектоваться выносными камерами (для изучения подозрительных фрагментов «вблизи»), детекторами магнитных меток и тому подобными аксессуарами.Рис. 15. Универсальный детектор Dors 1200 с выносной камерой и визуализатором магнитных меток. Изображение с сайта dors.ruАвтоматические детекторыАвтоматический детектор не требует от пользователя работы мозга специальных знаний. Достаточно просто вставить банкноту, детектор её подхватывает, протягивает через тракт, сканирует, анализирует и выносит вердикт: поддельная или настоящая.Показать анимациюРис. 16. Принцип работы автоматического детектора подлинностиСамые простые детекторы имеют лишь несколько одиночных фотодетекторов и, таким образом, сканируют несколько отдельных строк изображения, обычно в ИК-диапазоне. Более продвинутые модели считывают полное изображение банкноты при помощи фотоприемной линейки. Дополнительно могут присутствовать магнитные датчики и УФ-подсветка.Рис. 17. Детектор DoCash 430 c открытым трактом. Видны дискретные фотодатчики и магнитные головки. Изображение с сайта docash.ruРис. 18. Детектор Dors 230 c открытым трактом. Видна фотоприемная линейка. Изображение с сайта systema.bizCчетчики и сортировщикиГлавный недостаток автоматических детекторов — низкая скорость работы, они принимают банкноты по одной. А если денег много? Для таких случаев придуманы счетчики банкнот: в аппарат загружают сразу пачку, и он быстро (со скоростью 600-1500 шт. в минуту) слистывает купюры одну за другой, аккуратно укладывая пересчитанную пачку в выходной карман.Показать анимациюРис. 19. Принцип работы счетчика банкнотЕсть два основных способа слистнуть пачку.Механический. Перед трактом находятся ролики из «липкой» резины, и ролики из плотной резины. В самом простом случае, пачка расположена над роликами которые заталкивают нижнюю купюру в тракт, а чтобы купюры входили по одной, над входом в тракт расположены ролики, вращающиеся в обратную сторону, которые выталкивают лишние купюры обратно.Вакумный. Пачка прижимается к перфорированой ленте, под ней создается пониженное давление, и купюры прилипают к ленте, которая утаскивает их в тракт.Стоит сказать, что проверка подлинности есть далеко не во всех счетчиках. Простейшие модели не умеют ничего, кроме механического пересчета и отбраковки слипшихся банкнот или листов, которые сильно отличаются по размеру (например, обрывков).Счетчики классом повыше уже имеют датчики УФ и магнитных меток. Еще более дорогие машины осуществляют полное сканирование банкноты в ИК диапазоне. С этого момента счетчик уже способен определять валюту и номинал проходящих через него купюр. Можно пересчитать пачку денег и сразу узнать, сколько в ней банкнот каждого номинала, и какова общая сумма.Счетчики высшего класса ведут сканирование в видимом, ИК-, УФ-диапазонах, считывают магнитные метки, а также измеряют толщину бумаги механическим или ёмкостным методом. Последняя особенность позволяет отличать новые банкноты от изношенных, порванных и склееных. Таким образом, счетчик может вести сортировку по валюте, номиналу, ориентации, подлинности и изношенности.Такие счетчики, как правило, имеют два приемных кармана: основной и отбраковочный, что позволяет не прерывать процесс счета при обнаружении подозрительной банкноты.Показать анимациюРис. 20. Принцип работы двухкарманного счетчика-сортировщика банкнотОт двухкарманного счетчика ведут свою родословную многокарманные аппараты, чаще называемые сортировщиками банкнот. Самые простые из них выглядят как обычный настольный счетчик, слегка «раздутый» в высоту, с несколькими приемными карманами. Рис. 21. Сортировщик Kisan K500 Pro. Изображение с сайта kisane.ruА в высшем ценовом сегменте присутствуют настоящие монстры: машины, занимающие целый стол (а то и несколько), с десятком карманов, с возможностью наращивания, с дополнительными модулями для упаковки денег, с валидацией всего, что только можно, с преферансом и поэтессами.Видеопрезентация счетно-сортирующей машины JetScan MPS 4200КупюроприемникиКупюроприемники используются в торговых и игровых автоматах, платежных терминалах, банкоматах и прочих системах самообслуживания. Они обеспечивают прием наличности, определение номинала, валидацию банкнот и укладку в запираемые кассеты. Требования к автономным валидаторам достаточно высоки: почти всегда применяется двусторонний многоканальный оптический сканер, УФ и магнитные детекторы. Купюроприемники оборудуются различными системами, которые препятствуют воздействию на механизм и обману. Например, детектор инородных предметов замечает наличие лески или скотча, за которые можно вытянуть банкноту обратно. Для защиты от вандализма купюроприемники могут снабжаться защитными шторками (шаттерами).Механизмы приема денег делятся на покупюрные и пачечные. Первые «едят» по одной банкноте, подача идет узкой стороной листа вперед. Пачечные механизмы принимают сразу пачку банкнот, пересчитывают, определяют номиналы и валидируют. Такие купюроприемники устанавливают преимущественно на банкоматы, хотя существуют насадки на обычные покупюрные приемники, позволяющие брать сразу пачку (до 20 банкнот), а затем подавать ее внутрь по одному листу.Рис. 22. Купюроприемник JCM UBA в сборе с кассетой и отдельно. Изображение с сайта jcm-express2000.ruВнесенные банкноты после прохода через валидатор попадают в депонентное отделение (Escrow). Объем этого отделения может различаться: от 1 купюры до всей внесенной пачки. В случае отмены операции банкноты из escrow возвращаются. Если операция подтверждена, банкноты укладываются в кассету (Cashbox) — запираемый и опечатанный ящик. Достать деньги из кассеты механизм купюроприемника уже не может. Объем кассет может быть от нескольких сотен до нескольких тысяч банкнот. Сортировка по номиналам обычно не проводится, в кассету пихаются все купюры подряд.Отдельно стоит упомянуть рециркуляторы — устройства, способные как принимать, так и выдавать наличность. Не следует путать рециркулятор с парой раздельных устройств: приемник + диспенсер. В последнем случае используются отдельные кассеты для приема и для выдачи, и внесенные купюры могут попасть на выдачу только через инкассацию. Рециркулятор принимает деньги, сортирует по номиналам и укладывает в отдельные кассеты. Из этих же кассет он может произвести выдачу купюр или, например, отсчитать сдачу. Требования к валидаторам в рециркулирующих системах самые жесткие. Например, испытания в Центробанке РФ прошли не более двух десятков моделей.[6]Видеопрезентация рециркулятора CashCode B2BАлгоритмы проверкиПрежде чем рассказывать о применяемых алгоритмах, стоит заметить, что «железо» в различных классах устройств очень разное (— Спасибо, Капитан Очевидность!). Простейшие детекторы работают на 8/16-битных контроллерах, и реализовать в них сложные проверки или обработку больших массивов данных затруднительно. Детекторы высокого уровня, купюроприемники и счетчики банкнот, как правило, управляются ARM-контроллерами или чем-нибудь аналогичным. Для ускорения отдельных операций (обработка изображения, частотные преобразования) применяют DSP-сопроцессоры и FPGA. Производители больших банковских сортировщиков обычно ставят внутрь какой-нибудь промышленный компьютер под управлением Win CE, Linux или QNX.Для упрощения работы ПО, данные со всех сканеров (видимый, УФ, ИК, магнитный) объединяются в один многоканальный файл. Если необходимо, производится выравнивание и нормализация изображения.Обработка данных ведется в три этапа:Определение валюты и номинала.Проверка подлинности.Если требуется, определение износа (ветхости) банкноты.Производители банковской техники тщательно охраняют свои алгоритмы и ноу-хау, так что придется рассказать только наиболее общие моменты. Естественно, простое попиксельное сравнение скана банкноты с образцом не даст ничего хорошего, свой вклад вносят и шумы, и неравномерность подачи, и разная степень изношенности банкнот, и еще куча всего.Большинство алгоритмов валидации основаны на проверке отдельных характерных признаков, которые обладают хорошей повторяемостью. Например, для анализа выделяют несколько тщательно выбранных зон скана и сравнивают параметры изображения в этих зонах с образцами и друг с другом. В качестве проверяемых параметров могут выступать:общая яркость и контрастность зоныхарактеристики гистограммы изображениястатистические моментымоменты изображениякорреляционные функциичастотные характеристики, полученные путем Фурье — и вейвлет-преобразованийНа первом этапе при помощи наиболее простых и быстрых алгоритмов валидатор определяет, что перед ним за банкнота: какая валюта и какой номинал. То есть за короткое время отсекается большинство вариантов, чем эта банкнота являться не может. Если по итогам отбора не осталось претендентов, купюра отбраковывается как нераспознанная. После того, как выбран наиболее вероятный претендент (или несколько, зависит от реализации), начинается собственно валидация. Система проверяет набор признаков, характерных для конкретного номинала конкретной валюты. Существуют признаки «жесткие», первое же несовпадение которых отбраковывает банкноту, и «мягкие», которые приводят к отбраковке «по сумме очков».Пороги совпадения/несовпадения обычно настраивают так, чтобы исключить ошибки первого рода — ложное прохождение поддельной купюры. При этом частота ошибок второго рода (ложный отказ валидной банкноты) получается от 0,3% (для счетчиков) до 6% (для автоматических детекторов и купюроприемников).Описание всех проверяемых признаков хранится в базе валют: отдельная запись для каждого номинала и каждой модификации банкноты. Деньги разных годов выпуска похожи только внешне, но расположение защитных признаков у них совершенно разное. Бывают одновалютные и мультивалютные исполнения валидаторов. В последнем случае валюта может выбираться пользователем или определяться автоматически.Современные валидаторы поддерживают обновление баз через сеть, при подключении к компьютеру или с флеш-карты. Путем обновления можно добавить поддержку других валют, новых модификаций банкнот и улучшить распознавание старых. Для предотвращения анализа и реверс-инжениринга алгоритмов посторонними лицами, базы передаются и хранятся на приборе в зашифрованном виде.Перспективы и прогнозыОтслеживание номеровМногие счетно-сортирующие машины банковского уровня обладают функцией распознавания номеров банкнот. В большинстве случаев эта возможность не используется. По крайней мере, единой системы отслеживания номеров пока не существует. Несколько лет назад Центробанк России начал эксперимент по регистрации номеров проходящей через него наличности.[7] В опытном порядке оборудование для считывания номеров устанавливается в расчетно-кассовых центрах.[8]Отслеживание номеров преследует три основные цели:борьба с подделкамирасследование кражоценка скорости износа денегПока нет и не планируется обязательное оснащение коммерческих банков регистраторами. Но когда такая система начнет работать повсеместно, это будет означать, фактически, конец анонимности наличных денег. Можно будет отследить перемещения каждой отдельной банкноты, появятся «черные списки» номеров, например, украденных банкнот. Подобно кредитным картам, наличные деньги можно будет «заблокировать» по звонку в банк.RFID-меткиЕвропейский Центральный Банк ведет исследования в области применения радиочастотных меток (RFID).[9] Аналогичные исследования ведутся и в Японии. Метки планируется внедрять в банкноты в первую очередь как степень защиты от подделок. Действительно, современные криптографические RFID-метки достаточно хорошо защищены от взлома и копирования. Технология пока упирается в относительно высокую стоимость меток (выгодно оснащать ими только купюры крупных номиналов) и их низкую живучесть.Повсеместная RFID-изация банкнот, теоретически, позволит организовать глобальную систему отслеживания наличных денег, подобно распознаванию номеров, и даже более эффективную. Однако, возможны всякие побочные эффекты, вроде воров-карманников, которые будут выбирать жертву при помощи портативных сканеров.[10] Параноики уже запаслись шапочками кошельками из фольги.Невоспроизводимые метки и криптографические деньгиВсе современные методы защиты от подделок основаны на том, что секретна технология изготовления метки. То есть банк знает, как напечатать защищенную купюру, а фальшивомонетчик — не знает. Такая система, как всякая, основанная на Security through obscurity, не может считаться на 100% надежной. Случаются утечки информации, злоумышленники находят способы подделки все более сложных меток.Существует принципиально другой подход, основанный на использовании невоспроизводимых меток. То есть каждый экземпляр метки уникален в силу своей природы, изготовить дубликат не может даже сам эмитент. Если метка будет нести в себе какую-либо информацию, то по ней можно идентифицировать каждую банкноту. Достаточно теперь создать базу, хранящую идентификаторы всех подлинных банкнот. Кто не в базе — тот подделка.Еще удобнее применение асимметричной криптографии. После изготовления метки банк считывает ее, шифрует своим закрытым ключом и печатает на банкноте в виде любого машиночитаемого сообщения (например, штрих-кода или магнитной записи). Для валидации достаточно расшифровать идентификатор при помощи публичного ключа и сравнить с данными метки. Дубликат банкноты изготовить нельзя в силу невоспроизводимости метки, а выпустить другую невозможно без знания приватного ключа банка.Основная сложность этой технологии — метка должна создаваться на основе случайных процессов, но в то же время должна надежно и повторяемо считываться. Один из возможных механизмов — использование картин спекл-рассеяния. В качестве метки используется взвесь стеклянных шариков в эпоксидном полимере[16] или даже просто поверхность бумаги.[17] В настоящее время данная технология применяется для защиты предметов искусства, но можно ожидать и скорого начала использования для банкнот.Квантовые деньгиДальнейшим развитием идеи невоспроизводимых меток являются квантовые деньги. Метка представляет собой набор частиц в определенных квантовых состояниях. Клонирование метки будет невозможным в силу фундаментальных законов квантовой механики (Теорема о запрете клонирования).На сегодняшний день такая защита относится к области научной фантастики. Пока не найдены способы длительного надежного хранения квантовых состояний даже в лабораторных условиях, не говоря уже о внедрении в банкноты. Кроме того, недавние исследования в области слабых измерений ставят под вопрос саму невозможность копирования квантовых меток. P.S.:На картинке для привлечения внимания — Porter Counterfeit Detector, устройство для обнаружения подделок, выпускавшееся в 1920-40х годах в США. Под стекло помещали проверяемую банкноту вместе с заведомо подлинной, и при помощи линеек и масштабной сетки проводили сличение. Более подробное описание и другие фотографииАвтор выражает благодарность хабраюзеру ice2heart за ценные комментарии и дополнения.Список использованной литературыcbr.ru — описание признаков подлинности RUBecb.int — описание признаков подлинности EURnewmoney.gov — описание признаков подлинности USDbanknot-spb.ru — спецэлемент «М»banknot-spb.ru — спецэлемент «И»cbr.ru — Список программно-технических средств, функционирующих в рециркуляционном режиме, прошедших испытание в Банке Россииkiosks.ru — Банк России будет отслеживать путь каждой выпущенной купюрыizvestia.ru — Центробанк ставит на контроль банкнотыfleur-de-coin.com — RFID banknoteshabrahabr.ru — Учёные встроили радиочипы в бумагуПатент US 7067824 — Method, device and security system, all for authenticating a markingПатент RU 2344046 — Способ идентификации ценного изделия с защитным элементом люминесцентного типаПатент RU 2344218 — Способ определения подлинности изделия, защищенного от подделки, и устройство для определения подлинности изделия, защищенного от подделкиПатент RU 2276409 — Способ защиты от подделки и контроля подлинности ценных изделийПатент RU 2357866 — Способ защиты документов, ценных бумаг или изделий с помощью наноалмазов с активными nv центрамиПатент US 6584214 — Identification and verification using complex, three-dimensional structural featuresПатент RU 2385492 — Способы, изделия и устройства для проверки подлинности"
    },
    "doc_68": {
        "url": "https://habr.com/ru/post/87060/",
        "title": "Шпионские истории. «Камбала»",
        "text": "Недавно на Хабре мне попался очень интересный пост. Заинтересовал он меня настолько, что захотелось почитать немного поподробнее, чем изложил автор. Так вот, благодаря моему скромному желанию и огромному везению мне удалось поговорить с человеком, который сталкивался с этим устройством вплотную. На тот момент он занимал высокую должность в Гостехкомиссии СССР, и непосредственно его команда изучала это устройство в Министерстве Обороны. Поэтому хотелось бы начать сначала, только со всеми техническими характеристиками и без ошибок.На Камчатке у нас находится туева хуча ракет. Но их надо как-то связать с Москвой. По транссибу до Владивостока у нас идет магистральный кабель. Соответственно проще всего было проложить подводный кабель от Владивостока до Камчатки.Кабель был бронированный, кабель был экранированный, передаваемая информация шифровалась. Однако не было зашумления. Так что, подключившись напрямую к кабелю информацию можно было перехватить, а позже расшифровать.Для этой цели в США был создан проект «Кокон» и в рамках него разработано чудо-юдо устройство. Мы его окрестили «Устройство съема информации с подводных бронированных кабельных линий связи «Камбала»».Устройство«Камбала» была выполнена в виде стального цилиндра длинной более 5 м и диаметром около 1200 мм. В герметически закрытой трубе было смонтировано несколько тонн электронного оборудования для приема, усиления и демодуляции снятых с кабеля сигналов, а также ядерный (плутониевый) источник питания. Расчетный срок работы составлял десятки лет.Устройство также включало в себя специальный индуционный датчик, который снимал информацию непосредственно с кабеля. Причем не только с обычного кабеля, но и защищенного двойной броней из стальной ленты и стальной проволки.Сигналы с датчика предварительно усиливаются антенным усилителем, а затем направляются для демодуляции, выделения отдельных разговоров и записи на магнитофоны.ЗаписьЗапись подслушиваемых разговоров осуществляется 60 автоматически работающими магнитофонами, которые при наличии сигналов в кабеле включаются, при их отсутствии останавливаются. Каждый магнитофон рассчитан на 150 часов записи. Общий объем записи подслушанных разговоров составляет около 3000 часов.ПередачаК моменту израсходования пленки специально обученные люди подводный пловец находит устройство прослушивания по гидроакустическому маячку, установленному на контейнере, снимает с кабеля индуционный датчик-захват, предварительный антенный усилитель снятых сигналов и доставляет устройство в специально оборудованную подводную лодку. Это устройство в воде весит чуть более 100 кг. В лодке осуществляется замена магнитофонов, после чего устройство вновь устанавливается на линию связи.Для практического применения такой системы необходима специальная подводная лодка, оборудованная устройствами для поиска подводных кабелей. Причем данные устройства крепились вне лодки и работали при этом на очень больших глубинах.ИтогНо, как говорится, не было бы счастья, да несчастье помогло. В 88-м наши рыбаки, которые ничего не знали ни про кабель, ни про «Камбалу», случайно повредили кабель. А уже во время устранения повреждения ее и нашли. Ее отправили в Москву, где ее тщательно изучали всевозможные специалисты, в том числе и тот, кто мне про «Камбалу» все поведал.P.S. Во-первых, простите за ужасное качество картинок – какие были. Во-вторых, если статья понравится, напишу про сухопутную версию — «Крота» — и еще про разные пряники по мелочи."
    },
    "doc_69": {
        "url": "https://habr.com/ru/post/51544/",
        "title": "Я уволился",
        "text": "И не потому, что меня не пугает кризис — предложение на рынке труда IT сократились в разыМеня не сократили — мало того уверили что сокращений не будетЗарплату не урезали — я мог бы гордится размером своей зарплаты и до кризисаИ не потому что есть другой источник доходов — нет, жена — домохозяйкаЯ не выиграл в лотерею — наоборот, денег, с учетом необходимости оплаты московской квартиры, хватит на пару недельЭто не было необдуманным решением — я начал задумываться об увольнении месяца три назадЯ нашел лучшее место работы? Нет, пока поиском толком и не занимался.Я сумасшедший? Нет. Просто мне надоело гнать фуфло. Профессиональная гордость выше кризисов, денег и статусов. Я хочу творить, а не выполнять меняющиеся каждый день требования богатеньких профанов, нашедших себе новенькую гламурную игрушку, в виде изначально перспективного проекта. Мне надоело терпеть тупость и непрофессиональность. Мне надоело смотреть как неглупые люди прогибаются под аргументом денег, и страхом кризиса. И пусть коллеги, так же признающие все это, сидят и получают бабло и дальше. Я так не могу. Несмотря на кризис я свободен, я волен как и раньше заниматься тем, что меня увлекает, тем, что интересно, тем, что захватывающе, тем, что заставляет задержаться на работе лишний час-два, тем, что заставляет вскакивать ночью с мыслью «Эврика!». И ни какой кризис не заставит меня сменить приоритеты в пользу бабла!Я идеалист? Может быть. Но я думаю таким и должен всегда оставаться программист."
    },
    "doc_70": {
        "url": "https://habr.com/ru/post/178339/",
        "title": "Разработчики игры Game Dev Tycoon подшутили над пиратами",
        "text": "Что будет, если игроки скачают нелицензионную копию симулятора игровой студии, а в игре столкнутся с пиратством — да так, что играть станет невозможно? Разработчики новой игры Game Dev Tycoon не удержались от того, чтобы провести эксперимент. Вместе с платной версией своей игры они создали «крякнутую» пиратскую версию с небольшими изменениями.Как говорит один из авторов, уже через минуту после регистрации на трекере игру начали активно качать.Пользователей «крякнутой» версии в игре ждал неприятный сюрприз. После первоначального развития бизнеса и выпуска игры они неожиданно сталкивались с большим уровнем пиратства, который неизбежно приводил фирму к банкротству.В тот же день на разных игровых форумах появились сообщения незадачливых игроков с просьбами помочь, как продвинуться дальше в игре. Они искренне жаловались на высокий уровень пиратства, с которым «ничего невозможно поделать». Мол, игра получает высокие оценки, но её «всё равно воруют и воруют». Один из пользователей спрашивал, можно ли применить какие-то схемы DRM, чтобы бороться с этой напастью.Разработчики говорят, что смотреть на такие отзывы игроков без слёз было невозможно. Они с сожалением приводят график распространения лицензионных и нелицензионных копий Game Dev Tycoon, на которую они потратили год работы. Статистика собирается анонимно через интернет, в крякнутой и лицензионной версии указаны разные ID, так что их можно отличить друг от друга.Лицензионную версию установили 214 пользователей, а крякнутую — 3104 человека, то есть уровень пиратства составляет 93,6%."
    },
    "doc_71": {
        "url": "https://habr.com/ru/post/476034/",
        "title": "Самый беззащитный — это Сапсан",
        "text": "Был я как-то на ZeroNights, это очередная конференция по информационной безопасности, которая в этом году была совсем шлаком.Там я хотел как всегда что-либо поломать, получить за это приз, и т.д., но как я выяснил — интересных задач там не было, и пришлось развлекать себя самому.Что происходило там — особой смысловой нагрузки не несёт, а вот что началось потом — это что-то.Как закончилась конференция, все её участники взяли билеты на сапсан, последний сапсан Санкт-Петербург — Москва выезжает в 21:00, и я на него успевал…Занял место в СапсанеЯ сел на своё место в вагоне, думал, что же делать, и начал читать книгу, как вдруг ко мне подошёл мужчина и попросил поменяться местами, ибо он едет со своей девушкой. Я поменялся, ибо как говорится дари людям добро — и оно к тебе вернётся.Сидел читал книгу, и понял что блин, я же так ничего интересного не отломал, сяду-ка я за свои пентест задачи, которые остались не выполненные. Решил зайти на почту, а интернет не ловило, по пути было часто покрытие 2G, которое было УЖАСНЫМ.Я решил подключиться к местному WiFi сапсана.Делал я это впервые!Ну так вот, он попросил меня ввести номер вагона, места и последние 4 цифры паспорта для авторизации, и тут меня уже немного заинтересовало, что же я могу сделать с этой сеткой Сапсана, но всё же в приоритете были пентест задачи по работе. Захожу на яндекс почту, и вижу такую картину:супер медленный интернет не грузил даже почтуИ я подумал, да и хрен бы с ним, придётся читать книгу… И тут вспомнил что вызвало интерес у меня, а это авторизация в WiFi по цифрам паспорта и номере места с вагоном. Значит Сапсан у себя локально хранит данные о всех пассажирах, кто на каком месте. А что если проверить, насколько трудно к ней получить доступ. Мне понадобился только NMAP и пару публичных эксплоитов. Данные для авторизации в системах я описывать не буду, дабы не обидеть РЖД (на всех сапсанах данные для авторизации одинаковые).Как я ломал СапсанЗапускаю nmap с параметрами -v -A sapsan.center, и смотрю какие порты открыты у них.И понимаю, что очень много сервисов висит. Все порты я раскрывать не буду, но многое видно на скриншотах :-) Думаю, замазывать не стоит, ибо такой же взлом займёт у вас не более 20 минут (20 минут только из-за того, что их сервер лагает).Ну и я пошёл гулять по сервисам, которые стоят там. И не долго думая, я понял что у них один сервер на всё, и там тупо стоит докер. Добрался до cAdvisor, и офигел.С оперативной памятью у них на сервере всё плохо, мб по этому и лагает? Давайте посмотрим что у них вообще есть, какие контейнеры работают, какие процессы запущены и т.д.Весело дотнет под центосью запускать, нет бы винду поставить рядом, а то как я помню Net Core под линью оперативки жрёт поболее, чем под виндой. Дальше я пошёл изучать содержимое контейнеров, и некоторыми публичными CVE залился в систему. (пароли у них простые, а доступ по ssh к руту открыт).На диске у них хранилось много хорошей инфы, и в базе данных (mysql) у них лежали все пассажиры текущего и прошлых рейсов. Также оттуда в сеть РЖД есть впн. Если захотите — найдёте её там сами.Но больше всех меня убило то, что РЖД даже не потратилось на сертификат, и поставило let's encrypt на свои домены для HTTPSВывод из этого всего:Скриншотов я много не делал, ибо не думал писать статью. Но я несколько лет назад уже обращался в РЖД с уязвимостью, и они побрили меня с выплатой и просто исправили её, так что отношение у меня к ним не ахти. Хоть и личных данных я не публикую. Всё настроено ужасно, одинаковые пароли везде — признак хорошего админа, и хранение данных в текстовых документах тоже гуд. Особенно задачи в кроне. РЖД, поправьте всё, через пару месяцев снова проверю.Все, кто подключен к их WiFi подвержены снифу трафика, ибо всё идёт через их прокси, можно легко собирать HTTP трафик, но если чуть постараться, то и HTTPS (проверенно). К данным пассажиров рейса получить доступ не составляет труда, и занимает это от силы 20 минут.Надеюсь, вам понравилось моё чтиво, хоть я и не умею писать статьи. По фану мб что-нибудь ещё потом отломаю. Всем добра, и отломов по фану."
    },
    "doc_72": {
        "url": "https://habr.com/ru/post/56923/",
        "title": "Безвыходных ситуаций не бывает",
        "text": "Совсем недавно пользователь ilzarka написал в своем блоге про интересный вирус, блокирующий Windows:ilzarka.habrahabr.ru/blog/56869Напомню еще раз: вирус выводит на экран окошко с предложением отправить смс на какой-то номер, чтобы разблокировать Windows. Ctrl + Alt + Del, Alt + Tab и прочие сочетания, которые должны свернуть/закрыть/переключить на другую программу естественно блокируются. Перезагрузка даже в безопасном режиме заканчивается этим же окошком.Я сам сталкивался с этим вирусом (каюсь, сидел без антивируса). Первая мысль была загрузиться с Live-CD. Но его у меня не было (каюсь снова, лайв-сиди всегда нужно иметь под рукой). Помедитировав пять минут возле компьютера, я уж подумал что ситуация безвыходная. Но…Что же делать? Я перепробовал все известные сочетания клавиш чтобы избавиться от этого окна, лежащего поверх всего — все блокировалось. Я совсем было отчаялся, но вспомнил про надоедливую виндовскую хрень, которая раздражала меня, когда я играл в Counter Strike. Если зажать шифт на 8 секунд, появится вот такое окошко:Попробовал — работает. Хоть какое-то разнообразие. Надежды, что от нее будет толк было мало, но я нажал кнопку «параметры» и начал изучать все вкладки:Ничего такого, что могло бы помочь я не нашел и снова впал в отчаяние. Я потянулся уже к красному крестику, чтобы закрыть, но увидел рядом с ним кнопку с вопросом. Ткнул в нее и навел на одну из кнопочку окна настроек, вылезло окошко с помощью:Щелчок правой кнопкой мыши на этом желтом квадрате неожиданно показал всплывающее меню. Я и не знал, что такое есть:Копировать мне не нужно, но я нажал «печать раздела». Бинго! Новое окошко:Настройка печати! Интересно, сколько людей пользовались этой функцией Windows? Я в тот момент был безумно благодарен майкрософт, за то, что они напихали в свою операционную систему столько сомнительного функционала. Печатать справку я, конечно, не стал, но принялся досконально изучать новое окошко. Я чувствовал себя Шерлоком Холмсом. После недолгих исследований, я нажал на кнопку «настройки» и увидел знакомую менюшку настройки принтера с кучей закладок:Шерлок тщательно обследовал каждый пункт и снова начал впадать в отчаяние. Что же выручило в этот раз? Снова справка! Нажав кнопку справка, я сдвинулся еще на шаг к победе над вирусом:Вчитываться в занимательные тексты я не стал, мне сразу бросилась в глаза стандартная виндовская панель: Файл, Правка итд.Затаив дыхание, я нажал Файл -> Открыть и вот он, какой-никакой, но проводник:Я хотел было найти желанный firefox.exe чтобы почитать в интернете про этот вирус, но снова облом: этот проводник показывал только файлы справки, а выпадающее меню «тип файлов» не предлагало никаких других альтернатив. Помогла снова винда. В выпадающем меню к любой папке был пункт «проводник», который открывал стандартный виндовский проводник, bingo!Стандартным проводником я без проблем нашел браузер, нагуглил информации по вирусу: оказывается достаточно удалить файлы blocker.exe и blocker.bin. Удалив их тем же проводником, я перезагрузился и нормально зашел в винду.Мораль сей басни такова:1. Не пренебрегайте антивирусом, разоритесь на лицензию, она не такая уж дорогая для домашних компов.2. Храните под рукой лайв-сиди, а не ждите пока грянет гром (как я)3. Естественно не отсылайте никаких смс4. Не отчаивайтесь никогда, выход есть :-)"
    },
    "doc_73": {
        "url": "https://habr.com/ru/post/483156/",
        "title": "Ставим котю на ноги",
        "text": "Эта реальная история о спасении кошки, которая при обморожении потеряла все четыре лапы, хвост, уши и, несмотря на это, умудрилась выжить. И не только выжить, а попасть в руки не равнодушных людей, которые помогли зверю в буквальном смысле встать на лапы. Лапы, правда, в виде протезов, сделанных по самым современным технологиям. Как это было и почему об этой истории я решил написать на Хабре — читайте под катом! Кошка Дымка и немного ветеринарииПрозаичная история домашней кошке-потеряшке по кличке Дымка, которая будучи плохо приспособленной к жизни вне дома скорее всего бы сгинула вовсе, но нашелся неравнодушный человек, который спас зверя. Однако тяжелые повреждения после обморожения привели к потере всех лап, что для такого активного животного как кошка, по сути, означает гибель. Дымка могла только ползать, плохо питалась, так как не могла принять необходимую для этого позу. Ветеринары развели руками и предлагали единственно гуманный способ облегчить страдания зверя. Усыпить. Но новая хозяйка была настроена решительно. Знакомые посоветовали ей обратиться к самому известному в Новосибирске ветеринарному специалисту Сергею Горшкову, который славится в регионе тем, что берется за самые сложные случаи, к которым, без сомнения, относился случай с кошкой Дымка. Ветеринарный хирург взялся за этот случай, так как некоторое время назад он впервые в мире уже поставил на все четыре лапы кота, о чем даже вышла развернутая научная статья в одном из профильных научных журналов. Опыт, полученный специалистом, помог и в этом случае. Однако, были свои трудности. Животные, как впрочем и люди, все разные. Особенности у каждого свои. Кости кошек тонкие, и требуется очень детальная и точная работа по моделированию будущего протеза. Основой для моделирования стали рентгеновские снимки и опыт специалиста, который провел анализ наиболее подходящей конфигурации протеза с учетом анатомического строения зверя. В результате долгого прототипирования и подбора лучшего из вариантов, был напечатан образец будущего протеза с использованием 3D принтера. Специальный принтер напечатал протез из титана, который впоследствии был имплантирован кошке. Протез протезу рознь Операция продлилась более пяти часов и прошла удачно. Но этому успеху предшествовал ещё один важный этап. В анонсе статьи я обещал объяснить, почему я пишу эту статью на Хабре. Пришло время. Оказывается, хоть и титан является биосовместимым материалом, но есть важные особенности. Необходимы специальные сплавы и покрытия на титан, чтобы не начался процесс отторжения протеза, а костная ткань проникла в толщу протеза и закрепилась в нем. Для этого на подобные изделия необходимо нанести специальные покрытия.  Сама структура протеза достаточно пористая, что позволяет костной ткани проникнуть вглубь. Но этого недостаточно. Необходимо нанести специальное биосовместимое покрытие, о котором поговорим подробнее. На металлы, поверхность которых защищена оксидами, такие как титан, алюминий и его сплавы, можно нанести различные покрытия методом микродугового оксидирования. Об этой технологии я писал в своей статье на Хабре несколько лет назад. Метод позволяет нанести оксидные покрытия разных цветов и оттенков с защитными свойствами. Но в нашем случае необходимо было нанести специальное биосовместимое пористое кальций-фосфатное покрытие, которое обеспечивает практически 100-процентную приживаемость протезов. Такие покрытия и технологии его нанесения были разработаны в Томском политехническом университете научной группой под руководством С.И. Твердохлебова. Сергей Иванович и его коллеги разработали специальный химический состав электролита и режимы микродуговой обработки титана, которые позволили получить высококачественные кальций-фосфатное покрытия на его поверхности. В результате протезы были покрыты полностью биосовместимой пленкой с высокой адгезией. Только после этой обработки протезы были имплантированы кошке Дымке. Источник микродугового оксидированияПроцесс нанесения покрытия упрощенно можно объяснить следующим образом. В металлическую ванну из титана, которая является катодом, погружается деталь, на которую необходимо нанести покрытие. Деталь является анодом.  Так как проводимость раствора очень высока, то при подаче электрического тока происходит, по сути, короткое замыкание и процесс останавливается даже не начавшись. Здесь важно вкачать большой (десятки килоампер) ток в начальный момент, чтобы на поверхности анода образовалась взрывная паровая прослойка, некий двойной слой, который не позволяет накоротко замкнуться току. В этом слое образуются микродуги, которые и обеспечивают процесс микродуговой обработки.  Деталь буквально светится микродугами, которые со временем становятся всё менее заметными, так как на детали нарастает слой диэлектрического покрытия, которое уже не пропускает ток. Казалось бы, процесс прост, но это кажущаяся простота. Создать условия для возникновения двойного слоя сложно, так как требуется источник огромной мощности из-за больших стартовых токов процесса. Медленное погружение детали тоже не спасает положение, да и не безопасно. Выход один — создать импульсный источник тока, позволяющий формировать надежный двойной слой между полностью погруженной в раствор деталью и электролитом. При этом форма импульса напряжения и тока оказывается очень важна для обеспечения будущих характеристик покрытия, а суммарный заряд, прошедший через электрическую цепь, определяет необходимую толщину покрытия, и как следствие, его эксплуатационные характеристики и повторяемость процесса нанесения, что является важнейшим требованием для промышленного применения технологии. Таким образом, создание импульсного, сильноточного с контролем характеристик выходного сигнала, источника — вот та задача, которую необходимо было решить. С учетом того, что это импульсная сильноточная электроника, в которой коммутируются токи до нескольких килоампер (при напряжении 300-500 Вольт), то обеспечение помехозащищенности, надежности и безопасности тоже являлось одним из требований. Вот именно эти задачи решались группой разработчиков, которым предстояло сделать источник, а я возглавлял эту работу как генеральный конструктор. НИОКР в чистом виде с составлением «взрослого» технического задания, моделированием, конструированием, прототипированием, а закончилась работа доработанным опытным образцом и конструкторской документацией по ЕСКД к нему. Источник получился интересным, поговорим о нем поподробней. Чтобы обеспечить старт процесса МДО, необходимо за очень короткое время вкачать в нагрузку большой стартовый ток, что возможно сделать только используя батарею высоковольтных конденсаторов. Таких батарей две (КБ1 и КБ2). Заряд конденсаторных батарей осуществляет мощный 20 КВт источник постоянного тока ИП. Накопленный в конденсаторных батареях заряд с помощью двухканального блока формирования выходного импульса (БФВИ1 и БФВИ2) и контроллера К подается в нагрузку. Почему используется две конденсаторные батареи? Это связано с тем, что в системе необходимо коммутировать ток более 2000 А на частотах до 400 Гц, что требует выбора соответствующего силового ключа. Сильноточная электроника не из дешевых, поэтому подходящий прибор для коммутации таких токов на указанных режимах стоит порядка 3-4 тысяч долларов, и изготавливается практически только под заказ. К тому же ресурс такого прибора ограничен несколькими сотнями часов непрерывной работы. Это никуда не годится. Поэтому было принято решение необходимую выходную мощность разделить на два канала, а коммутацию осуществить двумя силовыми ключами МТКИ-1200-12КН.Эти приборы хорошо себя зарекомендовали, да и цена их вполне приемлема. Ресурс непрерывной работы (на уровне 0,8 предельных режимов) составляет несколько тысяч часов. Бросок тока в начальный момент зарядки конденсаторных батарей может составлять десятки кА, поэтому в цепи питания конденсаторных батарей ставятся два мощных дросселя. Вообще силовая электроника вещь особенная. Здесь все узлы и детали большие и при изготовлении часто используется труд слесарей и токарей. К примеру, дроссель выглядит в виде блока, состоящего из нескольких метров медной фольги, закрученной на каркасе с зазорами, позволяющими осуществлять его охлаждение с помощью вентилятора. Таким образом, вся установка укрупненно состоит из трёх блоков — источника питания, сильноточного коммутатора (который содержит конденсаторы, силовые ключи, дроссели и т.п.) и блока электроники, который всем этим управляет, формирует необходимые формы импульсов, следит за всеми режимами работы. Вся конструкция изготавливается в промышленной стойке, охлаждение осуществляет чиллер. Все собралось в таком вот виде. Выбор источника питания конденсаторных батарей — важнейший вопрос, который решался в этой работе. Источник питания должен быть отвечать ряду жестких требований, иметь надежную систему защиты и систему управления, а также быть помехозащищенным, так как при коммутации больших токов в частотном режиме возникают различные помехи. Выбор пал на источники Научно-технического центра «Системы гарантированного электропитания», г. Новосибирск. Отличная компания, которая разрабатывает и производит различное оборудование для подобных задач. Порадовало то, что разработчики шли на встречу даже самым неожиданным нашим просьбам и запросам. Так, в частности, нам требовалось более детально знать конфигурацию некоторых узлов их оборудования с целью адаптации наших управляющих протоколов, что потребовало разработки новой прошивки и ребята сделали её в самые короткие сроки. Компания серьезно относится к составлению документации, техподдержка работает безукоризненно. Редкий пример добротного бизнеса, который стал нашим надежным партнером. Высоковольтный коммутатор и всю управляющую электронику мы уже делали сами. Управление проектомЧитатели могут задать вопрос о том, как управлялся проект и сколько времени ушло на его выполнение. Поговорим немного об этом. Вообще для подобного рода проектов лучше всего придерживаться ГОСТ Р 15.301-2016 «Система разработки и постановки продукции на производство (СРПП). Продукция производственно-технического назначения. Порядок разработки и постановки продукции на производство». Следуя рекомендациям ГОСТа легко правильно и эффективно выполнить проект, при условии, что все разработчики понимают и следуют его идеологии. Задача же координатора проекта (главного конструктора) четко поставить задачи и контролировать их выполнения на всем протяжении проекта. Работу выполнила группа из четырех основных разработчиков и инженера-техника (руки), которые были подписаны в сервисе Notion в одну рабочую группу. Сервис, подобный Notion не единственный для групповой работы команд разработчиков. Я использую его – мне удобно. Три потока «Разработка и прототипирование», «Необходимые дополнительные работы» и «Закупки» заполняются по мере поступления задач, обозначаются сроки и ответственные исполнители. При выполнении задания, оно отправляется в архив. Вся документация и необходимые документы хранятся в облаке с возможностью доступа на любом из устройств. Один раз в неделю (как правило, по четвергам) — общий сбор, обсуждение текущих дел. Жесткое ограничение времени встречи — 45 минут. Самый важный и необходимый элемент взаимодействия команды. Каждый знает, что проект важный, на встрече все будут докладывать свои результаты, надо подготовиться, доделать, что не успеваешь и не ударить перед всеми в грязь лицом. Я, как генеральный конструктор, здесь выступаю подчас авторитетным преподавателем, принимающим домашнее задание своих студентов. В хорошем смысле) Что касается сроков. Сроки сжатые. При этом каждый из разработчиков знает конечные сроки сдачи проекта. С учетом того, что задача была поставлена практически с чистого листа, срок выполнения проекта до первых успешных испытаний составил порядка 10 месяцев. Срок сильно затягивали вопросы логистики, так как в разработке устройств сильноточной электроники комплектующие совсем не простые, поэтому, к примеру, подходящий снабберный конденсатор может идти и пару месяцев. Вся необходимая комплектация (при условии, что многое было в наличии) собралась месяца за четыре. Сборка всей установки — около трех недель. Отладка и испытание — еще 10 дней. Корректировка, поиск и устранение «тараканов», доделки, корректировка КД — ещё пара недель. В целом, такая вот драматургия. Вся технологическая линия в конце концов у заказчика оформилась таким вот образом — показано на фото. Конечно, все это было сделано не только для спасения кошки Дымка. Данная технология используется для нанесения защитных и биосовместимых покрытий имплантатов для людей, цветных покрытий на различные сплавы и металлические композиты.Подобные изделия практически все заграничные и цена их соответствующая. А на самом деле в России вполне может быть налажено и развито производство подобных изделий в достаточном количестве. Необходима воля и желание не только постоянно открывать газопроводы и гнать ресурсы страны за бесценок за рубеж, а уже браться за развитие технологий, нормально поддерживать науку и производство. БлагодарностиТехнология нанесения биосовместимых покрытий разработана в недрах научных лабораторий Томского политехнического университета, Института сильноточной электроники СО РАН и Томского научного центра. Отдельная благодарность хабражителю NordicEnergy за полезные технические консультации при реализации проекта, ведь даже имея существенный опыт и технические компетенции, иногда нуждаешься в консультациях. В этом случае я всегда обращаюсь за помощью к участникам Хабр-сообщества и всегда найдется человек, который поможет разобраться. Также я буду признателен всем, кто даст полезные рекомендации по дальнейшей коммерциализации этой технологии или поможет с заказами. Моя почта asm@li.ru или в личку. А что же наша героиня статьи кошка Дымка? С ней все хорошо. Операция прошла успешно, жизнь зверя идет своим чередом. Забавно потягивается, как и все кошки, проснувшись по утрам). Вообще развитие медицины и биотехнологий никак нельзя представить без особой роли животных в этом процессе. Да и труд ветеринарных специалистов всецело лично мною глубоко уважаем. Ведь не даром говорил великий нейрофизиолог И.П.Павлов — «Медицинский врач лечит человека, а ветеринарный врач – человечество». Я лично в этом с Иван Петровичем глубоко солидарен! "
    },
    "doc_74": {
        "url": "https://habr.com/ru/post/217645/",
        "title": "Как Минковский во Flappy Bird играл",
        "text": "Многие пробовали играть во Flappy Bird. Редко кому удается пролететь за 50 труб, очень немногие долетают до сотни-двух. Некоторые пробовали создать бота, в том числе на хабре. Удивительно, но даже у самого успешного бота, которого можно найти на просторах интернета, результаты не очень-то впечатляют – что-то около 160 очков. Возникает вопрос, а можно ли вообще играть во Flappy Bird бесконечно долго? Или всегда с некоторой, пусть и небольшой, вероятностью может встретиться последовательность препятствий, которую даже опытный игрок/идеальный бот не сможет преодолеть?И тут на помощь приходит математика. Давайте найдем выигрышную стратегию для Flappy Bird.МодельОпишем математическую модель игры. Наше игровое поле — плоскость. Есть птичка — квадрат со сторонами длины w, параллельными координатным осям. Есть препятствия — трубы — вертикальные полосы ширины wtube с горизонтальными проемами высоты hgap. Расстояние между двумя соседними препятствиями по горизонтали фиксировано и равно Δtube. Расположение горизонтального проема для каждой трубы случайно (равномерно в некотором диапазоне). Кроме того есть пол — горизонтальная прямая f. Пол — это тоже препятствие. Картинка:Скорость птички по горизонтали постоянна и равна vx. На птичку также действует гравитация, придавая ей вертикальное ускорение g. Изначально скорость птички по вертикали равна 0. В каждый момент времени игрок может сделать тап, то есть сделать так, чтобы вертикальная скорость птички стала равна vjump. Кроме того, на птичку действует некое подобие сопротивления воздуха – ее вертикальная скорость ограничена снизу константой vfall. Фактически, это означает, что после каждого тапа птичка движется по параболе, переходящей в какой-то момент в прямую. Траекторию, по которой двигается птичка после тапа, будем называть падаболой (парабола падения). Выглядит это так:Игра заканчивается, когда птичка касается препятствия. Задачей игрока является максимизация пройденного расстояния.Прежде чем переходить собственно к стратегии прохождения сделаем один фокус. Анализировать пересечения квадратной птички с препятствиями не очень-то удобно. Но, оказывается, легко перейти к эквивалентной модели, в которой птичка является точкой. Для этого достаточно «сдуть» птичку до размера точки (центра исходного квадрата), одновременно «раздувая» препятствия. При этом исходный квадрат пересекается с препятствиями тогда и только тогда, когда новая точечная птичка лежит в раздутом препятствии. Картинка:По-научному результат «раздутия» препятствий называется суммой Минковского.Сумма МинковскогоВикипедия сообщает:Суммой Минковского двух подмножеств A и B линейного пространства V называется множество C, состоящее из сумм всевозможных векторов из A и B: C={c|c=a+b,a∈A,b∈B}С бытовой точки зрения можно считать, что сумма Минковского фигур A и B есть фигура, получаемая, если к каждой точке B приложить фигуру A – см. правый рисунок.Обратная падаболаРешим вспомогательную задачу: где должна находиться птичка, чтобы после тапа она пролетела через заданную точку A? Точнее говоря, требуется найти геометрическое место точек, таких что падаболы, проведенные из них, проходят через фиксированную точку A. См. средний рисунок. Пусть v⃗ – произвольный вектор, соединяющий начало падаболы с одной из ее точек. Легко видеть, что после тапа в точке A-v⃗ птичка пролетит через точку A. То есть A-v⃗ принадлежит искомому геометрическому месту точек. Более того, взяв всевозможные вектора v⃗, мы получим все искомые точки. Но чем является множество точек вида A-v⃗, где v есть радиус вектор до одной из точек падаболы? Это путь, центрально-симметричный падаболе после отражения относительно точки A. С картинкой, кстати, понятнее:Можно обобщить задачу: где нужно тапнуть, чтобы пролететь через заданную область S? Исходя из всего вышесказанного ответом является сумма Минковского области S и обратной падаболы:Верхние препятствияПерейдем, наконец, к основной задаче – нахождению выигрышной стратегии. Только сначала решим ее в упрощенном случае. Пусть в модели отсутствуют нижние половинки труб и пол. То есть у нас имеются только верхние части препятствий. Рассмотрим отдельно стоящую верхнюю половину трубы. Пусть птичка начала свой путь где-то далеко слева от этого препятствия. Допустим, в какой-то момент времени птичка врезалась в трубу. Как мы знаем по предыдущему параграфу, это означает, что был совершен тап в области, получающейся путем прибавления к препятствию обратной падаболы. Раскрасим получившуюся область синим цветом. Рисунок:Заметим, что если игрок тапнул в какой-либо точке синей области, то соответствующая падабола сначала пересекается с препятствием и только потом покидает синюю область. Другими словами игрок будет вынужден либо проиграть, либо еще раз тапнуть в синей области. Ну а поскольку отдельно взятая синяя область ограничена справа, лететь в ней до бесконечности не получится, и, в конце-концов, птичка умрет. Таким образом, тап в синей области всегда приводит к поражению. Более того, тапы вне синей области не могут привести к проигрышу – без тапа в синей области нельзя врезаться в верхнее препятствие, а больше нечему помешать птичке лететь.В результате, для случая одних только верхних препятствий получаем следующее утверждение.Утверждение. Если птичка начала свой полет вне объединения синих областей, то бесконечные выигрышные стратегии существуют. И все выигрышные стратегии описываются следующим образом: вне синих областей игрок может принимать произвольные решения, в синих областях игрок не может тапать.Нижние препятствияТеперь рассмотрим случай, когда в модели присутствуют только нижние половинки труб. То есть нет верхних половинок и пола. Опять же рассмотрим отдельно стоящее нижнее препятствие. Проведем через его верхний левый угол (точку A) луч AC, угол наклона которого составляет atan(vjump/vx) — то есть луч, направленный вдоль скорости птички в момент сразу после тапа. Пусть птичка оказалась ниже луча AC. Тогда независимо от действий игрока она не сможет подниматься с вертикальной скоростью большей чем vjump. С учетом постоянной горизонтальной скорости vx это приводит к неминуемому столкновению с препятствием, то есть проигрышу. Раскрасим нижнее препятствие и область ниже луча AC в красный цвет. Вот такие красные горки получаются:Получается, что при любой выигрышной стратегии птичка не должна попадать в красные области. Более того, если птичка находится вне красной области в некоторый момент времени, то она сможет оставаться вне нее сколь угодно долго. Действительно, всегда при приближении к границе красной области игрок может начинать тапать достаточно часто, чтобы не оказаться в ней.Добавим пол. Несложно видеть, что пол можно воспринимать как еще одну красную область в форме нижней полуплоскости.Таким образом, если присутствуют только нижние препятствия и пол, то верно:Утверждение. Если птичка в начальный момент времени находится вне объединения красных областей, то существуют бесконечные выигрышные стратегии. Все выигрышные стратегии можно сформулировать так: вне красной области игрок может принимать любые решения, при приближении к красной области игрок должен тапать.Все препятствия вместеРассмотрим общую ситуацию. Пусть есть и верхние половинки труб, и нижние, и пол. Вполне понятно следующее:Утверждение. Если объединение синих областей не пересекается с объединением красных и птичка изначально находится вне синих и красных областей, то существуют выигрышные стратегии. Любая выигрышная стратегия описывается так: вне синих и красных областей можно принимать любые решения, в синих областях тапать нельзя, при приближении к красным областям необходимо тапать.Отсутствие пересечений синих и красных областей для существования такой стратегии существенно. Действительно, может так получиться, что птичка пролетая через синюю область вплотную приблизится к границе красной – в этом случае если игрок тапнет, то проиграет, если не тапнет, тоже проиграет.Возникает вопрос, а пересекаются ли синие и красные области в реальной игре? Оказывается, иногда пересекаются. И происходит это ровно в одном случае: когда возникает достаточно большой перепад высот вниз между проемами двух соседних труб.Проанализируем данную ситуацию. Пусть птичка сумела пролететь через эти трубы. Значит, в какой-то момент времени она пересекла отрезок AB. Но это значит, что был совершен тап в области между обратными падаболами, проведенными из точек A и B. В то же время данный тап не мог быть произведен ни в синей области, ни в красной. Остается только область, изображенная на рисунке желтым цветом.То есть для существования выигрышной стратегии нужно уметь гарантировать попадание в желтую область. Дальше останется только сделать тап и опасный участок будет преодолен. Для того, чтобы понять, всегда ли мы сможем попасть в желтую область, сложим ее с обратной падаболой – получим область (на рисунке зеленая), в которую достаточно попасть, чтобы за один тап долететь до желтой. Заметим, что если в какой-то момент времени будет совершен тап в точке, лежащей выше линии Г, в желтую область мы уже попасть не сможем. И наоборот, для любой точки ниже этой границы мы всегда можем, тапнув достаточное число раз подряд, подняться в зеленую область, дальше, тапнув один раз, попасть в желтую и, соответственно, преодолеть препятствие. Другими словами, точки, находящиеся выше линии Г в нашей терминологии стоит покрасить в синий цвет. Правда, по большей части они и так уже синие, за исключением криволинейного треугольника XYZ. Докрасим XYZ в синий. Теперь для формулировки выигрышной стратегии осталось добавить фразу: если птичка оказалась в желтой области, необходимо хоть раз тапнуть до того, как птичка эту область покинет.Заметим, что дораскрашивание треугольничка в синий цвет не могло добавить пересечений красных и синих областей, а потому не повлияло на анализ проходимости игры в целом. В итоге, в общем случае получаем:Утверждение. Пусть птичка в начальный момент времени находится вне синих и красных областей. Тогда существуют бесконечные выигрышные стратегии. Все такие стратегии можно описать так: вне синих и красных областей можно тапать в любой момент времени; в синих областях тапать нельзя; при приближении к красным необходимо тапать; попав в желтую область, нужно тапнуть хоть один раз до выхода из нее.Интересно, что стратегия вида начать полет выше некоторой линии и тапать, как только птичка до нее опускается (например, в качестве такой линии логично было бы взять верхнюю границу красных областей, немного сдвинутую вверх) выигрышной видимо не будет ни для какой линии.ПрактикаВсе это хорошо, но хотелось бы немного практических результатов. Хардварных ботов на хабре уже видели, так что мы решили сделать софтверный. Совершенно случайно под рукой оказался код нашего клона под названием Tappinator, физическая модель которого достаточно близка к оригинальной игре – старались, замеряли. У нас, правда, птичка круглая (хотя, может, она и во Flappy Bird круглая, но разница невелика, а с квадратной объяснять проще) и есть дополнительные препятствия – наклонные. Вот так «раздуваются» препятствия для круглой птички:В результате синие и красные области у нас такие:Что касается желтых областей, они все также возникают для стандартных труб, но кроме того возникают в случае наклонных препятствий, направленных снизу вверх (со своими криволинейными синими треугольниками и вообще):Ну и, собственно, видео с ботами:На видео можно увидеть как 50 птичек вполне успешно долетают до 1000, как выглядят всякие цветные области с точки зрения бота и как бы выглядела игра, если бы одновременно летело 1000 птичек. В незакрашенных областях боты ведут себя случайным образом: у каждого из них своя фиксированная вероятность принять решение о прыжке в каждый момент времени. Можно заметить, что с точки зрения бота цветные области несколько больше, чем с точки зрения математики. Дело в том, что бот имеет возможность принимать решение только 60 раз в секунду, да и физическая модель обновляется тоже дискретно. ВыводВот так, оказывается даже в такой простой игре как Flappy Bird есть где развернуть математическую теорию. Причем в действительности самое интересное с этого момента только начинается. Дальше возникает вопрос, как быть с препятствиями произвольной формы – тут приходится вводить такие понятия как фиолетовая тень, бордовая граница, право-линейно-связная область, право-линейно-связное замыкание и т.д. Также интересно, какой реакцией должен обладать человек (то есть какова допустимая ошибка по времени при тапе у него должна быть), чтобы он смог играть до бесконечности. Между прочим, это крайне нетривиальный вопрос, строгий ответ на который нам до сих пор не известен."
    },
    "doc_75": {
        "url": "https://habr.com/ru/post/491974/",
        "title": "Коронавирус: почему надо действовать прямо сейчас",
        "text": "ВступлениеУчитывая всё, что происходит с коронавирусом, может оказаться очень сложно принять решение, что делать прямо сейчас. Стоит ли подождать, пока станет больше информации? Надо ли предпринять что-то уже сегодня? Если да, то что?В этой статье со множеством графиков, данных и моделей из большого числа источников мы постараемся ответить на вопросы:Сколько людей заболеют коронавирусом в вашем регионе?Что случится, когда они начнут заболевать?Что вы должны делать?Когда?Когда вы закончите читать статью, вы придёте к следующим выводам:Коронавирус приближается к вам. Он приближается с экспоненциальной скоростью: сперва постепенно, а потом внезапно.Это вопрос нескольких дней. Может быть, неделя или две.Когда это случится, ваша система здравоохранения будет перегружена.Ваши сограждане будут лечиться в коридорах. Изможденные медицинские работники сломаются. Некоторые погибнут.Им придётся решать, кто из пациентов получит лечение, а кто умрет. Единственный способ предотвратить это — социальная изоляция уже сегодня. Не завтра. Сегодня.Это значит держать как можно больше людей дома, начиная с сегодняшнего дня.Если вы политик, общественный деятель или руководитель, у вас есть власть и ответственность, чтобы предотвратить описанное выше.Сейчас вы можете опасаться: что, если это избыточная реакция? Не станут ли люди смеяться надо мной? Вдруг они разозлятся на меня? Не буду ли я выглядеть глупо? Не лучше ли подождать, пока другие сделают первые шаги? Что, если это слишком навредит бизнесу?Однако через 2-4 недели, когда весь мир будет закрыт и изолирован, когда окажется, что несколько драгоценных дней социальной изоляции, которые вы организовали, спасли жизни, вас больше не будут критиковать. Люди будут благодарить вас за то, что вы приняли правильное решение.Итак, давайте разбираться.Минутка заботы от НЛОВ мире официально объявлена пандемия COVID-19 — потенциально тяжёлой острой респираторной инфекции, вызываемой коронавирусом SARS-CoV-2 (2019-nCoV). На Хабре много информации по этой теме — всегда помните о том, что она может быть как достоверной/полезной, так и наоборот.Мы призываем вас критично относиться к любой публикуемой информацииОфициальные источникиCайт Министерства здравоохранения РФCайт РоспотребнадзораСайт ВОЗ (англ)Сайт ВОЗСайты и официальные группы оперативных штабов в регионахЕсли вы проживаете не в России, обратитесь к аналогичным сайтам вашей страны.Мойте руки, берегите близких, по возможности оставайтесь дома и работайте удалённо.Читать публикации про: коронавирус | удалённую работу1. Сколько случаев коронавируса будет в Вашем регионе?Рост по странамОбщее количество больных росло в геометрической прогрессии до тех пор, пока Китай не остановил этот процесс. Но потом коронавирус просочился наружу, и теперь это пандемия, которую никто не может остановить.На сегодняшний день основной вклад внесли Италия, Иран и Южная Корея:В Южной Корее, Италии и Китае столько случаев, что остальные страны трудно разглядеть, но давайте присмотримся к правому нижнему углу.Есть десятки стран с экспоненциальными темпами роста. На сегодняшний день большинство из них — западные.Если вы продержитесь с таким темпом роста хотя бы неделю, вот что вы получите:Если вы хотите понять, что произойдет, — или как это предотвратить,— вам нужно взглянуть на страны, которые уже прошли через подобное: это Китай, восточные страны с атипичной пневмонией, а также Италия.КитайИсточник: визуальный анализ автора и данные Journal of the American Medical AssociationЭто один из самых важных графиков.Оранжевые столбики отображают ежедневное официальное количество случаев в провинции Хубэй: сколько человек было диагностировано в тот день.Серые столбики показывают истинное ежедневное число случаев коронавируса. Крайне важно, что они не были известны в то время. Мы можем выяснить их, только оглядываясь назад.Таким образом, оранжевым изображено то, что знали власти, а серым — что происходило на самом деле.Количество новых диагностированных случаев (оранжевых) взлетает 21 января: их около сотни. В действительности же в тот день было 1500 новых случаев, которые росли в геометрической прогрессии. Но власти об этом не знали — им было известно, что внезапно обнаружено 100 новых случаев коронавируса.Два дня спустя власти закрыли Ухань. На тот момент количество диагностированных ежедневно новых случаев составляло около 400. Обратите внимание на эту цифру: они приняли решение закрыть город всего из-за четырёхсот новых случаев в день. На самом деле, в тот день было 2500 новых случаев, но это не было им известно.На следующий день закрылись ещё 15 городов провинции Хубэй.Взгляните на серый график до 23 января, когда Ухань ещё был открыт: он растет экспоненциально, число случаев увеличивается чудовищными темпами. Как только Ухань закрыли, рост замедляется. 24 января, когда ещё 15 городов закрылись, рост истинного числа заболеваний (мы всё ещё говорим про серые столбики) остановился. Два дня спустя было достигнуто максимальное количество новых случаев, и с тех пор оно падает.Обратите внимание, что оранжевые (официальные) случаи всё ещё росли в геометрической прогрессии, и на протяжении 12 дней могло казаться, будто у эпидемии взрывной рост. На самом деле это неправда — просто симптомы становились сильнее и люди чаще обращались к врачу, а система выявления болезни стала эффективнее.Эта концепция официальных случаев и истинных случаев очень важна. Давайте запомним её и вернёмся к ней позже.Остальные регионы Китая были хорошо скоординированы центральным правительством, поэтому они приняли незамедлительные и решительные меры. Таков результат:Каждая плоская линия — это китайский регион со случаями коронавируса. Любая из них имела шанс стать экспоненциальной, но благодаря мерам, предпринятым в конце января, все они остановили вирус до того, как он смог распространиться.Между тем, у Южной Кореи, Италии и Ирана был целый месяц, чтобы научиться на чужом примере, но они этого не сделали. Начав с такого же экспоненциального роста, как Хубэй, они опередили все китайские регионы к концу февраля.Восточные страныВ Южной Корее случился бешеный рост — но любопытно, почему в Японии, Тайване, Сингапуре, Таиланде или Гонконге этого не произошло?Тайвань даже не на графике, так как не преодолел порог в 50 случаев, выбранный для визуализации.Все эти страны пострадали от атипичной пневмонии в 2003 году, и все они чему-то научились. Узнав, насколько виральным и смертоносным может быть заболевание, они понимали, что нужно отнестись к нему серьезно. Поэтому их графики, несмотря на то, что они начали расти гораздо раньше, всё ещё не похожи на экспоненты.Итак, у нас есть истории о вспышках коронавируса, о том, как правительства осознавали угрозу и сдерживали их. Для остальных стран, однако, история будет совершенно другой.Перед тем, как я перейду к ним, замечание о Южной Корее: вероятно, эта страна — исключение. Коронавирус сдерживали в первых 30 случаях заболеваний, но пациент номер 31 оказался супер-распространителем, передавшим вирус тысячам других людей. Поскольку распространение происходит до того, как проявляются симптомы, к тому времени, когда власти осознали проблему, вирус уже был на свободе. Теперь они расплачиваются за последствия этого случая, однако их усилия по сдерживанию показывают свою эффективность: Италия уже опередила его в количестве случаев, а Иран опередит 10 марта.США. Штат ВашингтонВы уже видели рост в западных странах, и знаете, как удручающе выглядят прогнозы всего на одну неделю вперед. А теперь представьте, что сдерживание происходит не так, как в Ухане или других восточных странах, и вы получите колоссальную эпидемию.Давайте рассмотрим несколько случаев, — таких как в штате Вашингтон, в области залива Сан-Франциско, в Париже и в Мадриде.Штат Вашингтон — это американский Ухань. Количество случаев там растет в геометрической прогрессии, и в настоящее время оно составляет 140.Но самое интересное произошло в самом начале — летальность была запредельной, в какой-то момент в штате было три случая и одна смерть. Из других мест мы знаем, что летальность при коронавирусе составляет от 0,5% до 5% (подробнее об этом позже). Как она могла быть равна 33%?Оказывается, вирус неделями распространялся незамеченным. Не похоже, чтобы было только три случая — скорее, дело в том, что власти знали только о трех, и один из них был мертв, ведь чем серьезнее состояние, тем больше вероятность того, что кто-то будет проверен на вирус.Это немного напоминает наши оранжево-серые столбики в Китае: здесь они знали только об оранжевых (официальных) случаях и выглядели хорошо (всего три). Но на самом деле были сотни, может быть, тысячи настоящих случаев.В этом и заключается сложность: вы знаете только официальное положение дел, но не истинное. Вам необходимо узнать, что происходит на самом деле. Как оценить истинное число заболевших? Оказывается, есть пара способов. И у меня есть модель для обоих, так что вы тоже можете поиграть с цифрами (вот прямая ссылка, чтобы скопировать модель).Во-первых, через смертельные случаи. Если в вашем регионе есть погибшие, вы можете использовать их число, чтобы оценить количество истинных текущих случаев заболеваний. Мы приблизительно знаем, сколько в среднем требуется времени, чтобы погибнуть с момента получения вируса — это 17,3 дня. Получается, человек, умерший 29 февраля в штате Вашингтон, заразился около 12 февраля.Кроме того, известна летальность. В этом сценарии используется 1% (подробности обсудим позже). Это означает, что где-то 12 февраля в регионе уже было около сотни случаев, и только один из них закончился смертью 17 дней спустя.Теперь используйте среднее время удвоения случаев для коронавируса — это 6,2 дней. Таким образом, за 17 дней, прошедших перед смертью этого человека, число случаев должно было умножиться на ≈8 (=2^(17/6)). Выходит, что если не диагностировать все случаи без исключения, то всего одна подтверждённая смерть в день означает 800 истинных случаев заражения в этот же день.В штате Вашингтон сегодня 22 погибших. Используя наши приблизительные расчёты, получаем ≈16000 истинных случаев коронавируса только сегодня. Это столько же, сколько официальных случаев в Италии и Иране вместе взятых.Если мы изучим подробности, то поймём, что 19 из этих смертей были от одного кластера, который, возможно, не распространял вирус в широких масштабах. Если рассматривать эти 19 смертей как одну, то общее число смертей в штате составит четыре — обновляя расчёты для этого числа, мы всё ещё получаем ≈3000 случаев сегодня.Подход Тревора Бедфорда рассматривает сами вирусы и их мутации для оценки текущего числа случаев.An update about what we're able to infer about the Washington State #COVID19 outbreak from screening and viral sequencing by @UWVirology and @seattleflustudy. 1/12— Trevor Bedford (@trvrb) March 10, 2020Вывод заключается в том, что в штате Вашингтон сейчас, скорее всего, ≈1100 случаев.Ни один из этих подходов не совершенен, но все они указывают на одно и то же: мы не знаем истинное число случаев, но оно точно намного выше, чем официальное. Выше не в сотни раз, а в тысячи — или больше.США. Область залива Сан-ФранцискоДо 3 марта в районе Сан-Франциско не было никаких смертей. Из-за этого было трудно оценить количество истинных случаев. Официальное число составляло 86, но оценка США заведомо занижена, потому что тестовых комплектов для выявления коронавируса не хватает. Было принято решение создать свой тестовый набор, но оказалось, что он не работает.Таково было количество тестов, проведенных в разных странах к 3 марта:Источники этих данныхВ Турции, где не было ни одного случая коронавируса, тестирование на одного жителя проводилось в 10 раз чаще, чем в США. Сегодня ситуация не намного лучше: в США было проведено ≈8000 тестов, однако всего ≈4000 человек было протестировано.В этом случае вы можете просто использовать соотношение числа официальных случаев к числу истинных. Как решить, какое именно? В области залива Сан-Франциско тестировали всех, кто путешествовал или контактировал с путешественником, а это значит, в поле зрения властей попало большинство случаев, вызванных с путешествиями, но ни одного случая заражения через общество. Представляя, насколько распространены случаи распространения коронавируса внутри сообщества по сравнению с распространением через путешествия, вы можете оценить, сколько было истинных случаев.Я посмотрел на это соотношение для Южной Кореи, которая публикует прекрасную статистику. К тому времени, когда там было 86 случаев, 74 из них были вызваны заражением через общество, — то есть 86% (число 86 не особенное, это совпадение).С помощью этого числа можно рассчитать количество истинных случаев. Если сегодня в области залива Сан-Франциско залива выявлено 86 случаев, то, скорее всего, истинное число составит ≈600.Франция. ПарижСегодня Франция заявляет о 1400 случаях и 30 смертях. Используя два вышеприведенных метода, вы можете получить диапазон истинного числа случаев: от 24 000 до 140 000.Истинное число случаев коронавируса во Франции сегодня, скорее всего, составляет от 24 000 до 140 000.Давайте на секунду остановимся: истинное число случаев во Франции, скорее всего, на один или два порядка больше, чем официально зарегистрировано.Не верится? Давайте ещё раз посмотрим на уханьский график.Источник: визуальный анализ автора и данные Journal of the American Medical AssociationЕсли сложить оранжевые столбики до 22 января, то получится 444 случая; если добавить серые столбики, получится ≈12000. Получается, что когда в Ухане думали про 444 заболевших, их было в 27 раз больше. Если сейчас во Франции полагают, что у них 1400 случаев, их вполне может быть десятки тысяч…Та же математика применима и к Парижу. При ≈30 официальных случаях в городе истинное количество, скорее всего, исчисляется сотнями, если не тысячами. При 300 выявленных заболевших в регионе Иль-де-Франс общее количество носителей может уже превысить десятки тысяч.Испания. МадридВ Испании показатели очень близки к французским (выявлено 1200 заболевших против 1400, и в обоих случаях 30 смертей). Значит, действуют аналогичные правила: вероятно, в Испании уже 20 тысяч заражённых.В провинции Мадрид с одноименной столицей, где по официальным данным 600 инфицированных и 17 смертей, можно оценить истинное число случаев — от 10 000 до 60 000.Если вам кажется, что эти данные не могут быть правдой, просто подумайте о том, что Ухань с таким количеством случаев уже был под замком.С таким числом заболевших, как в США, Испании, Франции, Иране, Германии, Японии или Швейцарии, Ухань уже был изолирован.И если вы продолжаете говорить, что Хубэй — это всего лишь один регион, позвольте напомнить, что в нём проживает почти 60 миллионов человек. Это больше, чем в Испании, и примерно сопоставимо с Францией.2. Что случится, когда наступит эта вспышка коронавируса?Что же, коронавирус уже здесь. Он спрятан, но растет в геометрической прогрессии.Что случится в наших странах, когда он ударит? Это легко узнать, потому что уже есть места, где это происходит. Лучшие примеры — Хубэй и Италия.ЛетальностьВсемирная организация здравоохранения (ВОЗ) приводит 3,4% в качестве показателя летальности (доля людей, которые заразились коронавирусом и затем умерли). Эта цифра выпадает из контекста, поэтому позвольте мне ее объяснить.Всё зависит от страны и времени: от 0,6% в Южной Корее до 4,4% в Иране. На какое значение стоит опираться? Мы можем использовать хитрость, чтобы разобраться.Два показателя, на которые можно опираться для оценки летальности — это умершие к общему числу заболевших и умершие к числу выздоровевших. Первая оценка, скорее всего, будет заниженной, потому что многие из числа болеющих всё ещё могут погибнуть. Второй способ, наоборот, завышает оценку, поскольку есть вероятность того, что смерть наступит быстрее выздоровления.Хитрость заключается в том, чтобы посмотреть, как оба показателя меняются с течением времени. Их значения будут сближаться до тех пор, пока не останется болеющих, то есть они встретятся в точке «умершие к переболевшим» — так что если экстраполировать наблюдаемые тенденции, можно сделать предположение о том, какой будет итоговая летальность.И вот что показывают данные. В Китае летальность сейчас составляет от 3,6% до 6,1%. Если спроецировать тренды в будущее, то они будто бы сходятся в районе 3,8%–4%. Это значение в два раза превышает нынешнюю оценку, и ещё оно в 30 раз хуже, чем у гриппа.Впрочем, мы провели расчёты на данных, составленных из двух совершенно разных реальностей: Хубэй и остальной Китай.Скорее всего, летальность в Хубэе составит 4,8%. При этом для остальной части Китая она, скорее всего, сойдётся на ~0,9%.Из любопытства стоит также взглянуть на графики по данным Ирана, Италии и Южной Кореи, — тех немногих стран, число смертей в которых можно считать более-менее релевантным.Как видно, в Иране и Италии значения летальности сходятся в диапазоне 3%–4%. Можно полагать, что итоговые данные окажутся близки к этому значению.Южная Корея является наиболее интересным примером, потому что там наши два показателя совершенно не связаны: умершие к общему числу заражённых дают всего 0,6%, но умершие к числу выздоровевших — колоссальные 48%. Возможное объяснение заключается в том, что страна просто очень осторожна. Корейцы тестируют всех (при таком количестве выявленных случаев смертность кажется низкой), и при выздоровлении продолжают наблюдать пациентов на более длительный срок (поэтому цифры растут быстрее при смерти пострадавшего). Характерно, что отношение умерших к общему числу заражённых с самого начала находится около 0,5%, — это позволяет предполагать, что особо оно не изменится.Последний уместный пример — круизный лайнер Diamond Princess: с 706 заболевшими, 6 смертями и 100 выздоровлениями, итоговая летальность будет в диапазоне от 1% до 6,5%.Отсюда можно сделать вывод:В странах, подготовленных к эпидемии, летальность составит от ≈0,5% (Южная Корея) до 0,9% (остальная часть Китая).В перегруженных и неготовых странах летальность составит ≈3%–5%.Иначе говоря, страны, которые действуют быстро, могут сократить число смертей в десять раз. И это только подсчет количества смертей — быстрое реагирование также резко сокращает количество пострадавших, что само по себе упрощает задачу.Страны, которые действуют быстро, сокращают количество смертей как минимум в 10 раз.Так что же нужно стране, чтобы подготовиться?Уровень нагрузки на систему здравоохраненияОколо 20% случаев коронавируса требуют госпитализации, 5% — помещения в отделение интенсивной терапии (реанимацию), и около 1% — оказания крайне интенсивной помощи с применением таких средств, как ИВЛ (искусственная вентиляция легких) или ЭКМО (искусственные сердце и легкие).Проблема заключается в том, что такое оборудование, как аппараты ИВЛ и ЭКМО, невозможно легко произвести или закупить. Несколько лет назад в США, например, было всего 250 ЭКМО-аппаратов.Так что если внезапно 100 000 человек заразились, многие из них захотят пройти тестирование. Около 20 000 потребуется госпитализация, 5 000 понадобится отделение интенсивной терапии, а 1000 — аппараты, которых сегодня не хватает. И это всего лишь 100 000 случаев.Это ещё не учитывая других проблем, — как, например, маски. В стране наподобие США есть только 1% масок, необходимых медицинским работникам (12 миллионов N95 и 30 миллионов хирургических против требуемых 3,5 миллиардов). Если одновременно появляется много случаев заболевания, то масок хватит только на две недели.Такие страны, как Япония, Южная Корея, Гонконг или Сингапур, а также китайские регионы за пределами Хубэя были подготовлены и смогли обеспечить пациентов необходимым уходом.Но остальные западные страны скорее идут в направлении Хубэя и Италии. Так что же там происходит?Как работает перегруженная система здравоохраненияИстории, произошедшие в Хубэе и в Италии, начинают жутко походить друг на друга. Хоть в Хубэе смогли построить две больницы за десять дней, они сразу же оказались полностью перегружены.И там, и там все жаловались, что пациенты наводнили больницы. О них нужно было заботиться повсюду: в коридорах, в комнатах ожидания…From a well respected friend and intensivist/A&E consultant who is currently in northern Italy:1/ ‘I feel the pressure to give you a quick personal update about what is happening in Italy, and also give some quick direct advice about what you should do.— Jason Van Schoor (@jasonvanschoor) March 9, 2020Этот короткий тред в Твиттере рисует довольно страшную картину сегодняшней ИталииМедицинские работники часами не меняют защитную одежду, потому что её не хватает. В результате, они по несколько часов не могут покинуть зараженные зоны. Когда они это делают, они валятся с ног, обезвоженные и истощенные. Смен больше не существует. Приходится вызывать ушедших на пенсию, чтобы удовлетворить потребность в специалистах, а людей, не знакомых с сестринским делом, в одночасье обучают выполнять критические роли. Выходных дней и часов отдыха нет, все работают без перерыва.То есть, пока они не заболеют. Что случается часто, потому что они находятся в постоянном контакте с вирусом без достаточного защитного снаряжения. Когда это происходит, они должны находиться в карантине в течение 14 дней, в течение которых они никому не могут помочь. В лучшем случае, они теряют две недели; в худшем случае, они мертвы.Самое ужасное происходит в реанимации, когда пациентам приходится делить аппараты ИВЛ или ЭКМО. Ими просто нельзя поделиться, поэтому медицинские работники должны определить, какой пациент будет их использовать. Что, на самом деле, означает решать, кто из них выживет, а кто умрет.«Через несколько дней приходится выбирать. <…> Не всех можно интубировать. Мы принимаем решение, основываясь на возрасте и состоянии здоровья» — Кристиан Салароли, итальянский докторВсё это приводит к тому, что летальность в перегруженной системе здравоохранения составляет ≈4% вместо ≈0,5%. Если вы хотите, чтобы ваш город или ваша страна были частью этих 4%, просто не делайте ничего сегодня.3. Что нужно делать?Сгладить кривуюТеперь это пандемия, и её нельзя просто устранить. Но что можно сделать, так это уменьшить ее воздействие.Некоторые страны могут быть примером для подражания. Лучший из них — Тайвань, который очень тесно связан с Китаем и всё равно имеет на сегодняшний день меньше 50 случаев заболевания. В этой недавней работе объясняются все меры, которые они приняли на раннем этапе и которые были направлены на сдерживание.Они смогли сдержать распространение вируса, но большинство стран не смогло этого сделать. Сейчас Тайвань занят уже другим делом — смягчением. Они стараются сделать болезнь как можно более безобидной.Если мы будем максимально сокращать количество инфекций, наша система здравоохранения сможет гораздо лучше справляться со случаями заболевания, что приведет к снижению летальности. И если мы будем придерживаться этого подхода достаточно долго, мы достигнем точки, когда остальная часть общества сможет быть вакцинирована, что позволит полностью исключить риск. Так что наша цель не в том, чтобы ликвидировать заражение коронавирусом, — а в том, чтобы отложить его.Чем дольше мы откладываем случаи заражения, тем лучше функционирует система здравоохранения, тем ниже летальность и тем выше доля населения, которое будет вакцинировано до того, как оно заразится.Как же нам выровнять кривую?Социальная изоляцияЕсть одна очень простая вещь, которую мы можем сделать и которая точно работает: социальная изоляция.Вернувшись к графику про Ухань, можно вспомнить, что как только город ввёл карантин, эпидемия пошла на спад. Причина в том, что люди не взаимодействовали друг с другом, и коронавирус не распространялся.Актуальный научный консенсус утверждает, что этот вирус передаётся в радиусе 2 метров, если кто-нибудь закашляется. В противном случае капли упадут на землю и никого не заразят.Следующий путь заражения — через прямой контакт: вирус выживает часами или днями на разных поверхностях. Если он ведет себя как грипп, то на металле, керамике и пластике он может выживать неделями. Это означает, что такие вещи, как дверные ручки, столы или кнопки лифта, могут быть ужасными переносчиками инфекции.Единственный эффективный способ противодействия — социальная изоляция. Необходимо держать людей дома как можно дольше, пока не произойдёт спад. Это уже было доказано в прошлом, а именно во время пандемии гриппа 1918 года.Уроки пандемии гриппа 1918 годаМожно видеть, как Филадельфия (сплошная линия) не действовала быстро и имела огромный пик смертности. Сравните с Сент-Луисом (пунктирная линия), который сделал всё как надо.Затем посмотрите на Денвер (ниже), который принял необходимые меры, но затем ослабил их. У них был двойной пик, второй даже выше первого.Если обобщить, вот что получится:На графике показана летальность при гриппе в США в 1918 году в зависимости от того, как быстро принимались меры. В среднем, принятие мер на 20 дней раньше сократило летальность вдвое.Италия наконец-то разобралась с этим. Сначала они изолировали Ломбардию в воскресенье, а через день, в понедельник, осознали свою ошибку и решили, что нужно запереть всю страну.Надеюсь, в ближайшие дни мы увидим результаты, но вообще это займет от одной до двух недель. Вспомните уханьский график: была задержка в 12 дней между моментом объявления блокировки и моментом, когда официальные случаи (оранжевые столбики) начали снижаться.Как политики могут поспособствовать социальной изоляции?Если вы политик в регионе, затронутом коронавирусом, вам следует немедленно последовать примеру Италии и приказать изолировать страну. Вот что сделали итальянцы:Никто не может входить или выходить из зон карантина, если только не доказаны причины, связанные с семьей или работой.Движение внутри зон должно избегаться, если только оно не оправдано срочными личными или рабочими причинами и не может быть отложено.Людям с симптомами (респираторная инфекция и лихорадка) «настоятельно рекомендуется» оставаться дома.Стандартный отгул для медицинских работников приостанавливаетсяЗакрытие всех образовательных учреждений (школ, университетов...), спортивных залов, музеев, лыжных станций, культурных и социальных центров, бассейнов, театров.Бары и рестораны имеют ограниченное время работы с 6 утра до 6 вечера, с расстоянием не менее одного метра (~ 3 футов) между людьми.Все пабы и клубы должны быть закрыты.Вся коммерческая деятельность должна проводиться при соблюдении расстояния не менее одного метра между посетителями. Если это компания не может этого обеспечить, она должна быть закрыта. Храмы могут оставаться открытыми до тех пор, пока они гарантируют это расстояние.Визиты родственников и друзей в больницу ограничены.Рабочие встречи должны быть отложены. Необходимо поощрять работу на дому.Все спортивные мероприятия и соревнования, общественные или частные, отменяются. Важные мероприятия могут проводиться за закрытыми дверями.Это наименьшие меры, которые следует предпринять. Если цель — обеспечить безопасность, действовать надо по образцу Уханя. Люди могут жаловаться сейчас, но они будут благодарны потом.Как руководители могут поспособствовать социальной изоляции?Если вы руководите коллективом и хотите знать, что вам следует сделать, лучшим ресурсом для вас будет Staying Home Club.Это список американских технологических компаний, которые ввели в действие политику социальной изоляции — пока что их 85. Политика варьируется от разрешения работы на дому и ограничения посещений офиса до отмены командировок или корпоративных мероприятий.Есть еще несколько вещей, которые каждая компания должна решить, например, что делать с почасовыми работниками, оставить ли офис открытым, как проводить собеседования, что делать с кафетериями… Если вам интересно, как моя компания справилась с некоторыми из этих вопросов, вы можете ознакомиться с политикой и типовым объявлением.4. Когда?Вполне возможно, что до сих пор вы соглашались со всем, что было сказано выше, и с самого начала задавались вопросом, когда принимать каждое решение — или, иначе говоря, что должно стать триггером для каждой меры.Основанная на риске модель решенийЧтобы решить эту проблему, я создал модель (вот прямая ссылка, чтобы скопировать модель).Она позволяет вам оценить вероятное количество случаев в вашем регионе, вероятность того, что ваши сотрудники уже инфицированы, и то, как ситуация будет развиваться во времени. Всё это должно подсказать вам, не пора ли вводить в офисе карантин.Модель говорит нам о таких вещах:Если ваша компания имеет 100 сотрудников в штате Вашингтон, где случиилось 11 смертей от коронавируса, то есть 25%-ная вероятность того, что по крайней мере один из ваших сотрудников заражен, и вы должны немедленно закрыться.Если ваша компания насчитывает 250 сотрудников в основном в Южном заливе (округа Сан-Матео и Санта-Клара, которые вместе имеют 22 официальных случая, а реальное число, вероятно, не менее 54), то к 9 марта у вас будет ≈2% шанс, что хотя бы один сотрудник будет заражен.Если ваша компания находится в Париже, и у нее 250 сотрудников, то сегодня вероятность того, что один из ваших сотрудников заразится коронавирусом, составляет 0,85%, а к завтрашнему дню она составит 1,2%, так что если вам комфортно только с 1%-ой вероятностью, то к завтрашнему дню вы должны закрыть свой офис.В этой модели используются такие ярлыки, как «компания» и «сотрудник», но она может быть использована и для всего остального: школы, общественный транспорт… Так что если у вас в Париже всего 50 сотрудников, но все они ездят на метро, сталкиваясь с тысячами других людей, то очевидным образом вероятность того, что хотя бы один из них заразится, намного выше, и вы должны закрыть свой офис немедленно.Вы входите в группу руководителей?Предложенная модель весьма эгоистична. Она рассматривает риск каждой компании в отдельности, беря на себя столько риска, сколько мы хотим, пока неизбежный молот коронавируса не закроет наши офисы.Но если вы являетесь частью группы предпринимателей, входите в совет директоров холдинга или в политическую фракцию, то ваши расчеты предназначены не для одной компании, а для целого. Расчёты меняются: какова вероятность заражения любой из наших компаний? Если вы управляете группой из 50 компаний со средним количеством 250 сотрудников, то в области залива Сан-Франциско вероятность того, что хотя бы одна из компаний заразится, составляет 35%, а вероятность того, что на следующей неделе это произойдет, составит 97%. Я специально добавил в модель вкладку, чтобы поиграть и с этим сценарием.Заключение: Стоимость ожиданияПринимать решение сегодня может быть страшно, но об этой проблеме стоит думать в другом ключе.Эта теоретическая модель показывает разные сообщества: одно не принимает мер по социальной изоляции, другое принимает их в день N вспышки вируса, третье — в день N+1. Все числа здесь полностью вымышлены (они выбраны так, чтобы приблизительно напоминать произошее в Хубэе, с ≈6000 новых заболеваний ежедневно в худшем случае). Это просто иллюстрация того, насколько важным может быть всего один день, когда что-то растет в геометрической прогрессии. Вы можете видеть, что однодневная задержка достигает пика позже и выше, но затем ежедневные случаи сходятся к нулю.Но что насчёт суммарного количества заболеваний?В этой теоретической модели, отдалённо напоминающей Хубэй, ожидание всего одного дня создает на 40% больше случаев! Возможно, если бы власти Хубэя объявили карантин 22 января вместо 23 января, они смогли бы уменьшить количество заболеваний на ошеломляющие 20 000.И помните, что это всего лишь число заражёных. Из-за ожидания летальность была бы гораздо выше, и речь не только про непосредственный эффект — число смертей увеличилось бы больше, чем на 40%. Неизбежно коллапс системы здравоохранения оказался бы критичнее, что привело бы к росту летальности в 10 раз, как мы видели раньше. Таким образом, всего однодневное промедление в введении социальной изоляции может закончиться взрывным ростом числа смертей в вашем сообществе, умножая число заболевших и задирая летальность.Это экспоненциальная угроза. Каждый день на счету. Когда вы откладываете принятие решения на один день, вы не вносите свой вклад в несколько случаев инфекции. Возможно, в вашем сообществе уже есть сотни или тысячи заболевших. Каждый день, когда нет социальной изоляции, эти случаи продолжают расти в геометрической прогрессии.Поделитесь информациейВероятно, это единственный раз за последнее десятилетие, когда распространение текста может спасти жизни. Все должны понять, о чём идёт речь, чтобы мы смогли предотвратить катастрофу. Действовать надо прямо сейчас.См. также:«Коронавирус: филогения, курение, летальность и снижение рисков заболеть»«Коронавирус: FAQ по защите органов дыхания и дезинфекции»«COVID19: прогнозы, статистика, защита, новости»История мировых эпидемий: часть 1,часть 2,часть 3, часть 4"
    },
    "doc_76": {
        "url": "https://habr.com/ru/post/126817/",
        "title": "Российские аккаунты Paypal смогут принимать деньги",
        "text": "Свершилось чудо — С 24 сентября у владельцев российских и украинских аккаунтов Paypal появится возможность принимать деньги на свои счета.Здесь можно посмотреть обновлённую политику."
    },
    "doc_77": {
        "url": "https://habr.com/ru/post/192604/",
        "title": "Джефф Дин из компании Google — это Чак Норрис нашего времени",
        "text": "«Джефф Дин компилирует и запускает свой код перед коммитом, но только чтобы проверить на баги компилятор и CPU», — вот один из множества шуточных фактов о Джеффе Дине.Джефф Дин считается кем-то вроде Чака Норриса. Отличие только в том, что он вовсе не герой боевиков, а инженер-программист компании Google. Шутки о нём впервые появились на 1 апреля шесть лет назад. Один из коллег Дина по имени Кентон Варда открыл страничку, куда каждый мог добавлять факты о Джеффе Дине. Идею с энтузиазмом подхватили другие разработчики — и вскоре наполнили страничку множеством таких «фактов».«Я ни с кем никогда не согласовывал это, — говорит Кентон Варда, — просто сделал, потому что подумал, это будет весело и народу понравится. Так всё происходит в компании Google. Но моя маленькая шутка и близко не может сравниться с самыми большими и смешными проектами в корпоративной сети».«Когда Джефф Дин разрабатывает программу, то сначала создаёт бинарник, а потом пишет исходный код как документацию».«Джефф Дин однажды не прошёл тест Тьюринга, потому что правильно установил 203-е число Фибоначчи менее чем за секунду».«Джефф Дин родился 31 декабря 1969 года в 23:48. Ему потребовалось 12 минут, чтобы запустить свой первый счётчик времени».Джефф Дин даже если захочет, уже не сможет избавиться от имиджа Чака Норриса. Впрочем, его вряд ли заботят такие мелочи. Один из ведущих программистов Google считается соавтором ключевых инфраструктурных систем компании, включая MapReduce, BigTable и Spanner.Дина приняли в штат компании Google в 1999 году, когда там работало около 20 сотрудников. Уже тогда он считался одним из самых талантливых молодых учёных в США в области информатики (computer science), а для компании Google он был сродни выигрышу в лотерею. Каждый стартап мечтает получить к себе такого гения.Ещё в школе Дин написал программу для обработки больших объёмов эпидемиологических данных, которая была, по его словам, в 26 раз быстрее любого профессионального софта в данной области. Позднее его разработку Epi Info стали массово использовать в центрах контроля заболеваний, программа сейчас переведена на 13 языков.В студенческие годы Джефф работал над компиляторами. Ему всегда нравилось создавать программы, которые нацелены на максимальную производительность. Оптимизация — вот его конёк.«Скорость света в вакууме была около 55 км/ч. Затем Джефф Дин потратил уикенд на оптимизацию физики»Придя в Google, Джефф немного поработал над Google News и AdSense, а затем обратил внимание на главную задачу, которая стояла перед компанией на том этапе — масштабирование. Вместе с ещё одним выдающимся программистом Санджеем Гемавотом (Sanjay Ghemawat) и другими коллегами они занялись созданием программного обеспечения для обработки больших объёмов информации в кластерах. Так появился фреймворк MapReduce, который очень быстро стал, фактически, промышленным стандартом в своей области.Затем была высокопроизводительная БД BigTable на базе Google File System и феноменальная система Spanner, база данных, которая глобально распределена по множеству дата-центров Google на разных континентах — и при этом обеспечивает целостность и синхронизацию данных. До создания Spanner почти никто не верил, что такое вообще возможно сделать. Собственно, на этом этапе трудовая биография Джеффа Дина начинает напоминать вымышленные факты из первоапрельского сборника, пишет Slate. И становится понятным, почему именно он стал кандидатом на роль Чака Норриса.«Джефф Дин не пользуется ни Emacs’ом, ни Vi. Он набирает код непосредственно в zcat, потому что так быстрее».«Когда Ричард Столлман узнал, что автобиография Дина выйдет эксклюзивно на платформе Amazon, он купил Kindle».«Недовольный константным временем, Джефф Дин создал первый в мире алгоритм O(1/n)».«Однажды в 2002 году, когда поисковый бэкенд отключился, Джефф Дин два часа вручную отвечал на вопросы пользователей. В этот период качество поисковой выдачи существенно возросло».«Джеффу Дину пришлось изобрести асинхронные API однажды, когда после его оптимизации функция вернула значение прежде, чем её вызвали».«Скорость программирования Джеффа Дина выросла в 40 раз в конце 2000 года, когда он проапгрейдил клавиатуру на USB 2.0».«Компиляторы не предупреждают Джеффи Дина. Джефф Дин предупреждает компиляторы».«Джефф Дин однажды написал алгоритм O(n^2). Это нужно было для решения задачи коммивояжёра».«Джефф Дин однажды поднял веб-сервер одним вызовом printf(). Другие инженеры добавили тысячи строк комментариев с пояснениями, но так и не поняли, как он работает. Сегодня программа работает в качестве фронтэнда Google Search».«Когда Джефф Дин запускает профайлер, все циклы в страхе расцикливаются».«Джефф Дин всё ещё ждёт, когда математики найдут шутку, которую он спрятал в разрядах числа Пи».«На клавиатуре Джеффа Дина две клавиши: 1 и 0».«Команда gcc -O4 отправляет ваш код Джеффу Дину для полной переделки».«Когда Джефф не может заснуть, он мап-редьюсит овечек».«Когда Джефф Дин хочет послушать mp3, он отправляет его в /dev/dsp и осуществляет декодирование в голове».«Когда Грэм Белл изобрёл телефон, то увидел пропущенный вызов от Джеффа Дина».«Джефф Дин надевает штаны по очереди на каждую ногу, но если бы у него было больше двух ног, то мы бы увидели, что ему требуется O(log n)».«На собеседовании в Google Джеффа спросили, что следовало бы из равенства P=NP. Он ответил: «P = 0 или N = 1». Затем, пока собеседующий ещё не перестал смеяться, Джефф присмотрелся к публичному сертификату Google и выписал приватный ключ на доску»."
    },
    "doc_78": {
        "url": "https://habr.com/ru/post/67141/",
        "title": "Верни мои деньги, банкомат",
        "text": "Бывает такое, что привычная, казалось бы, вещь, встречается с такой изюминкой, после которой начинаешь смотреть на эту вещь совершенно иначе. Так случилось и у меня… пару лет снимал деньги с карточки в сотне мест и бед не знал… а тут приехал в один городок и в первом же банкомате мне повстречалась эта самая изюминка. Причем место и обстоятельство были такими, что за пару мгновений пищи для размышления и впечатлений накопилось недели на две вперед.Я почему-то думал, что это может быть только в стране вечнозеленых президентов, а у нас – просто нет кадров, чтобы заниматься этим. Оказывается, я глубоко ошибался. Просто не каждый день встретишь то, про что читал только в журналах/интернете или видел в фильмах [ кстати, не помню ни одного фильма, где бы фигурировал скиммер :) ].Что такое скиммер? Если сделать запрос в яндексе, то из первых строк станет ясно, что это какой-то насос для очистки бассейнов. Но сами посудите – насос и банкомат… что-то не то. Хотя, насосом качать бабки из банкомата – вполне )Не вдаваясь в историю происхождения названия, скиммер – это небольшое устройство, которое может помочь злоумышленникам воспользоваться Вашей пластиковой карточкой.Те, кто в теме, сейчас наверное читают и хихикают над моей трактовкой, но это первая трактовка, что пришла мне в голову. Скиммер обычно состоит из двух элементов – накладной клавиатуры (пин-пад) и сканера магнитной ленты карты. Пин-пад аккурат размещается поверх родной клавиатуры банкомата и позволяет злоумышленникам узнать Ваш пин-код (для этого так же может использоваться миниатюрная камера), сканер же вешается поверх щели приема карт. Причем, маскировка делает свое грязное дело.Вы вставляете карточку в банкомат (не подозревая, что вставляете ее в сканер карт злоумышленников, после которого карточка попадает в нужную Вам щель банкомата) – вуаля, данные о вашей карте (дамп) уже либо на устройстве хранения данных в сканере, либо по беспроводному интерфейсу уже переданы кому-то. Дальше Вы вводите пин-код, который так же либо сохраняется, либо сразу отправляется. Все, для того чтобы пользоваться вашими деньгами, остается всего лишь изготовить дубликат карты, что делается, судя по всему, достаточно легко – используя дамп, программируется безликий кусок пластика и готово.Кстати, гораздо хуже, если никакого накладной клавиатуры на устройстве приема карт банкомата нет или просто кто-то палит, как вы вводите пин-код. Еще хуже, если при этом вы вышли из своего намытого до зеркального блеска Audi Q7 (99, третий бумер, лансер – нужное подчеркнуть), в мажорной дубленке, с гарнитурой, но без каски. В таком случае есть все шансы тупо получить чем-то тяжелым по голове и с таким же успехом отдать деньги с карточки. Но этот случай не так интересен – гоп-стоп был везде и всегда.Несмотря на то, что всегда смотрю на банкомат, прежде чем вставить карту, в тот раз я ее вставил. Были не одни, было не до банкомата. Хотел было вводить пин-код, как заметил, что клавиатура не плоская, а выпуклая, как быть не должно. Сравнив быстро пальцем фактуру клавы и банкомата, мысленно пытаюсь убедить себя, что все ок. Через секунду говорю друзьям:— Блин, походу скиммер.Замерли. Поддеваю ногтем клавиатуру… сначала вошел ноготок, потом палец…сплошной секс ). Когда я понял, что клава отходит, я решил, что сломал банкомат и что под кнопками ничего не будет, а я тупо приклею ее обратно и сниму деньги. Подняв клаву, мы обомлели – там была точная копия нашей клавы, только идеально ровно встроенная в поверхность банкомата.— Ё-маё, Бурумыч, скиммер! Скиммер, мать его! О Боги, я первый раз такое вижу, поверни, дай сфоткаю!— Да, тоже первый раз вижу. Только мой дамп уже там, а должен быть чей-нибудь ваш )Перевожу взгляд на картоприемник – уже ничего не соображая, пытаюсь вытащить карту. Ничего не выходит. Вспоминаю про кнопку «Отмена», жму – карта вылазит. Хух. Поддевая ногтями выпирающий картоприемник, он так же отходит – от чего жути только прибавилось. Пару секунд рассматриваем устройство – горят какие-то лампочки, батарейка, аккуратная пайка… да, видно, что этим вопросом занимаются серьезно. Еще через мгновение нас всех одновременно посещает мысль, что больше нам находиться тут не стоит )Дальше все как в фильме ) Менты пообещали прибыть в течение часа, что в нашем случае, естественно, нам уже не делало никакой погоды. Скиммер мирным путем вернулся законным владельцам ) А мы, понимая, что ходим под Богом, телепортировались.В общем, примерно такие были эмоции при первом знакомстве. Что же за пищу для размышлений мы тогда получили?Во-первых, это было первое практическое занятие – узнали как выглядит, что из себя представляет, кем и как охраняется. Весь текст дальше – догадки.Из недостоверных источников, цена за комплект устройства подобного типа (сами железки, программное обеспечение и т.п.) стоит порядка 3-5 тысяч долларов (несмотря на то, что ничего сверхъестественного там нет), что уже как минимум является причиной не оставлять девайс без присмотра. Цена зависит от конструкции и от комплектации. Что-то может автономно долго работать, что-то хранить дампы у себя на карте памяти, что-то – сразу передает информацию владельцам (экзотика). Цитата с какого-то сайта: «Информация о скиммерах появлялась в новостях уже не раз, но устройства совершенствуются с каждым днем. На этот раз скиммеру уже не нужно подходить к банкомату, чтобы снять информацию — она высылается через СМС. Устройство может отправить до 1856 СМС на одной подзарядке. Стоит 8,5 тыс долларов. Причем краска для внешних деталей покупается на тех же заводах, что и производители банкоматов, учитывается температура, угол наклона, время покраски. На первый взгляд отличить практически невозможно. Единственное НО… Если сотрудники банка оперативно среагируют и отследят сим-карту злоумышленника, то поймать его, возможно, будет и проще…»Следовательно, где-то в пределах прямой видимости точно кто-то есть, даже если Вы его не видите. Зато видят Вас, например, из тонированной девятки через дорогу ;) Так как работа наблюдающего, по сути – охрана объекта, то я почти уверен, что и пропорции у него – как у достойного охранника ;) Если Вы считаете, что обдурили всех, отодрав скиммер и убежав – не спешите радоваться. Могут по дампу найти, могли и паспорт выронить – всякое бывает ;) зато потом хэппи энда может не случиться. Так что подумайте, стоит ли вообще связываться – может проще снять деньги в другом месте?Дальше можно поразмышлять о местах обитания скиммеров. Понятное дело, что идеальное место – там, где больше народу, причем не студентов со стипендиями, а нормального такого народу. Думаю, скиммер вы сможете встретить у вокзалов, аэропортов, казино, кафешек, кино, магазинов техники и прочих горбушек – одним словом в местах, где людям требуется снимать побольше денег. Побродив пару часов по совку и горбушке, пройдя пару вокзалов – я так ничего интересного и не нашел. Отсюда, снова напрашивается вывод, что устройства находятся на своих местах не всегда.Предполагаю, что сначала дядьки выясняют, в каком режиме обслуживается рыбное место – в какие дни и в какое время приезжают инкассаторы загрузить деньги, во сколько они проезжают и так далее. Т.к. инкассаторы наверняка каждый раз разные, то надеяться на их гуманность к скиммеру злоумышленнику не стоит. Поэтому, вероятно, скиммеры приклеивают и снимают по несколько раз на дню.Но отсюда опять что-то да вытекает. Даже у самого одинокого банкомата обычно стоят камеры, за которыми кто-то да должен наблюдать из служб безопасности. А про банкоматы в отделениях банка я вообще не говорю. Таким образом, я не поверю, что каждый раз, вешая девайс на банкомат, этого никто не замечают и ничего не предпринимают. Да, злоумышленник может на пару секунд прикрыть собой камеру, успев сделать свое дело… но это же должно происходить несколько раз на дню!?! Думаю, даже постоянно вешать устройство и не надо – достаточно пару часов повисеть в один из вечеров праздничного дня.Какой отсюда же напрашивается вывод? А такой, что все об этом прекрасно знают. И если девочка на ресепшене должна просто закрывать на это глаза, то владельцы банков наверняка живут не только на проценты вкладчиков =) иначе смысла разводить такую кормушку у себя под носом у них нет. Таким образом, еще раз доказывается отношение банковской сферы к обычному пользователю, честному, порой, человеку. А жаль )Как-то зайдя в банк, на входе мне встретился охранник, который выходил покурить. Недолго думая, я решил поговорить с ним – вот такой у нас вышел диалог:— Здравствуйте, хотел задать пару вопросов по безопасности банкоматов.— Попробуй.(в лоб) — Вы в курсе, что такое скиммер? — Мм, слышал, а что?— Недавно первый раз встретил такое устройство – обнаружил его только тогда, когда карточку уже вставил, но код не ввел. Могут ли, не зная пин-кода, расплачиваться от моего имени, например в интернете или простых магазинах? — Вот это, честно, сказать, не знаю. Но береженого бог бережет – зайди, вон, да поменяй код, это 10 минут займет. А где встретил штуковину-то?— Там-то. Но, честно сказать, был удивлен – думал, что такое только в штатах, а пишут про них только в журналах.— Хех…в штатах =) ты же в России живешь. Пока американцы что-то придумывают, у нас уже сделают «анти». У них вирусы, у нас уже антивирусы и наоборот. Так что в стране желания грести деньги, ничего не делая, таких устройств не может не быть.— Даже так! И много у нас… по Москве? — Да хватает. Ты вот где живешь?— Там-то— Ну… недалеко от меня. Поискать – найдешь ;)— Интересно. И чего ж с ними никто не борется? — Да как не борются… борются. Просто раз они есть, значит это кому-то надо.— Верно, нет дыма без огня. А как начальство банков к этому относится, они в курсе?(Взбодрившись) – Конечно! )— Вах. Т.е, получается, что не убирают хотя бы только потому, что начальству это тоже выгодно?(Улыбаясь) – Ну… всяко бывает. А тебе это вообще все зачем? — Да вот, столкнулся случайно, хотел узнать.— Смотри, осторожней. У вас вот есть какое-нибудь правоведение в институте?— Нет, но что-то подобное было.— И что, не учили, какие вопросы и кому можно задавать, а кому какие – нет? — Не учили, но я к вам исключительно в мирных целях ;)— Да понятно. Просто иногда, задав безопасный, казалось бы, вопрос, можно вызывать неадекватную реакцию. То же самое и с поведением. Знал вот, что по банкомату стучать нельзя?— Неа, а что, в ответ бьёт? ;)— Нет. Но это уже может попасть под порчу имущества. Так у нас на днях зашел один пьяный, стукнул – приехал фургон, скрутили и забрали. Там же датчиков полно внутри… и пойди докажи, что ты его не взломать хотел.— Серьезно у вас тут. Ладно, давайте вернемся. Расскажите что-нибудь про их устройство, как крепят, как обслуживают?— Ну а чего тут рассказывать. Как устроены, не знаю точно, но обнаружить не так уж сложно. Это бабулькам 80-летним, которых государство все это время нае*ывало, уже не понять этих приколов, а ты если видишь, что что-то торчит – не суй и все, сними в другом месте.— А если оторвут и смотаются?— Ну оторви =) Сам понимаешь, такие вещи не без присмотра… не сразу, так потом где-то найдут. Похлопают по плечу, сам не заметишь.— Интересно… и что, совсем никому нет дела до этого всего?— Ну почему… бывают, иногда, показательные выступления – проезжают спецы, всем, кому надо пальцы загнут для галочки… а потом снова все на свои места встает. — А у вас тут было чего интересного?— Неа, это больше на банкоматах без банков, хотя всякое бывает.— А, ну у вас-то тут банк вон, да… — Максимум бывало, что деньги выхватят… но это ведь опять, чья ошибка? Вон, глянь… вышел с пачкой денег… чего вот не спрятать сразу, не убрать? Пересчитать же потом можно… или пин-коды вводят, не закрываясь… а подсмотреть тысячей способов можно. А потом жалуются…— Где ж ваш автомат-то? ;)(улыбаясь) – Да я вон, на танке сегодня. Далеко не убегут, если что ;) Ладно, давай, не май месяц, пойду. Мотай на ус.— Успехов, благодарю!В общем, вот такой диалог вышел, но конкретики почти никакой. Позже случайно мне удалось найти в сети человека в теме, которого повторно найти никак не удастся ) Я не занял у него много времени, но все же, немного информации, опять же подтверждающей мои догадки, появилось:Я: Какие бывают по типам (способ хранения, способ передачи, питания)? Какие бывают по размерам? Какие примерно цены и от чего зависят? Откуда берутся – делают ли их серийно?Он: Каждое устройство индивидуально по сути — затачивается под конкретный АТМ, т.к. основное требуемое свойство — незаметность. Серийно их никто не делает, т.к. это все же уголовно наказуемое деяние, но это не значит, что их все делают вручную. Цена на скиммер «под ключ» — от 5000 и выше. В основном это автономные устройства со встроенной памятью — «поставил, подождал, снял», вариантов с передачей данных у меня не было, но очевидно, что это гораздо безопаснее для владельцев.// Тут собеседник не рассказал про размеры девайсов, но я нашел пару интересных изображений в интернете. Да-да, даже такая вот «зажигалка» (правильнее, «Кубик») в руке человека рядом с Вами в состоянии утянуть Ваше состояние.Я: Как их крепят? Бывает тупо поверх клавы и щели. Но слышал, что чаще просто ставят камеры. Может еще что-то придумали?Он: Все верно — в простых моделях крепится только на картоприемник + камера для снятия пинкода. Способов крепления камеры достаточно много.// Окинув взглядом фотку банкомата, прикидываю, куда можно было бы спрятать камеру. Если это не «дополнительная» камера в банке, которая выглядит как настоящая, то вариантов остается не так много. Если человек высокий ростом, то камеру можно приклеить к верхней части АТМ, выпирающей над клавой – просто так их не увидишь, но слегка нагнувшись – легко. Или же можно повесить свою «лампу» для освещения, в прозрачный пластик которой спрятать «зёрнышко» от камеры (видели, каких размеров камеры в некоторых видео-домофонах? “.” – чуть больше этой точки) Или вот как на фотке из инета – в коробочке для рекламок, изначально награжденной только информационной функцией. Ну или ваш код могут тупо подсмотреть рядом стоящие люди ;) Поэтому зеркала на банкоматы клеят неспроста. Заботящиеся о клиентах банки на свои АТМ так же ставят специальные «заборы» на клавиатуру, которые помогают не палить код.Я: Где чаще всего бывают – в закрытых или открытых банкоматах? Может какие-то банкоматы или банки особенно безответственно относятся к этому, а какие-то — дорожат клиентами? Излюбленные места обитания? Где больше — в Москве или Питере?Он: Предпочтительнее открытые банкоматы. Чем больше проходимость народа — тем лучше. Насчет банков – хз. Любой фрикер тебе этого не скажет или заведомо «поменяет» нужные названия банков местам ;) Следят, конечно, все, но говорить о том что их АТМ заскиммили не будет никто. Где больше – имхо, в Питере. Но и в Москве, конечно, тоже хватает.Снова я: Еще немного по ценам – купить можно только в инете или в супермаркетах тоже продаются? ;) Что в этом случае меняется? Что делать человеку, если он снял скиммер? )Он: Готовый комплект, купленный на Митино или еще где — в 99% окажется нерабочим или уже использованным, и то, трудно найти то, что тебе надо. В интернете народ гораздо охотнее идет на контакт, но точно так же можно купить не то или же по завышенной цене. Цена, опять же, под заказ — от 5000. Если удалось снять скиммер — дело за малым — слить оттуда инфу и продать ее кардерам. Или дропам. Самому сливать денежный эквивалент — равноценно явке с повинной в органы.// Хм, что-то опять эта цифра в 5K usd ;) На форумах же предложения совершенно разнятся – от 1К до 15. Я: Кто вообще этим занимаются — ведь не просто пионеры-радиотехники? Как их устанавливают — под камерой банкомата каждый день ставят с утра и снимают перед приездом инкассаторов? Или даже они не помеха? )Он: Кто занимается? Умные и осторожные фрикеры (не путать с фриками – моё прим.). Самый распространенный способ установки — после приезда и отъезда инкассаторской группы, через 5-10 минут «группа» возвращается. и опять уезжает. Схема приемлема для ОПГ, которые могут позволить имитировать спецодежду мастеров. Более простой вариант — установка на вечер-ночь, т.е. людей мало, инкасса не приедет гарантированно до утра (время приезда вычисляется простым наблюдением), но и безопасность выше. Еще устанавливают и снимают скиммеры обычно «шумной группой студентов», т.е. толпа окружает банкомат («блокирует лохов»), ставится скиммер… ну и варианты по фантазии…Я: Хочется каких-то цифр ) Их риск хотя бы оправдан — насколько прибыльная такяа рыбалка? Или если не в баксах, то хотя бы в количестве дампов. Как часто тырят скиммеры? )Он: Цена свободы у каждого разная, кто-то рискует, кто-то нет. Но не всегда же обязательно все делать самому ;) не обижай с % и все будет. Количество дампов = количеству карт вставленных в АТМ. Улов — никто никогда не говорил конкретных цифр. Но окупается не только аппарат, но и хватает на новый. Может слышал песню «В ресторане обеды, в доме нету соседей, а БВМ 7-ой серии — удачнее велосипеда» :) Я: Слышал ;) А что вообще делают с дампами, каков их дальнейший путь? Нужно ли человеку менять пин-код, если он только вставил карту, но не ввел код? Как быстро дамп попадает «в темные руки» и сколько у человека есть времени на спасение бабосов? Дальше делают копию карточки или что вообще можно сделать, имея дамп со снятым пином? Как долго занимает расшифровка или это дело 5 секунд? Он: см выше — их сливают кардерам или дропам. У кого какие контакты есть. Если пин не введен — менять его не нужно. Дамп попадает в руки дропов обычно через сутки-двое после снятия скиммера. Но если «операция» прошла успешно, человек узнает о том что с его счета ушли деньги только по смс-банкингу или при следующей проверке карты. Расшифровать что? Дамп? Дамп не расшифровывают. Его просто клонируют. Да, у дропов есть аппараты по клонированию карт (тоже дорогое удовольствие). Уже не так все двусмысленно, как в первом диалоге, но тем не менее, картина все четче рисуется. Дали бы мне рукописи Да-Винчи, я бы их в миг разгадал ;)Полазив в инете по различным форумам, был удивлен тому, сколько же информации в свободном доступе. Схемы, распайки, прошивки, мануалы, пошаговые инструкции и помимо этого, самое главное – люди, обладающие самым ценным – знаниями, информацией.Схема считывающей головки сканераСхема GSM-скиммераПросто так, естественно, никто ничего не расскажет ) Мне даже двусмысленно не решились что-то рассказать, это же их хлеб. С другой стороны – всех денег не обналичить, а кто-то в нашей стране до сих пор зарабатывает честно. Так и получается – с одного конца провода — люди, боящиеся погонов, с другого – люди, боящиеся потерять деньги. И все же, не стоит забывать, что кто-то еще да работает честно.Какие из этого делать выводы, каждый для себя делает сам ;) Для тех же, кому лень додумать, дам пару советов, которые помогут не потерять бездарно последние купоны на карточке:1. Прежде чем подойти к банкомату, оглянитесь. Пьяны, заметили что-то странное-подозрительное – отложите съем до лучших времен. Не паранойи ради, безопасности для – оглядывайтесь по сторонам так же, как и при переходе через дорогу.2. Вы должны четко знать, как выглядит банкомат Вашего банка (если не снимаете деньги с комиссией со всего подряд). В большинстве своем они имеют: НЕвыпирающую из ровной плоскости клавиатуру, плоскую или вдавленную щель приемника карт. Если видите, что клавиатура выпирает хотя бы на пару миллиметров или картоприемник торчит наружу – снимите деньги в другом месте. Если надумаете проявить отвагу и решите позвонить, неважно, куда – в 02 или в службу банка – делайте это не у банкомата! 3. Вставив карточку не спешите вводить пин-код – осмотритесь еще раз =) Ни-че-го нестандартного на банкомате быть не должно. Если кто-то рядом стоит, вводите код так, чтобы его не увидели. 4. Сняв деньги, не размахивайте ими на право и налево. Вытащили карту > убрали > вытащили деньги > быстро пересчитали и сразу надежно убрали > взяли чек > испарились. 5. Однажды вам могут позвонить якобы из банка и сказать: «Здравствуйте, укважаемый Лошидзе Баобаб Бабосович, вас беспокоит служба безопасности Вашего банка. В целях безопасности наших клиентов, мы переводим их с 4-значного пин-кода на 6-значный. Просьба сообщить Вас нынешний пин-код и новый желаемый или же то же самое проделать, придя к нам в банк». Естественно, переться и возиться с бумажками многим будет лень, поэтому, смею предположить, что добрая половина тупо скажет свой код. Поэтому…. НИКОГДА и НИКОМУ не говорите свой пин-код! Ни тётям в магазине на кассе, ни, тем более, дядям. Даже работники банка – от тёток на ресепшене до совета директоров – ни под каким предлогом. У них и без этого полно вариантов на тему как оставить вас без штанов :)6. Если Вас уже бьют – громко кричите — их больше ;=)))На десерт – пара фоток, как может выглядеть ваш похититель: Шутко )1. Клавиатура может выглядеть так:Обычно кнопки – плоские, но бывает, что и кнопки выпирают… Не-не-не, в них точно ничего нет, это уже точно паранойя… или… :)))2. Картоприемник:Девайс на последней картинке вызывает у меня некоторые сомнения – с одной стороны, ее правая часть свободна (часть, где окажется магнитная лента), т.е. по сути, сканера там уместиться не должно и этот девайс, в итоге – так называемый антискиммер. Но здесь он сделан настолько ужасно (в том числе и по исполнению), что от скиммера его не отличить. Или же его можно оторвать и приклеить на его место скиммер… в общем, глупость сделали ) Насчет антискиммеров — обезопасить картоприемник банки могли бы без проблем – использовать абсолютно плоскую щель, специальные неровности, мешающие установке поверх любого объекта – но опять же… хотели бы – сделали ) Вот примеры попыток усложнить жизнь:(Тоже глупая, на самом деле, затея, т.к. скиммер замаскировать под такое дело легко, зато даже сам по себе антискиммер опять же уже наводит на какие-то мысли)Иногда можно встретить наклейки или стенды «как должен выглядеть банкомат», и, мол, если он выглядит иначе, не пользуйтесь им. Понятное дело, что поверх этого можно наклеить-повесить что угодно :) ВСЁ, лишь бы не работать! )Успехов!"
    },
    "doc_79": {
        "url": "https://habr.com/ru/post/211701/",
        "title": "Ловец молний",
        "text": "Да, зима — не лучшее время для статьи о молниях. Но время близится! Сезон дождей и гроз всего через каких-то 4-5 месяцев, а работы – хоть отбавляй.Все видели молнии? Молнии красивые, витые. Вы знаете как они действительно выглядят? Да, их удается сфотографировать, но только с одной стороны, и через раз.А мы научились ловить каждую молнию, да ещё строить полную 3d модель каждой, даже невидимой в облаках молнии! Более того, через 15 секунд после удара в любой точке над Москвой, её координаты и трёхмерный профиль сразу же обновляется на нашем сайте!Под катом 6 мБ трафика.Что такое молния? Как она зарождается? Википедия даёт самый полный и развёрнутый ответ, но краткая выжимка о сути молнии, важная дня последующего описания оттуда такая:Молнии сопровождаются вспышкой и громом.Молнии не бывает короче нескольких сотен метров и имеют среднюю длину 2.5 км.Молнии бывают наземные (которые бьют в землю, очень редкие) и внутреоблачные.И самое важное, как зарождается молния:В облаке происходит «Ударная ионизация», которая служит началом молнии и появляется «лидер-заряд», который будет далее пробираться через атмосферу, прокладывая дорогу основному заряду.Лидер спонтанно выбирает точку в пространстве, расположенную в нескольких десятках метров от себя, и с огромной скоростью перелетает туда, при этом создаёт «канал», и издаёт негромкий «хрясь»Лидер делает перемещение и останавливается в той точке, в которую прилетел и ждёт там несколько микросекунд. За это время из базового облака по всем до этого созданным каналам беззвучно проходит небольшой разряд, подпитывая лидера.Далее он снова выполняет пункт 2-3, пока не достигнет либо земли (что крайне редко), либо другого скопления заряда в другом облаке, где он рассеивает свой заряд.Как только лидер достиг точки разряда, по всем созданным им каналам за доли секунды проносится основной заряд, который до этого ждал в тучке, силой тока несколько сотен тысяч ампер, при этом создаётся «БАБААААХ»Плюс ко всему, нередко лидер раздваивается или растраивается (не грусти, лидер, не расстраивайся), создавая новые и новые ответвления.Самое важное из сказанного для дальнейшего описания: молния делает звук «хрясь-хрясь-…-хрясь-хрясь-БАБАХ», и то же самое происходит со световым излучением от молнии.Так давай её поймаем!«В смысле поймаем!?» спросите вы. Ну да, просто выражение красивое. На самом деле мы захотели оцифровать молнию. Мы можем её увидеть и услышать с трёх различных мест и методом триангуляции воссоздать картину всей молнии, абсолютное местоположение лидера в каждый момент молнии на карте города, а так же его длительность нахождения там.Для этого нужно во-первых нужно взять карту Москвы, и пометить на ней точки, где будут располагаться наши базы-сенсоры-передатчики. Были выбраны районы Митино, Парк Победы и Марьина Роща. Отличный треугольник! Да и находятся они все на возвышении, что тоже немаловажно.Базы-сенсоры-передатчикиДля того, чтобы увидеть и услышать молнию мы закупили фотодиоды, микрофоны. Но не простые. Молнии в Москве – это всегда дождь. Дождь для электроники – всегда смерть. Поэтому мы значительно потратились и купили всё водонепроницаемое.Для обработки сигнала были закуплены три платы Raspberry PI. Для передачи сигнала с каждой базовой станции на основной компьютер были использованы USB-модемы с мобильным интернетом не скажу какой компании. Питание каждой базы происходило от трёх автомобильных аккумуляторов.На каждую базу было использовано 8 фотодиодов, расположенных по кругу, направленных в разные стороны. Микрофон был помещен в центр круга, направлением вверх. Софт был запрограммирован таким образом, чтобы в момент, когда появляется вспышка (подразумевается, что вспышка задетектируется всеми базовыми станциями одновременно, что является началом отсчёта), начинается высокочастотная запись с микрофона.Установка базыНе думали мы, что это будет самая сложная часть проекта. Чтобы расположить на крыше какого-либо дома хоть козюлю из носа, требуется просто неимоверная куча документов! Разрешение экспертизы, разрешение управляющей компании, договор, условия, вплоть до протокола собрания жителей дома. Столкнувшись со всем этим, мы решили пойти по другому, неправильному пути. Представляясь доставщиками пиццы, мы ходили по домам в ближайшей округе выбранных точек дислокации, искали, где можно нелегально проникнуть на крышу. И о чудо! В округе 500 метров в каждой точке нашлось по одному такому подъезду. Прикормив консьержек, мы затащили оборудование на крыши, настроили и довольные убежали домой…Осталось только ждать…Первая грозаНи разу в жизни я не ждал грозы так, как тогда. Ждали мы около месяца. И тут она пошла. Она случилась так внезапно и быстро, что мы даже не успели дожарить шашлыки на даче в 40 км от Москвы. Так быстро по обочине мимо пробок я ещё никогда не ездил.Первые сигналы были ужасными. Оно и понятно, микрофоны настроены абы как, плата запрограммирована тоже абы как, потому что не было ни единой возможности протестировать плату с софтом. Но, слава Богу, гроза шла около 5-6 часов, а нас было ровно трое. Помчавшись к точкам, где располагались наши базы, мы начали искать решение, как можно скорее. Прямо в подъезде под крышей (только тогда я сообразил, что можно было всё делать дома на удобном сухом кресле, через терминал). Наконец Сергей, один из наших, настроил всё как полагается и скинул нам по исходнику. Скомпилировав и запустив программу, в момент следующей молнии я понял, что всё работает превосходно! Осциллограммы записанных звуков были прелестны, особенно если отфильтровать медианным фильтром (+ незначительный ручной фильтр для красоты картинки):Тут настолько всё очевидно, что даже не надо пояснять, где пробирается через атмосферу лидер, а где идет основной разряд. На остальных платах появился совершенно аналогичный сигнал с небольшим смещением уровней и громкости! Плюс ко всему мы выяснили, что чем длиннее путь, на который перескакивает лидер, тем тише звук. Видимо, перескакивая на маленькие расстояния, проходит значительно больший ток, и диаметр нагреваемого воздуха больше, что приводит к более громкому хлопку. Ситуация немного напоминает эффект тоннелирования.Глядите сюда, сейчас выскочит молния!Обработав полученные осциллограммы в софте, созданном на Unity3d, мы получили их! Молнии! Конечно, не без проблем. Перечислю проблемы списком:Не сразу додумались брать за центр распространения звука не ту точку, где покоится лидер, а середину «канала», который он создаёт.Очень мешала частота дискретизации, шум дождя и сигнализации машин в момент грома.На одной из трёх станций, которую мы поместили вглубь квартала, в дом средней высоты, безумно портило картину эхо, идущее от соседних домов и от земли. Пришлось перевозить станцию на другой дом.Требуется абсолютно точная позиция баз, для этого нам потребовалось ещё раз съездить к нашим базам и записать их точные GPS+ГЛОНАСС координаты.Но вот он результат:Более того! Самое потрясающее то, что в следующую грозу мы насчитали 8 видимых молний. При этом вспышек с громом было 23, т.е. 15 молний было внутри облака, недоступных для человека. Но наши станции даже их оцифровали! Мы увидели невидимые молнии. Чем ближе молния оказывалась к центру треугольника, тем точнее удавалось её прописать.Вот, ещё немного картинок молний, наложенных на Москву, вид сверху. Если Вы нашли тут свой дом, не волнуйтесь, ни одна молния в дом не попала.И вот моя любимая, а может это сбой программы. =)НапоследокВ данный момент мы готовим сайт на котором будут в онлайн-режиме транслироваться все 3d изображения молний. Можно будет поглядеть на город с точки расположения молнии, а так же посмотреть на молнию как бы из своего окна, сравнить с реальной молнией и убедиться в точности измерения. Можно будет посмотреть все молнии, их точную позицию и точное время, в которое они ударили, а так же просмотреть предыдущие грозы и скачать самую понравившуюся молнию. Молнии пока что будут обрабатываться только для Москвы, но очень бы хотелось распространиться и на другие, более дождливые города.Да, признаюсь, помимо всего прочего нам ещё очень сильно мешали ветра, перепады температур и перепады давления атмосферы на пути от молнии к микрофону, поэтому идеальной автоматической оцифровки сделать не удалось. Мы уверены, что программа обработки врёт на 50-100 метров в каждой точке. Но всё равно эти 50-100 метров незаметны на фоне общей длины молнии в 2500 метров. Было бы желательно установить маленькие метеостанции с барометром, термометром и флюгером. Плюс ко всему микрофоны оказались недостаточными по дискретизации, и они дают много шумов. По произведенным расчётам мы выяснили, что для определения местоположения молнии с точностью до 20 метров требуется ещё как минимум 4-5 станций, уточняющих результат. Плюс ко всему желательно поставить на каждой станции по 2 микрофона для уточнения.UPD1: Многие хабровчане просят разместить более детальную информацию о технической части проекта. С удовольствием напишем, нужно немного времени."
    },
    "doc_80": {
        "url": "https://habr.com/ru/post/161301/",
        "title": "Подделываем вашу подпись при помощи шарнирного механизма. Теорема Кемпе",
        "text": "В этом посте я расскажу про программу, которая подделывает любую подпись при помощи шарнирного механизма. Программа основана на теореме Кемпе, доказанной в середине 19-го века.Теорема КемпеС развитием техники и появлением поездов у пытливых умов встала очень интересная проблема, а можно ли создать шарнирный механизм, который переводит круговое движение, в движение по прямой, выражаясь по-другому, рисует прямую. Шарнирный механизм — это много скрепленных между собой палочек, которые могут свободно вращаться в точках креплений. Многие ученые бились над этой проблемой, придумывая хитроумные механизмы, но все они рисовали неточные прямые. Вот, например, механизмы Ватта, Чебышева и Хойкена:Многие математики считали, что проблема создания шарнирного механизма, рисующего идеальную прямую линию, является в принципе неразрешимой, пока в середине 19-го века не был открыт гениальный механизм Липкина-Посселье, который рисует точную прямую:В этом механизме все палочки одинакового цвета имеют одинаковую длину. Доказать, что механизм действительно рисует прямую можно прямыми выкладками, как говорится, в лоб. Но люди, знакомые с преобразованием инверсии, могут увидеть довольно четкую логику в доказательстве. К моменту изобретения механизма Липкина-Посселье уже смазочные материалы были настолько хороши, что в технике могли обходиться без этого идеального преобразователя в прямолинейное движение. Ведь можно через еще одну палочку передавать почти прямолинейное движение на поршень. Эта палочка не будет всегда идеально параллельной направляющей поршня, но в этом ничего страшного нет. В итоге механизм Липкина-Посселье так и не нашел широкого применения в технике, но зато оказал огромное влияние на математику. Через несколько лет математик-адвокат Кемпе приводит алгоритм, как абсолютно для любой алгебраической кривой на плоскости построить шарнирный механизм, который умеет рисовать только эту кривую и больше ничего не умеет. Иными словами, существует механизм, ограниченный в движении одной степенью свободы. Двигаясь вдоль этой степени свободы механизм рисует нашу алгебраическую кривую. Прекрасное изложение доказательства Кемпе я нашел в этой статье. Напомним читателю, что алгебраические кривые, о которых идет речь в теореме Кемпе — это кривые, заданные уравнением , где  — любой многочлен. Например,  — это окружность радиуса ,  — наклоненная прямая,  — парабола. В своем доказательстве Кемпе использует много интересных идей, но ключевым инструментом построения является уже известный нам механизм Липкина-Посселье.ПроцессКак только я узнал о теореме Кемпе, я сразу же захотел написать программу, в которой пользователь может нарисовать любую кривую, скажем свою подпись, а программа аппроксимирует подпись алгебраической кривой, а потом по алгоритму Кемпе построит шарнирный механизм, подделывающий ее. Мне очень хотелось сделать веб-приложение, чтобы пользователю не нужно было ничего устанавливать на компьютер, чтобы можно было зайти на сайт и запустить все «в один клик». Так как я не программист, то это еще было для меня прекрасной возможностью познакомиться с JavaScript и HTML5.После того, как я выучил доказательство Кемпе, передо мной встала очень серьезная проблема:как аппроксимировать подпись алгебраической кривой  с хорошей точностью, быстро, да еще и на медленном JavaScript? Существует очень простой, но неподходящий нам способ аппроксимации кривой объединением маленьких окружностей, разбросанных вдоль кривой, как показано на картинке:Каждая маленькая -ая окружность является, очевидно, алгебраической кривой, так как задается полиномиальным уравнением , где  — центр окружности, а  — ее радиус. Алгебраической кривой, очевидно, будет и объединение всех маленьких окружностей, так как это объединение будет задаваться полиномиальным уравнением . Но как вы видите, такой вид аппроксимации нам совершенно не подходит, потому что возникает очень много точек самопересечений. Хотелось бы иметь более «красивую» аппроксимацию. Оказывается, проблема «красивой» аппроксимации сложная как с математической точки зрения, так и с вычислительной. Чтобы как-то прочувствовать это, полезно представить алгебраическую кривую  как пересечение поверхности  и плоскости . Линия пересечения очень чувствительна к коэффициентам многочлена , она совершенно неконтролируемо может быть несвязной, иметь точки ответвлений, что и будет портить «красоту» аппроксимации.После недели экспериментов с различными алгоритмами, все мои попытки хоть как-то аппроксимировать кривую оказались тщетными. Все алгоритмы работали очень медленно и плохо. Я почти сдался, предварительно запостив вопрос на mathoverflow, где традиционно сидит много профессиональных математиков. В вопросе я вскользь упомянул, что мне это нужно для того, чтобы подделывать подписи шарнирами. Каково было моё удивление, что через день-два мне ответил математик Михаил Капович. Ответил «не в бровь, а в глаз». Как оказалось, он когда-то занимался теоремой Кемпе и вместе с Джоном Миллсоном в своей статье доказал, что можно построить шарнирные механизмы не только для алгебраических кривых, но и для кривых, которые более естественно подходят для задач аппроксимаций, а именно, для кривых, заданных параметрически полиномиальными выражениями: Такими кривыми проще простого аппроксимировать любые непрерывные кривые, в том числе и нашу подпись. Можно аппроксимировать так называемыми полиномами Чебышева, а можно сначала приблизить рядами Фурье, а потом тригонометрические функции в рядах Фурье приблизить рядами Тейлора. Получается, что вместо того, чтобы пытаться аппроксимировать кривую алгебраическими кривыми, лучше изменить само доказательство Кемпе и научиться строить шарнирные механизмы, умеющие строить более подходящие для задач аппроксимации кривые.Вся эта история по ощущениям была похожа на находку огромного алмаза. Но, к своему стыду, я не до конца разобрался в той статье. Статья написана довольно сложно. Но сам факт того, что существует решение моей проблемы открыл мне глаза. Я сообразил, что незначительным изменением оригинального доказательства Кемпе можно строить шарниры, рисующие косинусоидальные тригонометрические кривые, то есть кривые вида Такими кривыми даже еще легче аппроксимировать нашу подпись (теория рядов Фурье), чем кривыми со статьи Каповича-Миллсона. Действительно, из теории рядов Фурье следует, что на отрезке  функции  и  можно разложить в ряд по косинусам. Для точности аппроксимации  имеем: Коэффициенты  и  легко находятся. Нужно просто умножить равенства слева и справа на  и проинтегрировать от  до , тогда в правой части почти все интегралы обнулятся, кроме одного при члене  в первом равенстве и при члене  во втором. В итоге получится:Я очень долго думал размещать ли в этом посте алгоритм построения шарниров, которые и строят эти тригонометрические кривые. Потом я понял, что это добавит математической скучности в текст. Люди обычно не любят в текстах такого рода читать длинные доказательства. Поэтому я обойдусь просто ссылкой (upd: зеркало). Любопытные могут посмотреть.A вот, собственно, и само приложение, которое подделывает вашу подпись: david.wf/linkage. (upd: зеркало) Прошу заметить, мышкой можно двигать конструкцию, а скроллером — приближать и удалять (upd: степень аппроксимации тоже можно менять специальным ползунком «approximation»). Приложение работает на современных браузерах, на старых я не тестировал. Меньше всего тормозит на хроме, так как только хром намного быстрее других браузеров рисует прямые (пруфлинк). Признаться, я потратил много сил на оптимизацию, чтобы ничего не тормозило на слабых компах, но, скажу честно, особых успехов не достиг. Еще раз подчеркну, шарнир, который строит программа ничего не умеет рисовать, кроме вашей подписи. Шарнир приводится в движение крутящимся синеньким треугольником — «двигателем»."
    },
    "doc_81": {
        "url": "https://habr.com/ru/post/196282/",
        "title": "О космической доброте и Челябинском метеорите",
        "text": "Пока NASA находится в коматозе, самое время рассказать о том, как российская космическая доброта, одержала маленькую победу над российским космическим равнодушием. Сегодня снова поговорим о нашем спутнике Электро-Л, и о том как Хабр может творить маленькие чудеса.Надеюсь, многие уже знают о российском метеорологическом спутнике Электро-Л, который третий год работает на геостационарной орбите. Я уже неоднократно рассказывал о нем, и демонстрировал результаты его трудов. Сегодня поделюсь еще одной позитивной новостью о спутнике.Он снимает видимый диск Земли один раз в полчаса, и его снимки находятся в открытом доступе. Поэтому их обработкой заниматься может каждый. Можно делать видео, гифки, десктопы, свободно скачивать и распечатывать фотографии. Здесь можно найти программу для Windows, которая выводит снимки на рабочий стол. Здесь – подписаться на твиттер робота, который ежедневно присылает новое фото с орбиты. Короче: спутник дарит красоту Земли всем. О том, что результаты работы Электро-Л интересны не только нам, но и западной аудитории, даже избалованной изобилием от NASA, говорит, в том числе, недавняя серия публикаций в американских СМИ. Кроме того, его снимок 28 сентября занял место на насовском ресурсе Astronomy Picture of the Day. И эта публикация вызвала немало восторженных отзывов зарубежом.Снимки его были доступны всем, но не все. Дело в том, что у Электро-Л фактически два оператора: ФКА Роскосмос и Федеральная служба России по гидрометеорологии и мониторингу окружающей среды (Росгидромет). Роскосмос принимает и выкладывает спутниковые снимки через свое подразделение: Научный центр оперативного мониторинга Земли (НЦОМЗ). Росгидромет принимает и обрабатывает снимки через ФГБУ \"НИЦ «Планета». Проблема была в том, что часть снимков в течение суток: с 6:30 по 8:00 по московскому времени НЦОМЗ не принимает, а значит их нет на открытом сервере. В это время данные принимают в Новосибирске в сибирском отделении «Планеты».Поэтому видео и анимации, которые собирались на основе снимков НЦОМЗ содержат неприятный перескок в освещении, который слишком заметен, и нарушает наблюдаемую гармонию вечного движения Земли:По этой же причине мы не смогли увидеть облачный след Челябинского метеорита, который он оставил в утреннем небе, во время своего феерического пролета 15 февраля в 7:20 МСК. В тот день снимками со своих спутников похвалились европейцы и китайцы:Электро-Л имеет более удачный угол наблюдения, но упал метеорит в неудачное «новосибирское» время, и попытка добыть снимки официальными средствами успехом не увенчалась.Пришлось довольствоваться только расползающейся тенью, снятой после 8:30:Снимки не смогли допроситься даже СМИ.Однако недавно на почту одного из админов группы Электро-Л Вконтакте пришло письмо:Добрый день. Вас приветствует Захватов Михаил, руководитель научного отдела СЦ ФГБУ «НИЦ „Планета“. Случайно наткнулся на статью на Хабре про Электро-Л. Откровенно говоря, был удивлен существующей проблемой отсутствия информации в свободном доступе за 4 „наших“ срока. С удовольствием решили исправить „недочет“. В итоге доработали программное обеспечение и открыли новый выходной поток на наш публичный фтп-сервис. Структуру и содержание пытались выдержать в формате НЦ ОМЗ.ftp1.rcpod.ru/ElectroLМоя реакция от прочтения: (Осторожно только с их FTP, а то мощности у них слабее чем НЦОМЗ, хабраэффект может не выдержать)Данные начали загружаться с сентября, поэтому февральский метеорит так и остался в глубинах Росгидромета. Зато, можно, наконец-то, делать плавную анимацию суточного движения солнца:Именно эта анимация осеннего равноденствия, вместе со статичным фото, «пошла по миру» и засветилась на APOD:Обидно, что данные снимки, и факт их заграничных «гастролей», почти не заинтересовали отечественные СМИ. Только РИА-Новости написали об этом в своем Twitter. Еще новость вышла на gismeteo.ru, astronet.ru и, как ни странно, на украинском сайте facenews.ua. Я отправлял ссылку на почту в «Российскую газету», но, видимо, для них такое событие значимости не представляет. Хотя, что с них взять, если у них рубрика «Космос» входит в «Гуманитарный блок»?Но космические энтузиасты ненасытны! Я написал Михаилу просьбу выложить снимки за 15 февраля 2013 года. И он, хоть и был в отпуске, но обратился к своим коллегам, которые добавили на сервер четыре архива за нужные часы. И вот, хоть и через полгода, но Челябинский метеорит, вид сверху, с расстояния 36 тыс. км:(В левом верхнем углу)Данный снимок запечатлел след в небе, который сформировался через 10 минут после падения. Видно, что он уже освещается солнцем когда ниже еще темнота, т.е. находится существенно выше, чем облака на той долготе. При желании, по спутниковому снимку, можно определить высоту сформировавшегося облака, ее толщину и протяженность, оценить направление и место предполагаемого падения небесного тела. Помню в первые часы, и даже сутки после события — это были важные вопросы, над которыми бились, как профессионалы, так и любители. Но снимков со спутника в открытом доступе не было. Не знаю, использовались ли данные Электро-Л нашими учеными, но что-то мне подсказывает, что такой возможностью пренебрегли.(Синяя точка — Челябинск).Любопытно, что примерно в настоящее время происходит операция по подъему самого крупного фрагмента метеорита из озера Чебаркуль. А у нас тут свои успешные раскопки на серверах Росгидромета.Теперь, наконец, мы имеем в открытом доступе все снимки с Электро-Л. Можно использовать их на свое усмотрение. Например, было бы здорово увидеть аналог погодного сайта типа sat24.com или что-то похожее. (Реализовать эту идею силами энтузиастов не получилось, так, что дарю бизнес идею ;) Снимки можно использовать в оформлении помещений, особенно школам такое дело не помешало бы. Ну, а я буду продолжать выискивать на его кадрах какие-нибудь интересные и/или красивые события и, при возможности, рассказывать об этом.В заключение хочется поблагодарить Михаила Захватова, за его решение «исправить недочет»; всех сотрудников „НИЦ “Планета» и НЦОМЗ за то, что делятся с нами результатами работы отечественного аппарата; НПО С.А. Лавочкина, за то, что построили Электро-Л; и всех сотрудников космической отрасли причастных к созданию, запуску и эксплуатации этого спутника. Надеюсь, данный пример покажет всем ответственным лицам, что открытость данных – лучший способ демонстрации работы наших космических аппаратов, и, что качественный наглядный результат – говорит сразу на всех языках и лучше тысячи громких слов.Спасибо!"
    },
    "doc_82": {
        "url": "https://habr.com/ru/post/222965/",
        "title": "Что не так с редизайном Хабрахабра",
        "text": "Это случилось: Хабр получил новый дизайн в стиле остальных ТМ-продуктов.Вообще-то я люблю перемены, и редизайн привычных вещей вызывает в первую очередь оптимизм. Это как перестановка мебели в квартире: обстановочку освежать надо. Но помимо приятного чувства новизны некоторые изменения вызывают вопросы. Понятно, что Хабр уже не торт и мы всегда будем помнить его тёплое ламповое старое лого, но я хочу поговорить про то, что можно оценить вполне объективно — про юзабилити нового хабрадизайна.Две ложки мёда▌Ссылка на создание постаФункция «создать пост» теперь получила отдельную кнопку в самом главном меню. Раньше это была целая история — выучить алгоритм, по котором можно найти кнопку с карандашиком, чтобы написать пост. Возможно, в этом была своя сермяжная правда — Хабр не ЖЖ, как нам напоминают в правилах, поэтому перед тем, как что-то написать — нужно подумать. Но намеренное усложнение навигации, конечно, не тот путь, который ведёт к качественному контенту, так что вынос кнопки «Написать пост» на видное место — безусловный плюс и главное (для меня) положительное достижение редизайна.Смущает разве что выбранная иконка: плюс означает добавление чего-либо, но совершенно неочевидно, что это что-либо — пост. Чаще в подобных интерфейсах за ним скрывают разворачивание дополнительных пунктов меню. Старый добрый карандашик был бы куда понятнее — мало того, что иконка знакома всем авторам Хабра, она ещё и универсальна. ▌ПланшетизацияВторая ложка мёда — адаптация дизайна под тач-интерфейс. Это победа со слезами на глазах, потому что насколько пользователям мобильных устройств остро необходимы нормально адаптированный под них веб, настолько больше юзеров всё равно читают сайты с десктопов и лэптопов. Т.е. объяснять зачем затачивать дизайн под планшеты не нужно — это правильно и за это спасибо. Но стоит упомянуть о том, почему нельзя забывать про пользователей традиционных устройств. Поэтому этот пункт я повторю в недостатках редизайна.Бочка дёгтя▌ПланшетизацияКаких-то полтора года назад я написал исключительно популярный пост \"Что не так с Windows 8\". И одной из главных моих претензий к дизайну новой ОС было чрезмерное увлечение тач-штуками. Я писал о том, что рано отказываться от панели задач и на десктопах приложения во весь экран — пустая трата места. Время подтвердило мою правоту: в последнем апдейте Windows 8.1 приложения в режиме Metro получили отображение на панели задач и привычные атрибуты традиционных окон — кнопки «свернуть» и «закрыть».Теперь на те же грабли наступил Хабр. Планшеты — исключительно важная часть экосистемы гаджетов, но они дополняют мир ПК (я имею в виду устройства с вводом НЕ с экрана, а с физической клавиатурой, мышью и т.д.), а не заменяют его. Нельзя забывать про скучающий офисный планктон, который даёт большинство просмотров в рабочее время со своих десктопов и лэптопов, а вовсе не планшетов и смартфонов. Да, это претензия скорее концептуального характера. Но ошибка в стратегии обязательно вылезает массой мелких неудобств в повседневной деятельности. Поэтому, как говорят урбанисты Собянину — помните о немобильных гражданах.▌В поисках поискаЭто уже чисто юзабилити-момент: на сайте, где многие посты сохраняют свою актуальность годами, нельзя прятать поиск. Для Хабра внутренний поиск так же важен как для гугла, и должен быть всегда доступен. Сейчас же его спрятали аж за двумя кликами, причём поиск поиска абсолютно неинтуитивен — пришлось просто перебрать все вкладки. И это следующая претензия.▌Пора выйти из шкафаСтремление прятать меню и подменю за бесконечными вкладками — отличное решение для заботливой хозяйки, которая стремится к порядку, и знает, что и где у неё расположено. Но для гостя удобнее открытые прозрачные витрины, чем все эти шкафы с ящиками внутри ящиков.Разгадать значение иконок теоретически можно:Первая, понятно, ведёт на главную. Вторая — в профиль юзера. Третья — уведомления, четвёртая — уже пример дискриминации юзеров ПК, т.к. подобный значок меню используется именно в мобильных устройствах, соответственно если вы зашли на Хабр с планшета — среда поможет, и вы скорее всего догадаетесь, что это меню. Но в десктопных ОС такая иконка не используется, поэтому интуитивность решения моментально теряется. И про пятую иконку — добавление поста — я уже писал выше. Верните карандаш!Но догадаться, какие именно функции спрятаны в этих ящиках — практически нереально. Можно только тыкать во все вкладки по очереди, пока не выучишь наизусть, где что находится или чем «Посты» во вкладке «Трекер» отличаются от ссылки «Посты» во вкладке «Меню»:Это странное решение даже для мобильного интерфейса — во-первых, все эти пункты меню можно спрятать, за одной кнопкой. Разбивать 18 пунктов меню на 3 вкладки — это явно чрезмерная страсть к порядку. Во-вторых, их можно сделать более информативными, добавив иконки, превьюшки, нотификации.▌Нажми на кнопку — получишь результатИ ещё один минус нового меню — все 5 кнопок в нём выглядят одинаково, но действуют по-разному. Кнопки №1 и №5 — ссылки на главную и страницу создания поста. Кнопки №№ 2-4 — вызывают подменю без перезагрузки страницы. В результате, тыкая на ссылки слева, я дважды уходил со страницы этого недописанного поста — к счастью, автосохранение на Хабре работает надёжно. Но одинаково выглядящие кнопки с разными функциями — это косяк, превращающийся в неприятную угадайку. А что если автосохранение текста сглючит? Очевидно, что нужно придумать, как визуально отличить кнопки-ссылки от кнопок-меню.Резюме Общий счёт перемен — в пользу ретроградов:Ссылка «Написать»ПланшетизацияПланшетизацияСлишком далеко запрятанный поискСлишком много вкладок с непонятным содержимымПутаница с действиями кнопок в основном менюНо итог всё равно положительный: главное — желание меняться, а большая часть недостатков лечится совершенно безболезненно.P.S. Официальный пост.P.P.S. Денискин взял на карандаш:P.P.S. Процесс пошёл: в ТМ ищут UI/UX-дизайнера."
    },
    "doc_83": {
        "url": "https://habr.com/ru/post/497114/",
        "title": "Пора на свалку",
        "text": "Никогда не думал, что это случится со мной, но, похоже, я выгорел. А ещё мне стрёмно. Да, это ещё одна статья про выгорание.Я тут на днях смотрел на свою RSS-читалку и заметил, что под тегом «C++» у меня где-то три сотни непрочитанных статей. Я не прочитал ни одной статьи по плюсам с прошлого лета, и мне офигенно. Я не написал ни строчки осмысленного кода на плюсах за последние три месяца, с тех пор, как распустили отдел, где я работал, и мне просто супер. Я позволил себе хотеть больше никогда не писать на плюсах, и у меня появились крылья.Только стало страшно, потому что это давно уже стало куском моей самоидентификации. Я писал на плюсах лет 17, это почти две трети моей жизни, и как-то очень стрёмно всё это выкидывать. Всё моё сеньёрство-помидорство, львиная часть моего опыта — она там, в наступании на плюсограбли. Кто я без своего костюма?Короче, да, я выгорел. И я не знаю, что делать дальше.Я очень люблю плюсы. Помню, как схомячил учебник Стивена Праты за неделю поездок в школу в седьмом классе (ну хоть что-то хорошее от дороги в полтора часа в один конец). Помню, как читал распечатку туториала по ACE (помнит ли сейчас кто-то ACE?) на какой-то школьной экскурсии классе в девятом. Потом у меня появился КПК, куда я мог залить chm'ку Саттера и читать её на пьянке у друга на даче (куда меня почему-то больше не приглашали) классе в 11-м. Примерно тогда же я уже и начал зарабатывать первые программистские деньги — снова спасибо плюсам. Мои самые светлые воспоминания того периода — бессонные ночи и встречи рассвета под чтение того же Саттера, Мейерса, Александреску, каких-то статей на RSDN, под написание собственного кода. Я был наивным и не думал о будущем, но я ощущал, что оно у меня есть, и что я его кую вот прямо сейчас. Что все эти бессонные ночи и кодомарафоны на сутки и больше — это моё.Я люблю то время и благодарен мирозданию за то, что оно у меня было.Но теперь пришла усталость.Просто надоело ходить по минам. Нет, не по минному полю, а именно по минам, потому что на минном поле есть участки без мин. 17 лет назад, когда я начинал, писать свой вектор было весело и прикольно, и я мог это сделать за полчаса, а сейчас мне нужно несколько дней и постоянная консультация со стандартом. Тварь я дрожащая или право имею? Получу UB тут или нет? А тут? А тут? Да что там вектор, мы не так давно с khim довольно долго обсуждали, как написать строку, и едва смогли определиться с тем, каким может (или должен) быть тип элементов строки, чтобы не было алиасинга.Просто надоело смотреть на чужие культи. На моей позапрошлой работе они все были так молоды, вся жизнь впереди хорошие чуваки, и они хорошо знают своё дело — data science, статистику, предметную область, что угодно — но на плюсах они просто отстреливают себе ноги. Тяжело смотреть. И это бессмысленно. Там не нужно то, что плюсы могут дать, там не нужна высокая производительность (всё равно они пишут клей), не нужна близость к железу. К счастью, очередной пришедший тимлид это понял и перевёл всех на питон. Правда, тогда мне пришлось уйти, питон — не мой язык.А, да, производительность — эту самую топовую производительность плюсы тоже не могут дать.Сравнить два POD одним ? Нельзя.Использовать строки, где внутри , не думая об алиасинге? Нельзя.Передавать  в функцию, рассчитывая, что оверхеда не будет, как говорят из каждого утюга? Нельзя.Написать свой вектор для trivially copyable/constructible/etc types, который бы не рассчитывал на то, что компилятор вырежет часть необходимых по стандарту вещей? Нельзя.Вообще писать современный код, пытаясь при этом быть идиоматичным, но не рассчитывая на то, что компилятор свернёт все эти слои шаблонных конструкций? Нельзя.Нельзя. Нельзя. Нельзя. Спасибо, но рассчитывать на достаточно умный компилятор приятнее в других языках.Что там ещё? Автовекторизация? Держи карман шире! Даже в простейших случаях уровня «пробежаться по строке и подсчитать количество вхождений символа» (ассоциации подкидывают название файла ) рукописный ассемблер оказывается быстрее того, что генерирует  с нестандартными расширениями и дёрганьем интринсиков (а что остаётся от плюсов с интринсиками? шедулинг регистров?). Незначительно, на 2-5%, но и я не спец в ассемблере на этом уровне. Без интринсиков и оставаясь исключительно в рамках стандарта? Тогда проигрыш в 2-3 раза. Ладно, это с кодом, про это я скоро напишу отдельную статью.Даже выделить место под тривиальный тип и выть туда набор байт — нельзя без дополнительных приседаний, лайфтайм так не начнётся. До C++20. В C++20 начнётся, спасибо, починили, но когнитивная нагрузка языка от этого только выросла.Когнитивная нагрузка вообще только вырастает, даже когда какие-то вещи исправляют, потому что я же, мать его, специалист, я же должен знать, что починили, когда починили, и как было раньше. Да и C++ хорош поддержкой легаси, а это значит, что ты с этим легаси можешь встретиться. Например, в прошлом месяце ко мне обратился приятель с вопросом о том, как что-то сделать в C++03.И эта когнитивная нагрузка — она не потому, что задачи того требуют. Это не внутренняя непосредственная сложность предметной области. Это просто, ну, так исторически сложилось.Смотреть на трёхэтажные конструкции из костылей, кстати, тоже надоело. Было 20 способов инициализации, добавили uniform initialization syntax, стал 21 способ инициализации, но это всё ещё недостаточно uniform, поэтому в C++20 мы сделаем uniform из обычных круглых скобочек. Кстати, кто-нибудь сходу помнит правила выбора конструкторов с initializer list? Что-то там про неявные преобразования с потерей точности, но если значение известно статически, то…Я постарался выработать правило — если мне сходу неочевидно, что код делает, если мне приходится вспоминать стандарт, если я чувствую неуверенность, то не надо так писать код. Поэтому у нас есть uniform initialization syntax, но я пишу , без всяких фигурных скобочек, потому что я не хочу думать, как интерпретация зависит от определения  и . И мне стыдно так писать, потому что все посоны на раёне пишут посты в блогах, где всё красиво, с фигурными скобочками, со всеми новыми финтами.То есть, конечно, кто-то может сказать, что чего там эта неуверенность, надо просто код писать и оттачивать навык. Но я не хочу оттачивать навык интерпретации талмуда на полторы тысячи страниц. В других языках это не нужно, даже там, где монады и зигогистоморфные препроморфизмы. Да и 10 лет назад я вполне успешно писал продакшен-код за живые деньги на этих же плюсах, а опыта у меня было точно меньше. Значит, наверное, дело таки не только во мне.Да и проблемы возникают не только у меня.Вот NeoCode написал классную статью про концепты в C++20.  не то же самое, что  — не прелесть ли? Ну это чтоб не расслабляться, видимо. (╯°□°)╯︵ ┻━┻Или вот чувак описывает, почему при переходе на gcc-10 сломался vim. Спойлер: потому что там UB, которым компилятор пока что не пользуется, да и то не факт. Починено вот так: «The workaround vim uses to avoid these failures is to disable buffer overflow checks from being emitted by using -D_FORTIFY_SOURCE=1 define». Это vim, да. Ъ-юникс-хакеры, трушнее некуда.Или вот ESR (если эти инициалы о чём-то говорят) пишет, что C кончается.Или вот веселуха, например.Или вот хороший перевод. И да, я видел код, который ломался из-за похожих вещей.Или на днях у чуваков из PVS Studio была статья, где в комментах подискутировали, когда можно использовать /, а когда нельзя. Если разработчики статического анализатора ошибаются в таких довольно прямолинейных вещах, то кто и когда тогда вообще не ошибается?Или вот, кстати,  в плюсах таки пользоваться нельзя. Никогда. Лично мне потребовалось поковырять стандарт примерно час, чтобы убедить себя, что нельзя (как же так, я всегда думал, что можно!). Чуваки на канале про плюсы на фриноде сначала сказали, что можно, потом обсуждение свернулось в сторону «прост не используй  и не думай)))». Потом, правда, ещё один чувак таки попытался разобраться в проблеме, и попытался доказать, что  на плюсах использовать таки можно, потому что алиасинг (и что?). Но на практике, конечно, всем пофиг.А сколько CVE и прочих уязвимостей и падений появилось из-за того, что где-то не так с указателем поступили, где-то проверка не там была, где-то… Чёрт, как жаль, что я не сохраняю эти вещи.Короче, это была усталость.Потом я понял, что мне страшно. У меня развился паралич.Прошлым летом я устроился на совершенно шикарную работу, моими коллегами были умные, шарящие люди, ежедневно читающие блоги плюсистов и новые пропозалы в стандарт, обсуждающие на ланче что-то из программирования и каких-то новых фишек, а не то, как они провели выходные или какие планы на следующие. Для которых «так нельзя, это потенциальное UB» — не пустой звук, а повод потратить два дня на реализацию фичи вместо двух часов и искренне поблагодарить меня, что я обратил внимание. Но даже они делали ошибки. Я делал ошибки. Мы все делали ошибки. Они не знали то, что я считал базовыми знаниями. Я не знал то, что они считали базовыми знаниями. Никто ничего не знает. Если они не могут, то кто может?Мне страшно. Мне хочется забиться в угол и плакать. Я не могу быть уверенным как минимум в половине строк, что я пишу. У меня есть чувство, что я строю фекалодендритные конструкции, а убеждение хотя бы самого себя в том, что написанное имеет смысл, занимает неоправданно много времени. Что бы я ни делал, в моём коде будут UB. Я ни на что не могу повлиять. Психологи говорят, что выученная беспомощность тут где-то рядом, так что написание кода на плюсах для психики не очень полезно.Иронично, что больше всего уверенности у меня в наименее нужных в среднем продакшен-коде вещах — что-то там на темплейтах этакое намутить, на  вот. Может, это потому, что вся эта мета-ерунда куда ближе к так близкому сердцу принципу «если оно компилируется, то оно работает».А, кстати о темплейтах. Рабочий проект, где каждый -файл компилируется по 5-7 минут даже без оптимизаций? Время до первой диагностики компилятора в те же 5 минут? Пердёж компилятора на десятки мегабайт в случае ошибок? Да, я сохранял в файл и замерял ради интереса. Потребление памяти компилятором в 5-10 гигов на файл? Билдсервер с 32 ядрами и 64 гигами памяти, на котором нельзя запускать больше чем этак 8 параллельных потоков компиляции? Проект на несколько десятков kloc, собирающийся на ней полчаса? Получите, распишитесь.И тулинг. Мне куда проще находить, на что у меня тратится память, в том же хаскеле, который, как известно, только для факториалов и годится. Системы сборки? Ха. Апгрейд компилятора для прода? Жди лет пять после релиза стандарта. Пакетный менеджер? Ха-ха. Reproducible builds? Ха-ха-ха. Все места, где я работал, на это либо вообще забивали, либо вкладывали какое-то совершенно неадекватное количество ресурсов. Я понимаю, почему так происходит, у этого всего есть абсолютно логичные и объективные причины, по-другому и выйти не могло, но я устал так жить.Это был страх от языка, но я пропустил его через себя. Три месяца назад меня уволили, я пришёл домой, расслабился, вот уже три месяца пишу код для себя (не на плюсах!), сделал пару мелких проектов и начал один покрупнее, и мне хорошо.Было хорошо.Совсем недавно я поймал и осознал страх другого рода, куда более экзистенциальный.Кто я такой? Я программист на плюсах. Я пишу код на плюсах две трети жизни. Это действительно стало огромной частью моей самоидентификации. Почему я претендую на синиора? Потому что я успел отстрелить себе миллион ног и натаскать свою нейросеть в черепушке определять, какая нога отстрелена на этот раз, по отсвету дульной вспышки. Потому что все интервью, касающиеся языка, я проходил, как тут говорят, with flying colors. Потому что я могу даже не готовиться к интервью, и всё равно его пройду. Потому что я могу показать особо интересные куски кода на гитхабе, и для меня скипнут как минимум телефонное интервью, а иногда скипали и техническое собеседование, разговаривая только о жизни или в лучшем случае о дизайне систем, релевантных для места работы.А так придётся выкидывать весь этот опыт в корзину и начинать почти с нуля. Ну, да, у меня есть какое-то там системное мышление, я дизайнил компиляторы, я дизайнил распределённые системы с противоречивыми требованиями, это, наверное, тоже кусок синьористости, но если меня разбудить ночью и спросить «почему ты претендуешь на синьора», я отвечу «потому что сиплюсплюс». Ко мне обращаются коллеги, когда там какой-то адовый баг или что-то не работает или надо что-то сделать на темплейтах или хорошее код-ревью бы. Это давно уже так — помню, ещё где-то на третьем курсе, когда я отрабатывал пропуски по физкультуре заплывами в бассейне, ко мне подплыл какой-то чувак и спросил: «а это ты 0xd34df00d? у меня тут вопрос по boost…»Это просто прорва времени и сил, которая выкидывается вникуда. Это непереносимый опыт (каламбур, ага).Ну вот пойду я сейчас собеседоваться на чистого хаскелиста какого-нибудь, или вообще в ресёрч. Что я там скажу? На кого вообще претендовать? На каком основании? Что-то там типы что-то там алгебра что-то там математика. Но разве это сравнится по сложности со стандартом плюсов? Разве сравнятся мои тамошние навыки с моим опытом в плюсах? 17 лет плюсов против этак лет 8-10 хаскеля. Против этак лет трёх какой-то математики (примат в вузе не считается).Кто я, если выкинуть плюсы?И, может, выкидывать это всё — ошибка. Меня ждут минимум в двух очень хороших местах, одно из них неплохо смотрится в резюме, в обоих местах готовы платить какие-то баснословные деньги, но просто не могу больше этим заниматься. Кто-то наверняка скажет, что я с жиру бешусь, особенно сейчас, когда неопределённость на рынке труда повыше. Наверное, кто-то будет прав.Короче, да, мне немного страшно, и я устал. Я немножко стал динозавром. Когда-то я непонимающе смотрел на людей, которые в гробу видали все новые вещи, а теперь я замечаю что-то похожее в себе. Я не нахожу в себе силы читать новые вещи о C++, и только о C++. За последние полгода я поковырял и неплохо проработал два новых для меня языка, я ежедневно либо читаю всякие матанокнижки либо решаю задачки, мой текущий проект — игрушечный proof-of-concept-язык, но меня тошнит при одной мысли о том, чтобы прочитать ещё один пропозал или даже ещё одну пережёванную статью-рерайт cppreference о каких-нибудь нововведениях в C++20.Собственно, сначала я думал назвать эту статью «я стал динозавром», но проблема в другом. Те люди — они, кажется, вполне себе счастливы на своём C++03 или C99, или где там у них произошла кристаллизация, а я никак не счастлив и там. Проблема в том, что, получается, моему опыту, моим навыкам, вот этому всему — этому пора на свалку. А если этому пора на свалку, то не пора ли и мне?И да, я ни в коем случае не хочу сказать, что плюсы — отстой. Вовсе нет, плюсы прекрасны, это я устал и кончился. Проблема не в тебе, проблема во мне."
    },
    "doc_84": {
        "url": "https://habr.com/ru/post/536750/",
        "title": "Самый беззащитный — уже не Сапсан. Всё оказалось куда хуже…",
        "text": "{UPD 10.02.2021} Евгений Чаркин дал интервью на эту тему gudok.ru/newspaper/?ID=1552569Под катом мои комментарии на некоторые тезисы. {/UPD}Больше года назад хабравчанин keklick1337 опубликовал свой единственный пост «Самый беззащитный — это Сапсан» в котором рассказывает как он без серьёзных ухищрений получил доступ ко внутренней сети РЖД через WiFi Сапсана.В ОАО «РЖД» прокомментировали результаты этого расследования. «Есть результаты проверки. Почему удалось взломать? Наверное, потому, что злоумышленник. Наверное, из-за этого… Ну, он из „фана“. Юный натуралист. Там уязвимостей, которые бы влияли на утечку каких-то критических данных, нет. Мультимедийный портал „Сапсанов“ функционирует как положено и не нуждается в доработке», — заявил Евгений Чаркин.То есть вместо того, чтобы выразить благодарность за обнаруженную уязвимость, автора обозвали «злоумышленником» и «Юным натуралистом».К сожалению, но специалисты РЖД, начиная с директора по информационным технологиям, отнеслись к статье очень пренебрежительно, проигнорировав важное указание автора:Также оттуда в сеть РЖД есть впн. Если захотите — найдёте её там сами.И вот, год спустя я попал в сеть РЖД даже не садясь в Сапсан.Видимо, только этот котэ добросовестно охраняет вокзал.Как именно я попал в сеть РЖД с пруфами, чего не сделал директор по информационным технологиям ОАО «РЖД» Чаркин Евгений Игоревич и возможные последствия — под катом.{UPD 10.02.2021}Вот несколько цитат из интервью с Евгением Чаркиным:Описав подробный сценарий действий и предположительные угрозы, он привлёк к сети РЖД внимание широкой аудитории хакеров как в России, так и из других стран. Таким образом, он спровоцировал массовые атаки на информационную систему огромной компании, от деятельности которой зависит безопасность миллионов пассажиров. С сожалением должен отметить, что массовое распространение непроверенной информации через СМИ только ухудшило ситуацию.Если была бы возможность сообщить об уязвимости непосредственно в РЖД, то этой статьи бы не было. Но нигде контактов служб, отвечающих за ИБ, я не нашёл. Даже сотрудники РЖД, которые со мной связывались, тоже не смогли найти таких контактов. А внимание хакеров мира к Вашей инфраструктуре должно было показать и другие тонкие места. Без такой реакции Вы бы о таких местах даже и не догадывались бы. По сути Вы получили бесплатный пентест. Факт наличия выхода этой сети в Интернет – тема внутреннего расследования, которое сейчас ведётся в компании… С этим будет разбираться служба безопасности РЖД. А органы правопорядка, в свою очередь, дадут правовую оценку действиям автора этой публикации.Вот в этом и проблема: если проблему нашли внутри организации, то разбираетесь своими силами. А вот если сообщил о проблеме кто-то сторонний — бежим писать заявление в линейный отдел полиции, мол «нас полухакеры в полукедах поломали». Люди хотят помогать Вам, но боятся того, что за информацию их будут преследовать. Сейчас мы разрабатываем механизм привлечения внешних пользователей к аудиту уязвимостей сети на взаимовыгодной основе: будем внедрять специальную линию call-центра, которая поможет маршрутизировать звонки о разных «находках» на внешнем периметре корпоративной сети профильным специалистам в РЖД.Ура!!! Если система Bug Bounty будет реализована, то я могу считать, что цель статьи достигнута.Но: 1. call-центр почти бесполезен. Всё же ИТ специалисты привыкли пользоваться клавиатурой ПК. К тому же по телефону не покажешь уязвимость. Смотрите в сторону современных технологий. Например, бот в Телеграмме2. Многие энтузиасты готовы сообщать о проблемах и бесплатно. Главное гарантируйте то, что этих энтузиастов не будут ребята в касках класть мордой в пол в 5 утра в их квартире. 3. А система материального поощрения — это всегда приятно.{/UPD}Всё началось с гипотезыВ интернете очень много бесплатных прокси-серверов. Но кто в здравом уме будет открывать всем желающим выход в интернет через свой роутер? Вариантов по большому счету два: это либо взломанные устройства, либо владелец забыл отключить эту функцию. Таким образом меня посетила идея проверить гипотезу: «Есть ли жизнь за прокси»?Я запустил nmap по диапазону адресов по порту 8080. Далее из полученного результата прошёлся прокси-чеккером в поисках публичного прокси без авторизации и из положительных результатов выбрал самый близкий ко мне по пингу. Запустил сканер через него по адресам 172.16.0.0/12 порт 8291 (mikrotik winbox). И! Я его нашёл! Без пароля!То есть за роутером с прокси есть ещё один — Mikrotik без пароля. Гипотеза подтверждена: за прокси могут быть целые незащищённые сети. Только на тот момент я недооценивал масштаб «незащищённости», который я случайно нашёл.В поисках Немо владельца системыТак как я придерживаюсь принципов Grey hat (Обо мне mysterious Russian-speaking grey-hat hacker Alexey и статья на Хабре) и «съел собаку» на безопасности Mikrotik, то я принялся искать владельца системы, чтобы связаться с ним. Кстати, заходите в Телеграм чат о Микротике «RouterOS Security» t.me/router_os и о Zyxel t.me/zyxelruНедолго думая я поднял исходящий VPN до себя. Всё же комфортней через нормальный туннель дальше изучать сеть и искать признаки владельца системы. HTTP connect — ещё тот геморрой…За интерфейсами ether1 и bridge ничего интересного не обнаружил. Найденные камеры были абсолютно не информативными. А вот сканирование vpn, отмеченные красным на скрине выше, выдало более 20 000 устройств… Причём более 1000 штук — микротики. Огромное количество устройств с заводскими паролями.Вот некоторые из найденных сервисов с паролями по умолчанию:1. Камеры наружного наблюдения — подавляющее большинство.Ещё камерыДаже офисы внутри Камер, по скромным ощущениям, не менее 10 000 штук. Производители разные: beward, axis, panasonic и т.д.2. Ip-телефоны и FreePBX сервера также большое количество.3. IPMI серверов:AsusDell (их подавляющее большинство)SupermicroИз серверов виртуализации встречаются ESXi, Proxmox и oVirtМного узлов кластера Proxmox (по поднятым сервисам и трафиком между ними.)4. Преобразователи ethernet во 'что угодно' (Moxa UniPing etc)5. Системы управления ИБП6. Внутренние сервисы Что-то похожее на мониторинг состояния систем обеспечения здания.Система управления кондиционированием и вентиляциейРазличные системы управления табло на перронах :-) Эта самая красиваяНекий терминал, но внутри модифицированный дебиан. Таких нашёл около 20Кстати, аптайм у него почти год:6. Сетевое оборудованиеРазумеется, много различных роутеров. Как уже сказано выше, мне больше интересны Микротики. Подавляющее большинство с последней прошивкой и пароли не пустые. Но есть без паролей и с устаревшими прошивками. Туннели наружу подымаются легко. То есть фильтрации исходящих коннектов практически нет. Более того огромное количество микротиков со включенным прокси, аналогично тому, при помощи которого я и попал в эту сеть… Кстати, туннели через них тоже замечательно подымаются.Не полный кусок лога по прокси.Такое ощущение, что интегратор, который строил сеть, специально оставил этот доступ. И все же кто же хозяин?Думаю, что уже все и так догадались. Это я пробежался по верхушкам в рандомном порядке. Потратил я на это чуть больше 20 минут, чем автор статьи про Сапсан.Это здец. Сеть просто в решето. Причём это устройства по всей РФ. Например, вот это вокзал УфыАнтропово Костромской областиРазвёрнута профессиональная система видеонаблюдения. Нашёл презентацию по вокзалам.macroscopНаходил Кемерово, Новосибирск, Омск и т.д. По внешнему виду вокзалы сложно определить. К тому же я поездом уже лет 5 не ездил. Как же так получилось?Я всегда считал, что уязвимости в корпоративных сетях появляются из-за ошибок или специальных действий безграмотных сотрудников. Первое что пришло мне в голову — это некий сотрудник по разрешению СБ поднял у себя из дома VPN до рабочей сети на микротике в своей домашней сети. Но в данном случае эта моя гипотеза разбилась как только я увидел обратный резолв адреса через который я попал на этот Микротик.То есть это один из шлюзов в мир из сети РЖД. Ну и в сеть РЖД тоже… Получилась вот такая картина:Вероятно, что это один из офисов РЖД, который прилинкован к основой сети через l2tp. Я попадаю в сеть где межсетевые экраны отсутствуют как класс. Запускаю интенсивное сканирование хостов — у меня соединение не рвётся. Значит о системах обнаружения вторжения (IDS/IPS) РЖД тоже ничего не слышал. Микротик может замечательно интегрироваться, например Suricata Обнаружил кучу устройств без защиты. Это говорит, что службы сетевой безопасности в РЖД так же нет.Много устройств с дефолтными паролями. То есть политики паролей тоже нет.С Микротиков внутри сети я легко поднял туннели. То есть исходящий трафик не контролируется. Я вижу все интерфейсы управления в одной сети с клиентскими сервисами. Админы РЖД ничего не знают о Management VLAN«Российские железные дороги» провели проверку после взлома мультимедийной системы поезда «Сапсан» одним из пассажиров, критических уязвимостей не обнаружено. Так дайте ответ, Евгений Игоревич, какой «Юный натуралист» проводил расследование и не заметил гнездо со слонами?У меня лично есть всего три варианта ответа на этот вопрос:1. У Вас исходно плохая команда.Проверку проводил тот же отдел, который и проектировал/обслуживает систему. Отрицая проблему, они или сохраняют свою работу, или преследуют иные цели. 2. Вы доверились не тому специалисту. Аудит проводил некомпетентный сотрудник. 3. Вы и так знаете о проблеме, но по каким-то неведомым причинам не можете ее публично признать и решить.Что нужно изменить, чтобы снизить вероятность возможных последствий?Далее чисто мой взгляд на решение данной ситуации. Он ничего общего не имеет с мировыми best practices.Так же, сразу оговорюсь, что проблема касается только обнаруженной мною сети видеонаблюдения. В других сегментах сети РЖД, очень надеюсь, всё намного лучше. 1. Нанять сетевых аудиторов, которые помогут найти и закрыть самые «зияющие» дыры. 2. Нанять крутых системных архитекторов, которые имеют богатый опыт построения больших сетей. И не факт, что это будут российские специалисты. Перед ними поставить следующие задачи:2.1. доработать текущую инфраструктуру до безопасного состояния за минимальные средства (зачем вкладывать много денег в проект, который скоро разберут)2.2. разработать новую полноценную инфраструктуру, отвечающую всем требованиям безопасности и план поэтапной миграции. 3. Нанять подрядчика, который будет реализовывать в жизни данные проекты и передавать на эксплуатацию сетевикам РЖД.4. После сдачи проектов провести аудит безопасности инфраструктуры. 5. По окончанию пентестов своими силами объявить Bug BountyЧтобы мотивировать аудиторов и внутренних специалистов работать качественно, надо объявить лимит на количество и серьёзность уязвимостей, которые могу найти участники программы Bug Bounty. Если внешние специалисты найдут багов меньше лимита, то свои аудиторы получают премии. Если багов будет больше лимита, то штрафовать. В дальнейшем службу внутреннего аудита информационной безопасности оставить на постоянку и премии формировать уже на основании обнаруженных багов и их устранении. Разумеется, что схема имеет огромное количество подводных камней, которые за время написания статьи предусмотреть не возможно.ЗаключениеЯ не единственный кто нашёл данные уязвимости. Очень много признаков, что в этой сети кто-то «живёт». Например, вот эти линки я уже встречал не раз на роутерах, никак не относящихся к РЖД.Все информационные системы уязвимы априори. Когда их вскроют — зависит от интереса злоумышленников к ним, беспечности создателя и времени, которое они на это потратят. Основой основ безопасности является ограничение доступа к системам при несанкционированном проникновении в одно устройство. В случае с Сапасаном, чтобы через полученный VPN доступ можно было увидеть только один сервис — с которым взаимодействует пользователь системы, а не всю сеть РЖД…Я старался достаточно жирно намекнуть на узкие места не раскрывая деталей и надеюсь, что специалисты РЖД их всё же увидят. Связаться со мной можно через телеграм t.me/monocerosОбсудить данную статью приглашаю в профильный чат по Микротикам в Телеграм «RouterOS Security» t.me/router_os и Zyxel t.me/zyxelru Кстати, Евгений Игоревич, с повышением! ИсточникUPD: со мной связались специалисты РЖД и совместно закрыли уязвимости, позволяющие из вне подключиться. Какие действия они предприняли по организации безопасности внутри — мы уже не узнаем. "
    },
    "doc_85": {
        "url": "https://habr.com/ru/post/201172/",
        "title": "Почему Microsoft Internet Explorer 11 — худшее, что могло случиться с нами",
        "text": "Я давеча написал комментарий о том, что компании Майкрософт давно пора перестать издеваться над веб-разработчиками и перейти на движок Gecko. Многие, видимо, посчитали это неуместной шуткой; тем не менее, это таки вовсе не шутка, а констатация факта. Те, кто с этим не согласен, видимо не пытались ещё разрабатывать под этот замечательный браузер.Давайте я расскажу вам, какой это замечательный процесс.Сколько браузеров вы поддерживаете, дорогие разработчики? Не так давно, пять лет назад, этот список был довольно прост: IE6, IE7, Opera, Firefox, Chrome. Пять браузеров, плюс кое-какие минорные вариации между 2 и 3 Firefox и 9 и 10 Оперой.Сколько браузеров мы поддерживаем теперь?Firefox, Chrome и Opera никуда не делись. Файрфокс и Хром давно перешли на короткий релизный цикл, последний артефакт неавтоматического обновления (Firefox 3.6) не так давно наконец-то потерялся с приборов. Опера должна перейти на тот же цикл в ближайшее время — да и последние версии Оперы/Престо особой головной боли не добавляли. Добавился Яндекс.Браузер, который внутре тот же Хромиум, хоть и обновляется реже.Ну и, наконец, к вопросу про IE: сколько версий IE мы вынуждены поддерживать? В октябре по li.ru доли разных версий Internet Explorer в рунете были такими: IE10 — 4%, IE8 — 2.3%, IE9 — 1.7%, IE7 — 0.7% плюс невидимый на приборах IE11, который с выходом Windows 8.1 должен отбить у IE10 какую-то долю. Т.е. нам кажется, что это одна-две версии браузера, если вы готовы пожертвовать 4.7% аудитории, или три-пять — если не готовы или вдруг вы пишете продукт для страны с более высокой долей IE.Как бы не так! Слушайте внимательно.Internet Explorer, начиная с, прости господи, восьмой версии поставляется с набором движков от предыдущих версий. IE8 умеет работать в режиме IE7 и в режиме Quirks Mode (фактически, IE5.5!). IE9 умеет работать в режимах 9, 8, 7 и Quirks. IE10 умеет работать в режимах 10, 9, 8, 7 и Quirks. IE11 умеет работать в режимах 11, 10, 9, 8, 7 и Quirks. И это, внимание, РАЗНЫЕ движки! Не знаю, чем они там упарывались, когда принимали это решение, но режим IE10 в IE11 — вовсе не IE10! Вот, например, в IE9-10 есть баг с неправильный позиционированием канваса по z-index, который решался выставлением ему background-color: rgba(255, 255, 255, 0). В IE11 в режиме IE10 этот баг был тщательно портирован прекрасными разработчиками из Редмонда, а вот workaround портировать позабыли, и теперь канвас с абсолютным позиционированием там как бэ использовать нельзя. Совсем.Итого, если вы, совершенно случайно, пишете какую-нибудь библиотеку или просто хотите реюзать код на разных доменах — то вам вот прям сейчас нужно поддерживать (сколько-сколько?) ДВАДЦАТЬ разных версий Internet Explorer! Двадцать версий браузера, который использует менее 10% аудитории! На секундочку, у файрфокса за всё время его существования было 28 мажорных релизов, у Хрома — 32.И это только начало, ребята. Дух старой школы невероятно силён в Редмонде: все эти версии Internet Explorer будут поддерживаться Майкрософтом (сколько-сколько?) 10 лет! Занимательная задачка на устный счет: посчитать, сколько версий IE нам придётся поддерживать через 5 лет.Пол Айриш написал про это прекрасную статью ещё в 2011: www.paulirish.com/2011/browser-market-pollution-iex-is-the-new-ie6. Но даже он не смог предсказать всю упоротость разработчиков Майкрософта.Шо?! Это ещё не всё?!Это ещё далеко не всё, мои маленькие красноглазики. В IE10-11 Майкрософт презентовал ещё маленькую тележку свежих и революционных идей.Начнём с того, что IE11 поставляется вот с таким юзер-агентом:Что в нём прекрасно? В нём НЕТ ВЕРСИИ самого Internet Explorer-а! Вообще слов «MSIE» больше нет. Знаете, почему? Потому что Майкрософт считает, что их браузер, внимание, не нужно детектить по юзер-агенту, поскольку он поддерживает все новейшие стандарты и его не надо отличать от других новых браузеров.Давайте я повторю ещё раз: разработчики браузера, который поставляется с 6 разными движками, эмулирующими баги предыдущих версий этого браузера, начиная с 1999 года, заявляют, что его не нужно определять по юзер-агенту.При этом абсолютно те же люди между последним Developer Preview IE11 и финальным RTM релизом берут и отрывают вендорские префиксы и ломают ещё пару десятков обратных совместимостей, о чём любезно сообщают в своём msdn-е: msdn.microsoft.com/en-us/library/ie/dn304886%28v=vs.85%29.aspxДа-да. Если ваш код отлично работает в Developer Preview, это совершенно не значит, что он заработает в релизной версии, которая внезапно одномоментно раскатится паре десятков миллионов человек по всему миру. Но вы ни в коем случае не занимайтесь детектом версии по юзер-агенту!Фиг с ним, с Developer Preview. В их прекрасной поделке нужно отличать версию оси, под которой она работает! Я серьёзно.Вот сидят люди. В трудовой у них, наверняка, написано что-то типа Senior Software Architect. Придумывают стандарт PointerEvents, в котором, чин чинарём, всё по-взрослому — специальный флаг navigator.pointerEventsEnabled показывает, поддерживает ли браузер пойнтер-события или нет. Чтобы, понимаешь, никто ничего по юзер-агенту не детектил, а всё как в нормальных браузерах.А потом внезапно выясняется, что у тех же людей обработка жестов падает в IE10/Win7. Вот прям в msdn-е так и написано:Note The APIs we discuss in this section aren't supported in Windows 7 or earlier.msdn.microsoft.com/en-us/library/ie/dn433243%28v=vs.85%29.aspxТак что помимо 20 разных версий IE у вас есть как минимум две разных версии ОСи — Win7 и Win8. На самом деле, их больше — есть ещё Windows Phone и Windows RT, а в Windows 8 ещё есть два режима браузера — метро и десктоп. Они все отличаются. Нам повезло, мы не нашли прям заметных багов, чтобы держать отдельные ветки кода ещё и под эти оси — не факт, что вы окажетесь столь же удачливыми. Ну что, сколько там версий IE получилось? Я уже запутался, но, наверное, под сотню.А теперь — десерт! Вот допустим вы просто пишете веб-странички, вам плевать на режимы браузера и вы вообще недоумеваете, чего париться — сайт ведь не может сам перейти в какой-нибудь режим совместимости, правда?У меня есть для вас плохие новости, ребята. Заходите вот сюда:iecvlist.microsoft.com/ie10/201206/iecompatviewlist.xmlИ ищите там свой сайт.Знаете, что это? Это глобальный Compatibility List, в который заносятся сайты, которые, по мнению Майкрософт, нужно показывать в каком-нибудь из режимов совместимости.Нет, серьёзно, они отсматривают весь Интернет и составляют реестр сайтов, которые плохо себя вели!Знаете, как сайты попадают в этот список? Майкрософт выпускает превью-версии своих браузеров. В них есть специальная кнопочка в адресной строке — показать этот сайт в режиме совместимости. Майкрософт собирает анонимную статистику — если в эту кнопку часто тыкают, сайт попадает в реестр.Серьёзно, они этого даже не скрывают. Похоже, даже немножечко гордятся.msdn.microsoft.com/ru-ru/library/gg699485%28v=vs.85%29.aspxВыбраться из этого списка очень просто — написать в саппорт Майкрософт, ага.Ну и вишенка на торте: допустим я вас убедил и вы регулируете, в каком режиме показывать страницу, с помощью специальной меты, дабы избежать ненужных проблем. Так вот, в IE11 (по крайней мере в RTM-версии, сейчас лень проверять) она не работает — факт нахождения в списке совместимости приоритетнее заданного вебмастером X-UA-Compatible!Дорогая Microsoft! Прекрати, пожалуйста, над нами издеваться и вкрути движок Gecko в свой так сказать продукт."
    },
    "doc_86": {
        "url": "https://habr.com/ru/post/117160/",
        "title": "Принцип цикады и почему он важен для веб-дизайнеров",
        "text": "Пару лет назад я прочитал интересные факты о жизненном цикле периодических цикад. Обычно мы не видим вокруг себя много этих насекомых, потому что бóльшую часть своей жизни они проводят под землёй и тихо сосут корни растений.Однако, в зависимости от вида, каждые 7, 11, 13 или 17 лет периодические цикады одновременно массово вылезают на свет и превращаются в шумных летающих тварей, спариваются и вскоре умирают.Хотя наши странные цикады весело уходят в иной мир, возникает очевидный вопрос: это просто случайность, или числа 7, 11, 13 и 17 какие-то особенные?Оказывается, у этих чисел есть кое-что общее. Все они простые числа, которые делятся только на себя и на единицу (это 1, 2, 3, 5, 7, 11, 13, 17, 19, 23 и так далее).Почему это так важно?Исследования показали, что численность животных, которые питаются цикадами — обычно птицы, пауки, осы, рыбы и змеи — часто демонстрируют более короткий цикл 2–6 лет между пиком и спадом популяции. Таким образом, если бы наши цикады появлялись, например, каждые 12 лет, то каждый хищник с жизненным циклом 2, 3, 4 или 6 лет мог бы синхронизировать циклы подъёма своей численности с регулярным появлением цикад. На самом деле, они наверное объявили бы всеобщий праздник обжорства под названием День Цикады.Это не очень весело, если вы — цикада.С другой стороны, если выводок цикад был настолько неудачлив, чтобы появиться во время трёхлетнего пика численности ос, то следующий раз это случится только через 51 год. В промежуточные поколения цикады могут спокойно восстановить своё население и намного превысить число хищников.Находчивые малые, правда?Замечательно. Но как это относится к веб-дизайну?Пару недель назад мы рассматривали, как делать бесшовную заливку (тайлинг). Это суперполезная вещь, но бывает трудно соблюсти правильный баланс.С одной стороны, вы хотите использовать файлы как можно меньшего размера, чтобы получить максимальную пользу от эффекта тайлинга. Однако, как только вы заметите какую-то особую черту в фоне — например, маленький сучок на фоне древесного волокна — который повторяется через одинаковые интервалы, то сразу теряется вся иллюзия натуральной случайности.Может быть, можно позаимствовать какие-то идеи у цикад, чтобы сломать этот паттерн?Генерация натуральной случайности средствами CSSПример 1Хватит болтовни. Вот маленькая проверка концепции. Тест не должен выглядеть идеально красиво, но он хорошо демонстрирует суть. Помня о «принципе цикады», я сделал три квадратных полупрозрачных PNG размером 29, 37 и 53 пикселя, соответственно, и установил их как фоновые изображения в элементе HTML на тестовой странице.29-a.png (2.0kb) 37-a.png (1.7kb) 53-a.png (2.5kb)И вот результат.РезультатКак видите, эти квадратики перекрывают друг друга и взаимодействуют, генерируя новые паттерны и цвета. И поскольку мы используем волшебные простые числа, паттерн не будет повторяться очень долго.Насколько именно долго? 29 × 37 × 53… или 56 869 пикселей!Это для меня была какая-то революция. Я проверил свои вычисления трижды, но математика полностью надёжная. Помните, ведь это крошечные графические файлы, менее 7 килобайт вместе, при этом генерируют текстуру почти 57 000 пикселей в ширину.Вы можете представить, что произойдёт, если добавить ещё четвёртый квадратик, например, 43 пикселя? Или не можете представить, потому что числа становятся слегка зверскими и могут загипнотизировать, если смотреть на них слишком долго. Достаточно сказать, что вы получите цифру, более подходящую для терраформирования планет, чем для веб-дизайна.Ok. Теоретически, геометрические фигуры хорошо работают, но как ещё можно использовать эту идею?Пример 2Возьмём более фотореалистичный пример, который каждый из нас мог видеть в том или ином виде: театральная завеса. Для начала я нашёл неплохую графику здесь. Если посмотреть на нашу штору, то можно заметить равномерные вертикальные блоки.Для этого примера я буду называть этот промежуток «блоком сборки (ruffle unit), и в отличие от первого примера, он будет более важным, чем строгие размеры в пикселях тех изображений, с которыми мы работали.Во-первых, я собираюсь выбрать один из таких блоков и превратить его в элемент для бесшовного фона. Это JPEG размером всего 8kb.При рендере одного блока, эта графика олицетворяет собой всё то, что мы ненавидим в бесшовном фоне. Кроме явно заметных стыков, она выглядит очень механической и абсолютно неубедительно.Для второго уровня используем простое число три. Я собираюсь выбрать новую секцию занавески и разместить её внутри прозрачного PNG, который будет шириной в три блока сборки. Я размыл левый и правый края, так что он плавно сливается с фоном. Результирующий файл вместился в 15kb.Когда мы смешиваем этот новый элемент с прежним слоем, то получаем явно лучший результат. Всё ещё заметен неестественный периодический паттерн, но он начинает немножко разбиваться.Волшебное число нашего третьего слоя — семь.Мы делаем новый прозрачный PNG шириной в семь блоков, и я собираюсь поместить две новые секции оригинального изображения на позициях 3 и 6. Если это звучит непонятно, диаграмма слева должна слегка прояснить ситуацию. Опять же, я размыл края изображения, чтобы облегчить стыковку с предыдущими слоями.Очевидно, это изображение будет больше и в пикселях и по размеру файла, но оно всё ещё имеет размер около 32kb — не слишком жестоко по любым меркам.Вот что получилось, когда мы накрываем этой графикой два предыдущих слоя. Я вполне доволен результатом. Конечно, ваш глаз может заметить небольшие фрагменты изображения, которое якобы повторяется (потому что оно на самом деле повторяется), но нижние слои настолько случайны, что вскоре глаз перестаёт искать паттерн.Если посмотреть на этот фон с численной стороны и представить каждый каждый блок в виде числа, то получится следующее: 1, 2, 3, 1, 2, 6, 1, 2, 1, 3, 2, 1, 6, 2, 1, 1, 3, 1, 1, 6, 1, 1, 2, 3…Паттерн там есть, но его очень сложно распознать.В этом примере практически бесконечный фон в виде театральной завесы стоил нам всего лишь 53kb. И конечно, можно без труда добавить четвёртый слой — возможно, размером в 11 блоков — если нужно. Однако, я не думаю, что здесь это требуется.Также имейте в виду: в этом примере используются самые минимальные простые числа — 1, 3 и 7. Если бы мы взяли, скажем, 11, 13 и 17, то могли бы сделать гораздо более сложную вариацию на заданном размере. В реальности всё сводится к масштабу текстуры относительно ширины экрана.Пример 3Мой последний пример не столько практического плана, сколько ради развлечения с простыми числами. Я не собираюсь снова разбирать теорию, потому что базовая концепция такая же, как и в предыдущих двух примерах, но я буду рад, если вы попробуете отредактировать его в FireBug.2 200 лет назад китайский император Цинь Шихуанди создал терракотовую армию численностью 8000 человек для охраны своей могилы. Полноразмерная статуя каждого воина, лошади и оружия представляет собой уникальное изделие ручной работы.Используя простой CSS, простые числа и набор изображений, мы собираемся собрать нашу собственную могучую армию. Может ей и не хватает роста, но зато она берёт своей многочисленностью.Я покажу вам… Мой Могучий легион Лего!Легион составлен всего из восьми изображений, которые соединяются вместе для создания тысяч комбинаций. В нём используются:2 картинки для бэкграунда2 изображения ног2 изображения торса2 изображения головыРезюмеЭкспериментируя с этой идеей, я обнаружил несколько принципов, которые вроде работают. Во-первых, порядок наложения текстур лучше, если организован в виде перевёрнутой пирамидыВполне можно сделать нижний слой довольно маленьким и повторяющимся, поскольку он перекрывается всеми слоями сверху. В реальности, он будет виден всего на 20–40%.С другой стороны, самый верхний слой обязательно должен быть самого большого размера, но при этом наименее насыщенным, поскольку этот слой никогда не будет перекрываться другими. Также, вероятно, лучше не включать хорошо различимые, привлекающие взгляд детали на самом верхнем слое. Оставьте его скудным и обобщённым.В любом случае, почти всегда нужно использовать метод проб и ошибок.Поддержка браузеровЯ оставил разметку простой, используя множественные бэкграунды в элементе HTML. Такой вариант поддерживается всеми современными браузерами (Firefox 4, Chrome 10, IE9, Opera 11, Safari 5), но, очевидно, не всеми старыми версиями.Однако если ставить условием обратную совместимость, то подходящим вариантом может быть тайлинг в ,  и контейнер . Возможно, контейнер может быть не семантическим, но эта маленькая поблажка потенциально может сильно отразиться на всём сайте. Решать вам.Эти три примера первыми пришли мне в голову, но я уверен, что есть много более грамотных способов использовать идею. Например: Бесконечный городской пейзажНеповторяющаяся текстура дереваЗвёздное небоПлотные джунглиОблачное небоМожет, есть ещё какие-то идеи?"
    },
    "doc_87": {
        "url": "https://habr.com/ru/post/178555/",
        "title": "Как нельзя зарядить смартфон",
        "text": "Пытаемся зарядить телефон от кроны через микросхему КРЕН5АНе так давно на хабре проскакивал пост “Когда садится батарейка”, поражающий своей неграмотностью. Всё бы ничего, но этот пост даже умудрился оказаться на главной странице, в результате его прочитало множество людей, и автор преступным образом ввёл их в заблуждение. Чтобы показать неправильность поста эксперимент был повторен с максимальной дотошностью: регистрацией токов, напряжений. Так же объясняется почему это невозможно, и что делать, если уж очень хочется заряжать телефон от батареек. Добро пожаловать под кат.В чём суть проблемы?Давайте сразу обозначим моменты, которые ne_kotin указал в посте, и они являются неверными.Автор говоритХочется чего-то мощного (1.5 — 2 ампера) и недорогого — желательно до 100 рублей. Чтобы можно было спаять на коленке.И их таки есть у меня!Эта фраза главное — что вводит в заблуждение, и указывает на полную некомпетентность автора. Сама микросхема КРЕН5А — может работать с токами 1,5-2 А, но вопрос — сможет ли их дать батарея крона, автор оставил за кадром. Далее автор приводит схему, которую можно смело упростить, убрав ненужные конденсаторы (батарея питания уже сама ёмкость). И после этого автор уверенно утверждает, что этим устройством ему удаётся заряжать телефоны. Он уверенно говорит об абсурдных вещах, и попытки его убедить и убрать пост не увенчались успехом.В комментариях разродился настоящий холивар, серьёзные электронщики потешались над этим поделием. Даже в известном ЖЖ комьюнити, посвящённом радиоэлектронике разрадился шквал негодования на этот пост.Итак, наша цель: проверить теорему существования возможности зарядки от кроны, через микросхему КРЕН5А (или КРЕН5Б) смартфона, и какой ток будет давать сия баттарея при заряде. Исходники и сборкаДля проверки существования нам понадобится не так много: монтажка, USB-разъём, сама микросхема, провод зарядки, смартфон, разъём для подключения кроны, мультиметр с возможностью измерения тока + опционально прямые руки и паяльник :).Некоторые исходникиВ качестве заряжаемого смартфона был выбран не тот который на фотографии, а HTC HD2  с ведройдом на борту. Так получилось, что в процессе экспериментов выяснилось, что смартфон выше после неудачной перепрошивки страшно глючит и не позволяет ставить сторонний софт. Контроль заряда-разряда осуществлялся программой Battery Mix Для экспериментов была приобретена новая крона в первом попавшемся газетном ларьке у выхода из метро. Запечатанная батареяСобираем по схеме, как указанно в критикуемом посте, не ставим только конденсаторы. Девайс в сбореПроверяем, что у нас на выходе требуемое напряжениеПять вольт, как в аптекеОсталось только разрядить телефон. Для этого были включены все беспроводные средства связи в активный режим, и запущено 10-ти часовое видео с ютуба. Аппарат разрядился примерно минут через 40. Было оставлено 4% заряда, чтобы хоть как-то можно было с девайсом общаться и мониторить его состояние. Разряженный до четырёх процентов смартфон.Видно резкое падение графика заряда батареи телефона. Итак, теперь у нас всё готово, чтобы приступить к экспериментам.Приступаем к опытамПодключаем телефон к нашей зарядке. Фотография на заходнике статьи. Телефон радостно сообщает нам, что он увидел напряжение и пошёл процесс заряда. Однако интересно не просто узреть этот ярлычок, который видимо и ввёл в заблуждение товарища ne_kotin, а произвести замеры тока. Производим замеры потребляемого тока сразу и спустя полчаса от начала зарядки:Начало заряда. Ток заряда составляет 300 мАНа начало зарядки вполне себе неплохой зарядный ток 300 мА. Но тут даже рядом не валялись заявленные 1,5-2 А! Значительно интересные результаты спустя пол часа:Спустя пол часа: зарядный ток упал до 100 мА!Ирония заключается в том, что несмотря на то, что я перевёл телефон в авиарежим, отключил всё, не трогал дисплей и старался минимизировать потребление, придушив все приложения, он упорно продолжал разряжаться.Спустя час остался 1% от заряда телефона. Было принято решение измерить напряжение заряда и напряжение на батарее. Весьма интересные результаты.Напряжение, идущее к телефону 3,7 В — явно недостаточно для зарядаИнтересно, сколько же на батарее?Напряжение на батарее всего 5 В!!!!После чего было принято решение прекратить эксперимент в силу его бессмысленности и поставить смартфон на нормальную зарядку.Результаты нашей условной зарядкиВы наверное уже догадались, что зарядить таким способом телефон мне не удалось. Намного интереснее нам скажет об этом график. График разрядки, “зарядки” от батареи, и от зарядного устройстваОранжевая линия — это и есть зарядка от кроны. Как видно, в самом начале даже были какие-то потуги заряжаться. Но потом эта схема лишь замедлила неизбежную смерть телефона от разряда. Результаты: использовать данную схему для зарядки телефона от кроны не представляется возможным!Почему же так получилось?Сделаем таки разбор полётов, почему же так получилось. Для начала сравним параметры нашей батареи крона и аккумулятора телефона. Небольшое гугление привело меня на сайт производителя этой батареи, откуда я взял её параметры:Ёмкость батареи 450 мА*ч, напряжение 9 В.Посмотрим параметры аккумулятора нашего телефона:Напряжение 3,7, ёмкость 1230 мА*ч и самый главный параметр — энергия аккумуляторной батареи 4,55 Вт*чОбратите внимание, на такой параметр — как энергия аккумуляторной батареи. Вероятная энергия (если производитель нам не врёт) нашей батарейки будет равна: W*ч=U*I*ч=9*0,45= 4,05 Вт*ч. Т.е. говоря простым языком, даже если нам бы удалось без потерь “выпить” энергию батареи, мы бы никогда ей не смогли зарядить телефон! Но учтите, что всю энергию из батареи взять невозможно. Хоть сколько-то, да останется.Теперь стоит учесть ещё КПД нашего преобразователя питания и питания зарядной цепи аккумулятора. Возьмём КПД последней цепи 80%, с надеждой, что производители сделали её максимально качественной. КПД нашего преобразователя расчитывается просто: отношение выходной мощности к входной мощности.N=(Uвых*Iвых)/(Uвх*Iвх)Поскольку токи входные и выходные у нас практически равны (потребление микросхемы пренебрежимо мало), то отношение выходит достаточно простым:N=5/9=0,56  Итоговое КПД будет N=80*0,56=44,8, т.е. почти как у хорошего паровоза. В результате в лучшем случае до аккумулятора сможет дойти менее половины ёмкости батареи.Но здесь ещё не всё. Как мы помним выше, было проведено измерение тока, который потреблял смартфон от батареи. И в лучшие времена он составил 300 мА. Для чистоты эксперимента следует измерить ток заряда при питании от USB и зарядного устройства. Немного видоизменив платку, чтобы крона не учавствовала в питании, были произведены таковые замеры.Ток от USB-портаСледует сразу заметить, что потребляемый ток стабильный. И по стандарту USB-порт может дать до полуампера! Потребляемый ток от зарядного устройстваПоследняя фотография очень говорящая — телефон во время зарядки потребляет до полуампера! А наша батарея быстро выдохлась и давала нам 100 мА, что для заряда было явно недостаточно.Какие решения проблемы?Кто виноват мы выяснили, а что же делать? Ведь хочется заряжаться в дороге! Ну для начала использовать более ёмкие элементы питания. Эта же схема с КРЕНкой вполне себе оказалась бы рабочей при зарядке от автомобильного блока питания. Автор этих строк в институтские годы делал себе “портативный” плеер компакт дисков из сидирома, аккумулятора от кассового аппарата и онной КРЕНки. Можно было в течении двух часов слушать музыку. Другой и более расово верный вариант — использовать импульсный источник питания. Это более дешёвый и правильный вариант. Даже самые дешёвые китайские зарядки от прикуривателя в своём составе имеют импульсный источник питания. Например вот:Платка автомобильной зарядки от телефонов SiemensПосле непродолжительного гугления находится документация на микросхему, и там приведена практически схема этой зарядкиСхема зарядкиТема импульсных преобразователей огромна и неисчерпаема. По этому подробно останавливаться на ней не будем. Скажу лишь только, что существуют дешёвые китайские преобразователи, которые можно купить на известных аукционах и решить проблему зарядки от батарей. Читатели этого поста сами могут накидать ссылки в комментарии. ВыводыПечально, когда на хабре появляются статьи некомпетентных людей и они большинством вопринимаются как полезные и интересные. Хотя, слава богу таких случаев мало. Ирония заключается в том, что когда тут товарищ рассказывал, как он “внезапно” открыл для себя переполнение переменных в си, и как он её решил, то пост дико заминусовали (до минус 100). А этот пост признали вполне годным, хотя он описывает значительно больший и непрактичный бред. В общем говоря, автор ne_kotin ввёл людей в заблуждение, предлагая использовать давно устаревшие КРЕНки, а уж тем более предлагая их использовать для зарядки телефона. ОднакоКонечно, микросхема КРЕН*** (их много), и импортные аналоги 78**, а так же все остальные линейные стабилизаторы — это прекрасное решение для слаботочных цепей. И я достаточно активно использую аналоги этих микросхем в своих поделиях (разумеется со значительно лучшими характеристиками). Каждый школьник обязан попробовать их применить в своих поделках, но совершенно не обязательно о школьных поделках писать на хабр, тем более взрослым людям. З.Ы. Буду крайне признателен за критику поста, а так же сообщения об ошибках личным сообщением."
    },
    "doc_88": {
        "url": "https://habr.com/ru/post/210142/",
        "title": "Не дразните программиста",
        "text": "Подходит к концу очередная рабочая неделя. Не знаю, как у вас, а у меня эта неделя, что называется, — не задалась. Потрачена куча энергии и нервных клеток, и никакого движения вперед. Переносить стрессовое состояние на выходные мне очень не хочется, поэтому я решил взять короткую паузу и немного развеяться.Вы устали? Хотите выпустить пар? Вам требуется передышка? Предлагаю вам присоединится ко мне, тем более, что на дворе пятница. Речь в топике (уже в который раз) пойдет об поведенческих Антипаттернах. Уважаемый vbougay в своей статье \"О чем НЕ говорят разработчики или 7 любимых выражений программистов\" затронул интересную для меня тему. Он описал негативные примеры взаимодействия с программистами со своей колокольни — с позиции руководителя, ответственного за разработку ПО. И в этих примерах многие (я в том числе) узнали себя. Статья эта долго не давала мне покоя ощущением какого-то несоответствия. Вроде бы, все описанное и жизненно и узнаваемо, но что-то пазл у меня в голове никак не хотел превращаться в картинку. Возможно, все дело в том, что логические выкладки были построены на ошибочных, с моей точки зрения, предпосылках? Ведь программисты (aka разработчики) в силу своей профессии редко выступают инициаторами личного контакта с пользователями своих продуктов, заказчиками и начальством. Мы самовыражаемся в коде, а личный контакт получаем в качестве обратной связи на свои программные решения. И наше шаблонное поведение зачастую объясняется естественной реакцией на шаблонное поведение наших оппонентов.Пока вы не потеряли интерес, перейду к сути: почему моя неделя была «не моей»? Потому что меня всю неделю вынуждали быть \"программистом\" из статьи vbougay. Каким образом? Об этом я сейчас и попытаюсь вам рассказать.Самые догадливые уже поняли, что в топике пойдет речь о шаблонах поведения ближайшего окружения разработчика. Антипаттерны описывать трудно, читать о них часто скучно, поэтому я постарался смягчить нудное содержание топика формой подачи материала. И в этом мне очень сильно помог автор самого фундаментального труда о поведенческих антипаттернах — Григорий Бенционович Остер.Для затравки начну с одного из моих любимых советов от Григория Бенционовича, следование которому уже давно вошло в привычку (читай паттерн) у многих окружающих меня коллег:***Если что-нибудь случилось,И никто не виноват,Не ходи туда, иначеВиноватым будешь ты.Спрячься где-нибудь в сторонке.А потом иди домой.И про то, что видел это,Никому не говори.Именно из-за такого поведения некоторых пользователей мне не раз приходилось в выходные и по ночам выходить на работу для устранения аварийных остановов. Но не будем больше эксплуатировать творчество создателя жанра «Вредных советов», потому что мне есть, что сказать и от себя лично. Перейду к следующей ситуации (одной из самых распространенных), после которой \"программист\" внутри меня вырывается наружу и кричит \"А у меня все работает!!!\"***Если вы нашли ошибку Напишите в техподдержку.Заголовок лучше CAPS-ом: «ВСЕ СЛОМАЛОСЬ, ВАШУ МАТЬ!!»Текст в таком письме не нужен, Подпись так же будет лишней, Вставьте больше адресатов И нажмите «Отослать».Идем дальше. Пару слов о «матрешках», они же — «квесты». Я часто вынужден тратить кучу времени, чтобы добыть исходные данные для решения проблемы пользователя. А все потому, что некоторые несознательные личности любят поступать так:***Если вывела программа Очень длинный текст ошибки,Текст в письмо вставлять не нужно, Лучше сделайте скриншот.А потом картинку эту Поместите в файл Word-а,Запакуйте ZIP-архивом И… забудьте приложить.Много удовольствия мне доставляют телефонные разговоры с пользователями моего продукта (продукт — внутренний, пользователи — операторы компании). Мягкая форма:***Если вдруг программа ваша Написала сообщенье,То читать его не нужно Никогда и ни за что. Позвоните программисту И дословно повторите:«Я тут ткнула чем-то где-то… Что ей надо от меня?»И более жесткая:***Говоря по телефону, Никогда не представляйтесь, — Начинайте сразу с крика, Обвинений и угроз.Игнорируйте вопросы, Не давайте вставить словоИ бросайте трубку сразу,Как проблема решена. А еще я очень люблю совещания. Особенно совещания без определенной повестки, с темой \"Нужно срочно решить важный вопрос\", приглашения на которые отправлены через рассылку \"Все сотрудники\". Я их так люблю, что посвятил им аж 3 совета:***Назначая совещанье, Никогда не забывайКабинет для совещаний До отказа набивать.Тут ведь и ежу понятно: Двадцать-двадцать пять «умов»Для принятия решенья Явно лучше, чем один.***Время встречи тоже важно: Перерывы на обед,Как нельзя, подходят лучше Для бесед большой толпой.Мы ж такие — программисты, Нас же — хлебом не корми,Только дай с большим начальством Поболтать накоротке.***Есть еще совет конторам С Главным офисом в Москве:Вечер — лучшая часть суток Обо всем поговорить.Проводите в это время ВКС и АКС, — Филиалы за Уралом Только этого и ждут.Еще я обожаю экстрасенсов, которые заранее, ( а, главное, лучше меня) знают, сколько мне понадобится времени на решение поставленной задачи:***Выдавая программисту ЧТЗ с «Войну и мир»,Где одно лишь оглавленье Занимает 7 страниц,Обязательно в финалеНе забудьте уточнить,Чтобы он не увлекался: «Там же дел на пять минут!»Отдельно хочется сказать о благодарностях «герою»:***Принимая результатыМногодневного трудаНе хвалите программиста, Завершившего проект. Лучше строго хмуря брови Доведите до него,Что уж вы, в его-то годы, Лучше б сделали в сто раз.И на десерт я оставил любителей отрывать меня по мелочам. Они не знают, чего от меня хотят, но помнят, что программиста нужно неустанно контролировать.***Если твой пасьянс сошелся,Ты прочел все анекдоты,Выпил кофе и не знаешь, Чем еще себя занять – Позвони-ка программисту И спроси его негромко:«Чем ты занят? Ах, проектом… Что ж… Не буду отвлекать...»Положи на место трубку, Потянись, зевни пошире,Почеши живот, подумай. Мыслей нет? Тогда опятьНабираем программиста: «Как дела? Ах, снова занят…Интересно, чем? Проектом? Ну, не буду отвлекать»Сдуй пылинку с фоторамки, Передвинь клавиатуру,Покрути кольцо на пальце, Наточи карандаши.Но не сильно увлекайся,-Не забудь про программиста. Вдруг он нервничает, бедный, Что ты долго не звонишь?На этом я завершаю свой пятничный пост. В него вошли только случаи этой недели. Если вспоминать все ситуации, которые будят во мне \"программиста\", то по объему советов я смогу, наверное, обогнать самого Остера. Но изначально я преследовал другую цель — хотел освободиться от излишек негатива и не переносить их на следующую неделю. И мне стало легче.Надеюсь, вас мне тоже удалось немного отвлечь от рабочих задач и проблем перед выходными. Улыбайтесь чаще!"
    },
    "doc_89": {
        "url": "https://habr.com/ru/post/49778/",
        "title": "О том, что сегодня произошло с «аськой» (часть 1-я)",
        "text": "Итак, по просьбе Shoohurt рассказываю все известное нам (команде разработчиков Miranda IM) на данный момент о проделках AOL.Сегодня, около 13.00 МСК почти все пользователи неофициальных клиентов после входа в сеть и загрузки контакт-листа получали от пользователя с UIN 1 сообщение о том, что используемая версия клиента не используется и неавторизованна. На официальном сайте прямо на главной появилось сообщение, гласящее о том, что отныне поддерживаются только официальные версии программ, которые вот прям тут и можно скачать.Пользователи, которые уже находились в сети, никаких изменений не почувствовали и не были отключены от сервера. У тех, кто пытался подключиться в первые час-полтора это получалось с переменным успехом: это объясняется тем, что что сеть icq распределенная и состоит из множества серверов, и даже после входа вас могут перебросить на другой, и судя по всему изменения применялись на них по очереди.Немного технических деталей. Процедура входа проходит вполне обычно: проходит инициализация протокола, отсылка capabilities, загрузка серверного контакт-листа и собственных данных. Примерно в это время и приходит сообщение от номера один, и после этого получить что-либо с сервера становится невозможно.Решив, что сегодня повторилась ситуация 8-го декабря, когда клиенты перестали работать из-за того что во время логина идентифицировали себя как icq5.1 и более ранние версии, мы попробовали идентифицировать себя как icq6.5 последней модели. Это не принесло никаких результатов. Стало понятно, что в этот раз АОЛ пошел путем глубокой защиты — видимо теперь уже стали учитываться отправляемые капсы (capabilities, информация о поддерживаемых клиентом фишках протокола). Действительно, подмена их набора на тот, что использует icq6 помогла, однако только на время первого входа — если после этого переподключиться, то это уже не поможет. Судя по всему в последовательность входа и начальной инициализации внесли какие то изменения, при невыполнении которых клиент считается альтернативным. Разработчики QIP высказали предположение о том, что серверу нужен некий дополнительный ключ, который может как просто быть зашит в клиент, так и вычисляться на основе полученной от сервера информации. Они в настоящий момент тоже усиленно работают над поиском причины отказа клиента.Надеюсь в течение ближайших суток — двух мы найдем причину.Кроме того хочу заметить интересный факт — эти изменения затронули только жителей стран СНГ. Когда я связался с нашими разработчиками из Чехии и Германии они были слегка в недоумении — у них все работало прекрасно. Кроме того мы успешно смогли подключиться с миранды, используя американский прокси-сервер, так что есть подозрения о том, что это целенаправленная блокировка разрабатываемых в России альтернативных мессенджеров.UPD: Сейчас разработчик QIP, INF, поделился со мной мыслью о том, что все дело в используемом начальном значении идентификатора последовательности у отправляемых пакетов. Все неофициальные клиенты генерируют их случайным образом, и это может быть тот самый ключ. Основная проблема заключается в том чтобы узнать алгоритм его генерации.Еще небольшой UPD: для наглядности можете сравнить скриншоты сайта icq.com, отдаваемые российским и американским посетителямОбсуждение происходящего ведется в жаббере, в конфе icq_stop@conference.jabber.ruUPD2: Как сообщает Shoohurt, завтра, возможно, в течение дня будут комментарии со стороны господ, имеющих непосредственное отношение к русской версией ICQ (Рамблер-ICQ). Следите за обновлениями.UPD3: Сейчас нашли корреляцию между временем входа и используемым номером последовательности, так что есть зацепка, что для генерации все же используется какое то случайное число, но эту версию надо проверять. Так же как оказалось коннектятся все старые клиенты, даже icq2003b, и TestBuddy 2002 года. Плюс есть несколько сообщений о том что у некоторых провайдеров в Омске все работает нормально. В общем сейчас конечный вывод — «асечники» нашли коренное различие между официальным клиентом и всеми клонами и активно его используют.Похоже что команда разработчиков QIP нашла решение проблемы, уже доступны рабочие билды QIP Infium 9022Как и обещал — исправленная версия плагина Miranda IM ICQ+ — качаемГоспода, прошу терпения. Я сегодня вымотан на нет и уже больше суток без сна. Завтра я выложу весь код и объясню суть моего решения. Оно довольно тривиальное, и основано на том что исходное предположение про seq ид верно. И вообще оно слегка на подпорках.Внимание! Продолжение истории :)"
    },
    "doc_90": {
        "url": "https://habr.com/ru/post/70330/",
        "title": "Были получены исходники 3300 глобальных интернет-проектов",
        "text": "Пару месяцев назад нами (2Товарища и Антон Исайкин) была обнаружена уязвимость, присущая в основном большим интернет-проектам (вроде Рамблера, Мейла, Яндекса, Оперы и пр.). Удалось получить доступ к файловым структурам известнейших сайтов (в общей сложности 3320 сайтов) и в ряде случаев их полные исходные коды.Казалось бы, что в XXI веке трудно найти подобную уязвимость. Кажется, что уже всё найдено, а то что не найдено, сидит где-то очень очень глубоко. Оказалось, что корнем сегодняшнего зла является вполне повседневная вещь. Наверняка каждый из вас когда-нибудь имел дело с системой контроля версий SVN.SVN является продвинутым средством для организации совместной разработки десятков, а то и сотен разработчиков. В силу особенностей архитектуры, SVN хранит в каждой директории проекта свои метафайлы, аккуратно сложенные в скрытую директорию .svn. В одном из файлов под названием entries находится список всех файлов и директорий, расположенных в той же папке, что и .svn. Так же там находится информация о расположении репозитория, размере файлов, даты их изменения и логины пользователей, работающих над проектом. Уже не плохо, правда? Объясню, получается, если проект разрабатывается с помощью SVN, то заглянув по адресу draftcopy.ru/.svn/entries мы увидим файловую структуру корня проекта с авторами, последними изменениями, ссылкой на основную ветку репозитория итп.Но можно пойти и далее. В той же папке .svn находится директори text-base, в которой лежат последние версии всех файлов, находящихся в репозитории. Картину дополняет так же и то, что файлы имеют не стандартное расширение (например .php), которое позволяет их сразу отправить на интерпретатор, а дополнительное расширение .svn-base, благодаря которому файл отдается запросившему его человеку «как есть», т.е. голый исходный код!draftcopy.ru/.svn/text-base/index.php.svn-baseСтоит заметить, что описанная картина является идеальной и хоть она и была таковой в большинстве случаев, все же большой процент исходных кодов не удалось получить по тем или иным причинам.Впервые осознав, что обнаруженная уязвимость присуща большинству проектов последние девять лет, было решено полностью просканировать рунет чтобы посмотреть чем живут интернет-проекты и получить интересную статистику. Но перед историей о том как это было, следует рассказать седым админам, как защищаться от подобного…Защита от уязвимостиУязвимость можно обойти несколькими путями. Путь в лоб — запретить обращаться к метадиректориям SVN по 80-ому порту, т.е. средствами вебсервера.Решение для nginxГлобальных локейшенов в nginx`е нет, поэтому прийдется подписывать для каждой server области. Чтобы правило имело силу, необходимо загружать его до других локейшенов с регулярным выражением. Универсальный способ — первым локейшеном.Решение для ApacheТут немного проще, дописываем это в httpd.conf и на всех проектах под управлением apache чтение из директории .svn будет недоступно.Решение средствами SVNЗащита от уязвимости средствами вебсервера — лечение болезни. Любой доктор скажет, что профилактика проще, легче и менее затратней, чем лечение. Поэтому лучшим решение будет отсутствие этих самых метадиректорий в корне проекта. Добиться этого можно средствами svn export из основной ветки. Информация взята с twocomrades.ruИстория исследованияКак уже было сказано, было решено просканировать весь рунет на наличие подобной уязвимости. Были подняты прокси-сервера, написан парсер и получена свежая база доменов в зоне ru. Первая версия скрипта работала две недели, получая сайт за сайтом в один поток. К завершению сканирования, база насчитывала более 3000 уязвимых сайтов и занимала более ста гигабайт исходных кодов.Проблемой первого сканировния было то, что скачивались все сорцы без разбора, не зависимо от того, отдавали они 200 или 500 код, а так же закачивалась графика и js-скрипты. А так же часто веб-сервера были настроены таким образом чтобы отдавать 200 код, даже если файл на самом дела отсутствовал.Вторая версия скрипта была уже шустрее, работала в несколько потоков с двух серверных машин и правильно различала коды ответа содержимое полученных страниц. Мы обошли весь рунет за 4 дня. Дальнейшими планами была база доткомов. Стало очевидно, что при текущих ресурсах обход был бы выполнен как минимум за пару лет (зона com сейчас насчитывает более 700 млн доменов (против 2 млн ru)).К дел был привлечен отличный си-программист Андрей Сатеренко, который написал быстрого демона, который сумел бы в пару раз сократить наши временные затраты. Но, к сожалению, к этому моменту лето кончилось, навалилилась работа. Грандиозные планы было решено свернуть.Прежде чем публиковать открыто информацию об уязвимости, необходимо было предупредить всех пострадавших. В первую очередь письма были разосланы гигантам (yandex.ru, rambler.ru, mail.ru, opera.com, rbc.ru, 003.ru, bolero.ru, habrahabr.ru, итого 19 адресов), затем, сегодняшней ночью, письма получили остальные 3000+ сайтов.Выпуск этой статьи был задержан ожиданием пока opera.com закроет уязвимость на всех своих серверах.Немного статистики:Просканировано доменов: 2253388Уязвимых: 3320Статистики по оповещениям пока нет, возможна она будет опубликована через пару недель. Из крупных порталов, ответили шестеро. Самым оперативным оказался Яндекс, прислав ответное письмо ночью в воскресенье. Десять проектов никак не прореагировали на наши письма, три проекта закрыли уязвимость не поблагодарив.Мы не злопамятные, мы запишем их имена…Несколько интересных фактов:Киберсквотеры полюбили SVN, как и оптимизаторы;Единый CSS для календарей яндекса собирается из десятка CSS средстами $make из консоли 0_0;На проектах Рамблера пользуются сервисами Яндекса 0_0, найдены файлы «подтверждения домена» для сервисов Яндекса;РБК использует и сервисы яндекса и сервисы гугля и очень любят «сложные» пароли;Опера уважает MySQL, но сайт у них на голом html с реальными директориями и поддиректориями;Блондинка уважает CodeIgniter;PostgreSQL уважают движок wikimedia => PostgreSQL уважают MySQL ;-) ошибко ;-(Все проекты Футурико (и Лепра) написаны на perl.Порядка 10 сайтов со словами в домене типа «hack» и «secure» уязвимы;Многие уверены, что назвав директорию с phpmyadmin примерно «__xpma123uff__» но сохранив пароль в конфиг, это хорошая защита;Многие до сих пор хранят конфиги в inc файлах, без расширения .php, которые открываются как текст в браузере.P.S. Во избежании конфликтов все исходные коды, полученные за время исследования были распечатанны и сожжены.P.S.S. Два пункта:абсолютно все, кто мог пострадать, получили предупреждения об уязвимости с точной датой обнародования заранее.никакие исходные коды ни при каких условиях не будут опубликованы или проданы. Не стоит писать нам по этому поводу.P.P.P.S. Спасибо за содействие хабрапользователю oowl. P.P.P.P.S. Никаких сорцов самого поискового механизма Яндекса получено не было, однако были получены корни веб морды некоторых ресурсов. Верстка, xmlapi, xsl шаблоны итп. Ничего серьезного, разве что все адреса репозиториев, логины разработчиков итп. Кукуц, Бобук, расслабьтесь.Игорь Сысоев, ведущий системный администратор компании Рамблер, разработчик известного своей легкостью веб-сервера nginx ответил на пару наших вопросов:Q: Отчего сразу столько известных проектов пренебрегли такой элементарной возможностью утечки?A: Причин, я думаю, много — кто-то считает, что в .svn лежит всё то же самое, доступное и без .svn. Кто-то, возможно, просто не знал или забыл об .svn.Q: Планируется ли внести в nginx возможность глобально перенаправлять URL (до директивы server, чтобы можно было при настройке сразу заблокировать потенциально опасные адреса)?A: Нет. Я считаю, что глобальные настройки в конечном итоге приводят к конфигурации, которую с каждым разом всё сложнее сопровождать."
    },
    "doc_91": {
        "url": "https://habr.com/ru/post/480956/",
        "title": "Как я нашел способ отследить всех водителей «Ситимобил»",
        "text": "В субботу вечером я, как всегда, сидел и снифил трафик со своего телефона. Внезапно, открыв приложение «Ситимобил» я увидел, что один интересный запрос выполняется без какой-либо аутентификации. Это был запрос на получение информации о ближайших машинах. Выполнив этот запрос несколько раз с разными параметрами я понял, что можно выгружать данные о таксистах практически в реалтайме. Вы только представьте, сколько интересного можно теперь узнать!С чего все началось?Да, я действительно сидел и смотрел трафик с телефона. Дело в том, что я инженер, и постоянно изучаю, как работают технологии и разные вещи вокруг меня. Так было и в этот раз.Я использовал mitmproxy (Man In The Middle Proxy) — программа для атаки «человек посередине». Есть много инструкций по её установке и настройке, а общий принцип такой:Подключаешься к домашнему WiFi с телефона и компьютераЗапускаешь mitmproxy на компьютереВ телефоне прописываешь локальный адрес компьютера как основной прокси (уже можно смотреть внутрь http)Скачиваешь и подтверждаешь сертификат на телефоне (позволяет заглядывать внутрь https)Теперь, грубо говоря, весь трафик с телефона идет сначала на компьютер, расшифровывается, показывается на экране, зашифровывается и идет дальше. И наоборот.Таким способом я изучаю, как сделаны разные приложения, а иногда нахожу очень интересные вещи. Например, в этот раз я увидел запрос от приложения «Ситимобил» на получение информации о ближайших водителях, который не требовал аутентификации.Bug bounty Mail.ruЯ оформил всю информацию на hackerone и отправил на рассмотрение. После опыта взаимодействия с баг баунти Яндекса, я не рассчитывал на быстрый ответ, однако уже через 3 минуты некто «3apa3a» закрыл мой репорт. Отличная скорость, Mail.ru! В ответе написали, что данные показываются пользователю в приложении, а значит не являются чувствительными и защищать их не надо.Ну что ж. Раз это публичные данные, давайте развлекаться!Как получить данные?Информацию о 10 ближайших водителях к геопозиции можно получить, отправив POST запрос на следующий адрес: При этом в теле запроса нужно указать интуитивно-понятные параметры:Здесь tariff_group — массив классов авто. Например, эконом, комфорт, бизнес и т.п.При этом поля radius и limit не работают, как надо, но и убрать их нельзя.В итоге, запрос на получение информации можно отправить просто из командной строки:В ответ приходит JSON с данными о 10 ближайших к (LAT, LON) автомобилях:Ответ сервераПосмотрим, что тут у насИдентификатор, широта, долгота, код направления (Северо-запад), код цвета и тип авто. Отлично!Нужно больше данных!Так как поля лимит и радиус в запросе игнорируются, а в ответ возвращается не больше 10 ближайших авто, нельзя так просто взять и выбрать N точек на Москву, чтобы за N запросов получить всю информацию об автопарке. Но решение есть. Я написал алгоритм, похожий на заливку, который запускает запросы на поиск с координатами водителей, найденных на прошлом этапе. Ещё я все это дело распараллелил, а прокси подключать не пришлось — mail.ru позволяет мне делать все несколько тысяч запросов за минуту с одного и того же ip. В результате за пару десятков секунд собирается информация о всех таксистах «Ситимобил», которые сейчас на линии в Москве и Московской области. Именно так получается гифка из начала статьи. Давайте посмотрим, как работает алгоритм еще разДумаете, сколько водителей на линии в воскресенье утром? В 11 утра их было 4374Но разве нас интересует срез? Давайте посмотрим в динамике.Найс. А как эти водители распределены в пространстве?Ну и напоследок давайте проследим за каким-нибудь водителем.Вот, видно маршрут. А ведь можно еще поднять частоту опроса и получить более точные данные.И что такого?А то, что данные вроде как важные.Во-первых, можно оценить долю рынка и доходность компании «Ситимобил».Во-вторых, на месте другого агрегатора (например, Яндекс.Такси) я бы использовал данные о положении таксистов конкурентов. Для ценообразования, например. Или вычислил водителей, работающих и там, и там на основе корреляций в геопозициях.В-третьих, раз можно отследить конкретного таксиста, можно отследить и его клиента. Это уже серьёзно. По факту, можно узнать, куда уехал человек на «Ситимобиле», если вы знаете, где он сел в такси.ЗаключениеНе нужно недооценивать важность данных, которые показываются клиенту. Если Mail.ru все еще считают, что эту информацию не нужно защищать, то Яндекс.Такси, вот вам гора данных. С её помощью вы сможете забрать часть прибыли Ситимобила. Если же Mail.ru признаёт, что данные чувствительные и закрывает к ним доступ, то будет честно выплатить вознаграждение по bug bounty.Как ещё можно использовать данные о таксистах по вашему мнению?Спасибо, что дочитали! Надеюсь, вам было интересно.Успехов!Update: Ответ СитимобилаКомментарий тутКомментарий на vc.ruТикет на HackerOne"
    },
    "doc_92": {
        "url": "https://habr.com/ru/post/543202/",
        "title": "Цензура в интернете. Надо что-то делать",
        "text": "Я устал от того, что власть имущие упыри делают с нашим интернетом:Нас лишают доступа в интернет, когда им удобноРесурсы лишают статуса СМИРесурсы блокируютРесурсы называют экстремистскими за освещение реального положения делЖурналисты, выполняющие свою работу, получают реальные тюремные срокиУвы, я не могу решать все эти проблемы. Но попробую сдвинуться с мёртвой точки в решении хотя бы части из нихЯ планирую небольшой цикл статей, и это первая из них. Тут я расскажу, что можно сделать только браузеромЛикбез. Как работает интернет?В протоколах TCP и UDP,  поверх которых работает семейство протоколов HTTP, нет понятия «имя  хоста» / «имя ресурса». Вместо этого они оперируют IP-адресами. Для  того, чтобы преобразовать имя хоста в IP-адрес (или «отрезолвить имя  хоста»), применяются DNS-сервера. Только после успешного преобразования  имени хоста в IP-адрес происходит соединение с ресурсомСхематично основные этапы установки соединенияЦензура  нарушает ход вещей. Механизмы цензуры атакуют инфраструктуру сети  Интернет и нарушают доступность и работоспособность ресурсовКак работает цензура?Некоторые вектора атаки:DNS-сервер может вернуть совсем не то, что вы бы хотели. Это называется подменой DNSДопустим,  мы смогли отрезолвить хост верно (или получили правильный IP-адрес  целевого хоста). Далее происходит попытка подключения. На этом этапе ваш  запрос может быть отфильтрован провайдером. Это называется фильтрацией  по IP-адресуДопустим, соединение установлено. Провайдер может принять решение его оборвать на основании анализа вашего трафика 1. Подмена DNSКлассика — прописать вручную DNS-сервера google 8.8.8.8 и cloudflare 1.1.1.1.  Но я отказался от такой конфигурации в пользу DoH — DNS-over-HTTPS, так  как протокол DNS не защищён ни от прослушивания, ни от подмены, ни от  фильтрации трафика по протоколу. Для DoH такое сделать сложнее — без  cloudflare солидная часть интернета ляжетНаконец, за реализацию механизма DNS-over-HTTPS в Британии компанию Mozilla назвали «злодеем года» — это о чём-то говорит Firefox + DoHТехнология DNS-over-HTTPS впервые появилась в Firefox 73 в 2018 году. Убедитесь, что версия Вашего браузера Firefox не ниже 73Со значением всех настроек можно подробнее ознакомиться в документации на support.mozilla.org и wiki.mozilla.org.  Совет — обязательно проверяйте, какие именно настройки вы  устанавливаете в соответствии с документацией. Я могу ошибиться,  школьник Петя может накрутить отсебятины, работающей только в его  богатом воображении, а товарищ майор Василий Мусоров может и вовсе  написать крайне убедительную статью про настройку браузера, с  предсказуемым для Вас финаломВ адресной строке браузера набираем about:configВ открывшемся окне в строке поиска настроек набираем network.trrНаходим настройку network.trr.mode. Я её установил в значение 2Находим настройку network.trr.excluded-domains, и там указываем onion,i2pНастройка DoH в Firefox 2. Фильтрация по IP-адресуТут  идея достаточно простая — пустить трафик не на заблокированный узел, а  куда-нибудь в обход — через proxy-сервер. Хотелось бы сделать это  по-умному, минимизировав объём трафика через дохлый proxy-сервер. Какой  смысл гонять через proxy тот же youtube? Объём трафика просто положит  proxy-сервер SmartProxy — создаём эффективные правила проксированияХорошая новость для тех, кто пользуется Chrome: SmartProxy доступен как для Firefox, так и для ChromeУстанавливаем SmartProxy. Разрешаем его работу в приватном режимеАктивация SmartProxyОткрываем панельку дополнения и активируем. После кликаем «Settings», и там находим «Прокси Сервера»Proxy-сервераРучное добавление Proxy сервераЧуть  дальше я расскажу об автоматическом добавлении серверов. Не торопитесь  бросаться добавлять сервера руками. Понимание процесса Вам потребуется, а  вот ручная работа — нетСписки proxy-серверов можно найти, например, на hidemy.name или на free-proxy.cz. Это ни в коем случае не все сайты, где можно найти списки proxy-серверовОбращаю  Ваше внимание — если Вы включили DNS-over-HTTPS, вам хватит SOCKS4,  которых очень много. В противном случае Вам остаётся использовать только  SOCKS5, которые поддерживают резолв имени хоста на стороне proxy, а  найти быстрый рабочий SOCKS5-прокси — квестСледует  понимать, что наличие proxy-сервера не гарантирует его  работоспособность. Адрес можно просто добавить в список proxy и  попытаться зайти на интересующий ресурс через него. Это работает. Но все  эти манипуляции занимают кучу времени. Намного быстрее проверить  proxy-сервер через curl:Добавление нового proxy-сервераВажно:  после нажатия на кнопку «Save» / «Сохранить» вы попадаете обратно к  списку proxy-серверов. В самом низу нужно нажать синюю кнопку «Save  Changes» / «Сохранить изменения». Если этого не сделать — изменения  применены НЕ будут, и добавленные сервера исчезнут при закрытии вкладкиАвтоматическое добавление Proxy серверовОчень  скоро ручное добавление proxy-серверов надоест. Я остановился на  варианте, когда вручную добавлены только proxy-сервера специального  назначения, а остальное я выгребаю через подпискуГугление по запросу «socks4 txt» вывело меня на репозиторий. Это ни в коем случае не единственный список proxy-серверов в интернетеПодписки на списки proxy-серверовСоздаём подписку на список proxy-серверовПочему именно такие значения? URL написаны в README вот тут.  10080 минут для периода обновления — это раз в неделю. Я посчитал это  достаточным, но это не значит, что это единственно правильное значение.  Протокол — в имени файла со списком серверовПосле  добавления можно нажать кнопку «Test». Если всё настроено правильно —  SmartProxy скажет, сколько серверов было добавлено. После сохранения не  забываем нажать синюю кнопку «Save Changes» / «Сохранить изменения».  Если этого не сделать — вы повторите мой подвиг «Так, а куда они  пропали? Только что ж были»Правила проксированияМы  добавили сервера, но без правил проксирования эти сервера лежат просто  мёртвым грузом. Перейдём на вкладку «Proxy Rules» / «Правила  проксирования»Список правил проксированияДавайте попробуем добавить lurkmore.to — он точно заблокированДобавляем правило для lurkmoreНемного  объясню, почему правило именно такое. Поле «Rule Type» / «Тип Правила»  определяет, что правило будет применяться для всех URL указанного сайта и  всех его поддоменов. «Rule Source Domain» указывает, что правило  действует только для домена lurkmore.to и его поддоменов, и ни на что больше. Поле «Proxy Server» имеет значение [General] — это значит, что для текущего ресурса lurkmore.to  будет применён текущий активный proxy-сервер. О выборе активного  сервера следующий раздел. Можно также указать конкретный proxy-сервер из  списка proxy-серверов, который мы наполняли ранее руками или по  подпискеПосле сохранения правила не забываем нажать синюю кнопку «Save Changes» / «Сохранить изменения». Иначе ну вы понялиПытаемся зайти на сайтТут немного нетривиальной магии. Я просто тыкаю рандомный IP из списка и пытаюсь зайти на сайт. Не удалось — следующий IPВыбираем активный proxy-серверМагии тут немного. Автор дополнения хотел разместить флаг страны,  где располагается proxy-сервер, но столкнулся с некоторыми трудностями.  Я попросил его разместить хотя бы трёхбуквенный код страны для каждого  proxy-сервера. Математика проста — чем ближе страна, тем меньше  задержка. Также будет очень глупо попасть на proxy-сервер страны, где  ресурс заблокирован3. Анализ вашего трафикаШифрование  сильно усложняет анализ трафика, но не делает его невозможным. По  возможности, следите, чтобы использовался протокол https. Воспользуйтесь  дополнением HTTPS Everywhere для Chrome и Firefox, который позволяет определить правила автомагического редиректа с протокола HTTP на протокол HTTPSESNIДля  шифрования HTTP-трафика и таким образом преобразования его в HTTPS  применяется протокол TLS. Проблема протокола TLS в том, что он позволяет  на одном сервере запустить лишь один HTTPS-сервер — прямо как старый  добрый HTTP 1.0. Для решения этой проблемы разработан протокол SNI. И вот тут была допущена ошибка — имя хоста передаётся в открытом виде. Это имя хоста перехватывает DPI провайдера и принимает решение о разрыве соединения. Идея ESNI проста — зашифровать SNIFirefox — первый браузер, реализовавший поддержку ESNI. Включаем:В адресной строке браузера набираем about:configВ открывшемся окне в строке поиска настроек набираем network.security.esni.enabledДвойным кликом мышки устанавливаем в значение trueВключение ESNI в FirefoxПроверить, работает ли ESNI в браузере, можно тутESNI очень не понравился власть имущим упырям, и его полностью блокируют в России и Китае — прям знак качества"
    },
    "doc_93": {
        "url": "https://habr.com/ru/post/254473/",
        "title": "Вы неправильно пишете животных",
        "text": "Животные – это платформы с очень ограниченной памятью, вычислительными способностями и возможностями модификаций. Разработчикам энимал-сцены приходится выдавать практически гениальные низкоуровневые алгоритмы. Правда, большое количество хардкода вызывает характерные проблемы с отсутствием проверки в экзотических условиях. Та же фильтрация входных данных делается очень и очень криво.Уязвимость рекурсивных алгоритмов навигации муравья: спираль смертиНе знаю, кто писал большую часть птиц, но я хочу обратить внимание на особенность, позволяющую провести инъекцию произвольного яйца в гнездо. Дело в том, что птица проверяет только расположение и количество яиц, но не их хэши. В 20% случаев кукушка, эксплуатирующая этот баг, может внести яйцо с сохранением контрольной суммы, чего вполне достаточно для повышения прав в гнезде. Но пойдём далее. Я не знаю, кто разрабатывал архитектуру ящериц, но они бегают в одном процессе, а дышат в другом. При этом платформа не поддерживает многозадачность, поэтому костыль с максимальной длиной бега в 4-6 секунд просто эпичен. Да, ещё о птицах, чтобы два раза не вставать. У них насквозь кривой модуль распознавания «свой-чужой». Что позволяет провести animal-in-the-middle-атаку с помощью подстановки звука птенца. Всё, что примерно совпадает по размерам и при этом передаёт открытую часть ключа, нужно покормить. Похожий баг есть у некоторых грызунов, что позволяет предположить проблемы с общей библиотечной функцией.Теперь муравьи. Муравьёв довольно легко зациклить. Навигационный блок у них совмещён с системой приоритетов ОС, поэтому при построении циклического маршрута образуется «спираль смерти», затягивающая всё больше и больше ресурсов муравейника – и всё это зависает на 3-4 дня, пока муравьи не погибнут от истощения или что-то снаружи не поменяет навигацию. Спираль будет забирать всё больше муравьёв из доступных источников, пока приоритеты не поменяет внешнее событие или муравьи не умрутА вот страус – вершина оптимизации.  То, как именно в него впихнули пищеварение, вообще достойно войти в «Жемчужины программирования». Чтобы эта птичка нормально переваривала пищу, разработчик придумал заставить его натурально жрать камни. При беге камни трясутся и перемалывают зёрна. Теперь самое весёлое. Чтобы не писать отдельный код для поедания камней, страусу просто взяли и отключили центральный сектор зрения (как зайцу, но там это известный минорный баг). Поэтому когда страус целится в зерно, он попадает только в 30-50% случаев. Что легко позволяет набирать нужное количество камней, да ещё и с запасом. Именно поэтому страусы, запущенные на чистой виртуальной машине в зоопарке, испытывали проблемы с пищеварением до появления поддержки камней на уровне гипервизора. Кстати, коровы тоже жрут гвозди и иногда гравий, но это не в архитектуре, а просто техническая ошибка обратной совместимости.Да, и ещё. Очень хорошая вещь – повторное использование кода. Часть функционала с камнями потом накатили на крокодила – чтобы ему нырялось лучше. Ныряется действительно лучше. Проблемы энергопотребления решаются не менее гениально.  С рептильной платформой всё ещё более-менее нормально (там просто нет долгих высокоуровневых процессов), и крокодил может сидеть сутки без движения до поимки мяса. А вот с теми же крупными хищниками всё пожёстче мобильных ОС. На 20 часов в сутки лев снимает все активные процессы и уходит в спящий режим. Примерно 4 часа он находится в активном режиме – рычит, размножается, сёрфит по саванне и находит новую зарядку в антилопе или зебре. Дельфину вообще не всегда удаётся включать оба ядра мозга – только тогда, когда нужно делать что-то важное. Если вам встретился тормозящий дельфин – проверяйте, оба ли глаза открыты. Только один? Значит, он в спящем режиме и работает на одном ядре с пониженной тактовой частотой. Медведь не всегда корректно выходит из hibernate-режима. Это же, кстати, касается некоторых растений, но там баг не так опасен. Растения легко перезапустить. И да, учитесь у тех, кто писал альбатроса. Альбатрос вообще спит в воздухе. Теперь черепаха. Ей вместо того, чтобы прописать нормальный алгоритм обхода препятствий, захардкодили рефлекс убирания головы в панцирь. Теперь даже если она натыкается на крокодила, тот со своим молниеносным броском не успевает откусить ей голову. Побочный эффект – черепаха легко уворачивается от ножа мясника. Скорость обработки инструкций процессора не сравнится со скоростью работы интерпретируемого высокоуровневого кода у повара. Черепаху не обгонишь, критичные функции переписаны на ассемблере.Белый медведь – отличный пример работы с солнечной энергией. Медведь прозрачный в УФ по меху и чёрный на коже. Это уже торжество инженера.Жираф – сплошной костыль. Нет, в целом, понятно, что требования заказчика по высоте кроны несколько раз повышались по мере развития проекта. Но вот то, что вошло в релиз по водопоям и было пропущено на приёмке – это нонсенс. Жираф тупо не достаёт головой до воды(!) в обычном режиме. Ему приходится жутко вывернуться и почти сесть на шпагат, чтобы попить. Ясное дело, анонимусы-хищники этим нагло пользуются. Детёныша вообще пришлось укреплять – он в стабильном релизе падает с полутора метров при рождении. Морской свинке и ряду рыб косо прописали задержки на прерываниях. Если обычное животное по очереди опрашивает прерывания вроде «нет ли опасности», «не надо ли попить», «не надо ли поесть», «не надо ли начать размножаться», «не надо ли лечь спать» и «не надо ли выполнять нестандартную процедуру» — и всё это без видимого переключения — то морские свинки делают sleep(1000); после каждой операции. Видимо, осталось с отладки и вошло в релиз. Хорошей идеей было накатить код сборщика мусора в ОЗУ от золотой рыбки на белку – garbage collector с высокой вероятностью очищает и неиспользуемые указатели на места размеченных орехов и семечек. В результате благодаря белке вырастает много новых деревьев. Вот индийскую кобру точно писал фанат Starcraft. Потому что, задумайтесь, где ещё можно встретить юнита, плюющегося ядом на два с половиной метра точно в глаз террану. Ну и раз начали о нерациональности – вспомним того же осьминога. Километры нервной ткани просто потому, что кому-то было интересно написать его на brainfuck. Да если использовать эти отдельные модули управления присосками, ту же ткань – может получиться вообще ЦОД на колёсиках. Или вот взять того же пингвина – летать не умеет, зато плавает и весело прыгает на полметра в высоту. Написали его в качестве учебного примера для объяснения принципов полиморфизма, а потом почему-то забыли закомментировать подключение библиотек с ним в основном релизе. Тлей и других насекомых, а также ряд животных точно писал бешеный фанат рекурсии. Светлая мысль рождать некоторых уже беременными – просто вынос мозга для тестеров. Зато слонёнок деплоится 22 месяца — вот что значит не влезть в кэш процессора. Кстати, пасхалка с бегемотом получилась смешная. Люди боятся львов, носорогов, змей – но только этот обаятельный толстяк целенаправленно бегает за человеком. И, внезапно, со скоростью до 30 км/ч. То есть догоняет даже велосипедистов. У некоторых кошек не убрали аппаратный байпасс в районе шкирки. Стоит взять взрослую систему за это место, так сразу отключается двигательная активность. Что породило опасный баг с прищепкой, которым часто пользуются скрипткидди. У курицы расслабленная лапа «защёлкнута», поэтому если поставить курицу на ветку, дождаться, пока она уснёт, а потом легко и быстро перевернуть, сработает рефлекс – и у вас будет курица, спящая вниз головой на дереве. Главное – подготовить почву и рассказать всей деревне про вампиров за день до зрелища такого курятника. У собак и ряда других хищников и падальщиков косо прописано распознавание добычи. В одном из условий AND случайно заменили на OR, и вот результат — известный баг с запуском приоритетного процесса с атакой на пятно лазерной указки. В общем, вы наверняка и сами можете продолжить.P.S. Обратите внимание, что большая часть описанных уязвимостей до сих пор не исправлена."
    },
    "doc_94": {
        "url": "https://habr.com/ru/post/86282/",
        "title": "Как я ловил хакера",
        "text": "Произошло это в начале 2008 года, когда я еще работал в одном крупном украинском банке инженером в IT-департаменте. Только спала новогодняя праздничная суета, и нагрузка на подразделения техподдержки немного поубавилась, как один из подотчетных мне web-серверов сообщил о заканчивающемся на диске месте. Беглый анализ показал, что стремительно росли логи IIS сервера, на котором крутится один из публичных платежных комплексов банка. Мои опасения оправдались – на сервер началась DDOS атака.Формат атаки был следующим: со скоростью 150-200 запросов в секунду, методом GET, шло обращение к одному и тому же URL с большого количества IP адресов. Т.е. работал небольшой международный ботнет. Сам сервер и фаервол банка с атакой вполне справлялись, поэтому у меня было достаточно времени, чтобы изучить атаку и выработать план мероприятий по ее устранению. Первым делом я проанализировал географию атакующих IP-адресов. Интенсивность была равномерно размазана по странам, и заблокировать какие-либо регионы было невозможно – банковским web-сервисом пользовались клиенты со всего мира, и блокировка какого-либо сегмента, означала бы для банка финансовые потери. Далее, предполагая возможный рост интенсивности атаки, я оптимизировал размер атакуемой страницы к минимуму. Нагрузка на сервер и фаервол упала, что не заставило себя ждать. Хакер, управлявший ботнетом, сменил адрес атакуемого URL, и атака перестроилась на картинку GIF – один из самых объемных элементов сайта. Эти действия дали мне хорошую зацепку, и я основательно подготовился к контрдействиям. Я написал ряд скриптов с использованием LogParser, обрабатывающие логи web-сервера и выявляющие «аномальное» поведение клиента. «Аномальным» считалось обращение к страницам в последовательности, не присущей ни клиентам банка, ни ботнету. LogParser удачно справлялся с гигабайтными логами, что давало мне хорошие шансы на оперативное реагирование. На этот момент атака достигла 500 запросов в секунду. Таким образом, я подготовился, и бросил приманку – переименовал атакуемую картинку, сделал возвращаемую страницу с 404-й ошибкой минимальной, и стал ждать. Через какое-то время атака на мгновение остановилась. Так как ее эффективность свелась к нулю, хакер начал вручную, через браузер, «прощупывать» сайт на наличие объемных элеменов – LogParser быстро выявил такое «аномальное» поведение. Этого мне было достаточно – IP-адрес хакера был у меня в руках и он, на удивление, принадлежал не анонимному прокси-серверу, а одному из украинских хостеров, а по совместительству, и хорошему клиенту этого самого web-сервиса банка. — Алло, Сергей Иванович, добрый день, Вас беспокоят из <%bank_name%>, c вашего сервера идет координация DDOS атаки на наш сайт— Здравствуйте. Скажите мне IP— XXX.XXX.XXX.XXX— Да, клиент сейчас работает в терминальной сессии на этом сервере, я его отключу, и передам вам доступ к серверу. С этими уродами нужно бороться. Кстати у меня есть его контактные данные.— Спасибо, я сообщу службе безопасности банка, они с Вами свяжутся.… продолжение следует (диалог с хакером в ICQ, «отрезание» головы червя, мои показания в управлении по борьбе с экономическими преступлениями и, собственно, чем это закончилось)UPD: по совету banzeg перенесен в Информационная безопасностьUPD: продолжение здесь: Как я ловил хакера 2"
    },
    "doc_95": {
        "url": "https://habr.com/ru/post/134150/",
        "title": "CSRF уязвимости на примере ХабраХабра",
        "text": "Уязвимости уже нет — её исправили задолго до появления этого топика.Очень часто многие веб-разработчики забывают о существовании этого метода взлома, а некоторые даже не знают о нём.К сожалению, подобные уязвимости встречаются даже в таких крупных системах, как ХабраХабр.С чего всё начиналосьВсё началось с того, что мою карму быстро слили до -16 единиц из-за вполне нормального, как я считаю, комментария. Мне стало обидно, ведь я регистрировался на этом ресурсе чтобы писать интересные всем топики, а теперь я не могу этого сделать.Я листал ленту, просматривая топики, и думал о том, как же хорошо их авторам, которые быстро набирают рейтинг и светятся в лучах славы. Без всякой надежды я ткнул в стрелочку, чтобы поставить плюсик топику. Как не трудно догадаться, я получил ошибку типа «Вашей кармы не достаточно для голосования».Ищем уязвимостиЯ сразу обратил внимание на то, что страница не обновляется а, значит, используется AJAX.Тут же вспомнилось про малоизвестные CSRF, или как их ещё называют XSRF уязвимости.Я стал FireBug'ом смотреть куда и как отправляются запросы. В первую очередь смутило то, что передавались только оценка (за или против), тип записи (топик) и id. Никаких дополнительных полей типа hash или token не передавалось.Не всё так простоВозможно, нетерпеливый читатель уже решил, что я нашёл элементарную, очевидную каждому дыру? Как бы ни так! Все мои попытки подделать запрос приводили к одному и тому же:Вначале я решил, что где-то ошибся. Но нет, я слал запрос на нужный адрес и передавал нужным образом все параметры. Но когда это делал скрипт ХабраХабра, то получал статус ответа 200, а я 404.Я стал внимательно проверять HTTP заголовки, и тут бросилось в глаза это:Что это за такой странный заголовок, которого не оказалось в моём запросе?Немного погуглив я узнал, что этот заголовок по-умолчанию передаётся при AJAX'е, а при запросе из формы, самой собой, не передаётся.Сделать AJAX запрос я не мог, т.к. Хабр находится на другом домене и меня бы просто не пустил туда браузер. И тут я вспомнил про заброшенный мною давным давно FlashPlayer. Быстро погуглив я вскрикнул ура!Да, товарищи, этот так многими не любимый аддон к браузеру может слать любые запросы на любой домен если… Если есть в корне этого домена правильный файл crossdomain.xml.Вы верите в судьбу? Я — нет. Но я был просто шокирован, когда нашёл в корне ХабраХабра этот заветный файл, который разрешал слать ему запросы на 80-ый порт с любого домена!Пишем эксплоитЯ выбрал ActionScript версии 2 во-первых, потому что его лучше знал, а во-вторых, потому что можно захватить с собой на корабль и пользователей старого FlashPlayer (начиная с версии 7).Что делать с эксплоитом?Всё, теперь дело за малым. Если у вас есть свой сайт, то не думая заливаем код туда и ставим в iframe.Если у вас нет сайта, то думая договариваемся за Profit с владельцем крупного приложения ВКонтакте и заливаем код к нему. Охват 50% пользователей гарантирован.Всё, теперь любой пользователь, если он не голосовал за ваш топик ранее, ставит вам + сам того не зная.Кроме того голосовать можно не только за топики, но и за комментарии, вопросы и КАРМУ!На памятьЛомать сайты — очень не хорошо. За это могут сделать ата-та-та по заднему месту.В случае с данной уязвимостью я быстро написал письмо в службу поддержки и уязвимость закрыли (исправив crossdomain.xml)."
    },
    "doc_96": {
        "url": "https://habr.com/ru/post/453596/",
        "title": "Мошенники и ЭЦП — всё очень плохо",
        "text": "Недавно общественность облетела новость о первом случае продажи квартиры мошенниками с помощью ЭЦП и подделки документов. Когда я раньше читал подобные новости, всегда воспринимал отстранённо, как будто со мной этого не может произойти, но я ошибался. И теперь могу заявить, в зоне риска мошенников — каждый, увы, даже хабровчане.Хотя в моём случае ситуация попроще, квартиру у меня не переписывали, зато куда более распространена — я и моя супруга без нашего ведома стали директорами нескольких ООО. Как нам сообщали в МВД, таких дел у них «только на этой неделе 17 шт». Напоминаю, что подписание документов с помощью ЭЦП равносильно подписанию собственноручной подписью юр. или физ. лица, поэтому, казалось бы, вопрос выпуска таких ЭЦП должен быть максимально безопасен, но к сожалению сейчас в России такие подписи выдают обычные коммерческие организации, действие которых контролируется только путём выдачи лицензий МинКомСвязи. И как показала практика, часто для этого нужна только картинка паспорта и номер СНИЛС, что есть у любого работодателя, банка, и других организаций, куда вынуждено даются такие документы.Итак, как дело было. Была у меня ипотека в одном зелёном банке. По случаю рождения второго ребёнка, я решил воспользоваться новой субсидией на ипотечную ставку в 6%, тем более что давно уже хотел рефинансироваться с 12% под более низкий процент. К слову, изначально ипотека была оформлена на меня как основного заёмщика, и на супругу как созаёмщика, то есть весь пакет документов был у банка. В новом банке супруга уже не фигурирует, и документы она не предоставляла. Собственно, 2 месяца это примерно длилось, и вот я довольный сижу на работе, пушу коммиты в репу, и тут звонок. «Здравствуйте, вы директор такой-то фирмы? Хотим предложить вам открыть расчётный счёт у нас» Я сразу заподозорил неладное, и полез в ЕГРЮЛ, и, к сожалению, тут понеслось. Как оказалось, на мне висят две ОООшки 2-недельной и 3-дневной свежести, а я их гендиректор и учредитель. Я поехал разбираться, написал заявление в ОМВД, написал заявления в налоговую, откуда потом узнал, что фирмы зарегистрированы с помощью ЭЦП.Сначала я очень испугался, что мне где-нибудь, да в процессе переоформления подсунули какие-нибудь бумаги, и я возможно что-то по невнимательности подписал. Но когда ситуация повторилась с моей женой, которая нигде ничего не подписывает, а сидит с ребёнком дома, стало понятно, что тут дело в утечке персональных данных, и незаконном изготовлении ЭЦП. А дальше началась чреда отбивания порогов различных инстанций — МВД, Прокуратура, ОБЭП, Налоговая, Роскомнадзор, Администрация Президента, суд:По линии полиции — многочисленные отказы в возбуждении уголовного дела, из-за отсутствия события преступления. Т. е. если кратко, то «когда вас убьют, тогда и приходите». Так как пока ко мне никто не выдвинул финансовых требований, события преступления нет.По линии налоговой — они сделали всё согласно регламенту, вот есть заявление, вот оно подписано подписью «у нас нет оснований для отказа в регистрации ООО». Они внесли лишь пометку, что «По данным ФНС сведения недостоверны», но фирмы по-прежнему действуют. Также по запросу нам дали информацию об удостоверяющем центре — и у меня, и у супруги это был один и тот же УЦ находящийся в Томске (естественно мы там даже близко не были никогда).По линии Роскомнадзора — они запросили информацию от удостоверяющего центра, они им предоставили ответ, что вот есть якобы документы от меня, а так как подлинность документов они не выявляют — обращайтесь в суд.ДокументыСобственно, сейчас суд, и тут тоже не всё так просто. Но беда, как говорится, не приходит одна, на свой старый адрес мне пришло два письма, от коллекторского агентства, с требованием вернуть деньги, которые были взяты в двух микрофинансовых организациях. Тут пришлось тоже писать заявление в полицию, пока по ним тишина.Немного сухих фактовУтекли старые сканы паспортов — везде фигурируют старые адреса прописки.Скан паспорта жены в процессе переоформления хранился только в зелёном банке, и больше нигде не предоставлялся, а это значит, что утечка была либо через сотрудника этого банка, либо через человека снимавшего обременение в росреестре, либо через человека принимавшего документы в МФЦ.Госпошлину за регистрацию ОООшек заплатил некий господин с нерусской фамилией.Как от этого защититься?Защиты во всех сферах, к сожалению, нет, т. к. с внедрением «электронного правительства» появляется всё больше мест, где можно осуществить операции с помощью ЭЦП. Но, в частности, защититься от регистрации юридических лиц по ЭЦП можно. Есть так называемая «38-я форма», а если быть точнее форма 38001, заполнив которую, можно запретить регистрацию юр. лиц, без личного присутствия. Правда заполнять и везти её придётся лично в регистрирующий орган (в Москве это 46 налоговая), и как я понимаю, она ограничивает это только в данном регионе, хотя могу ошибаться.К сожалению, налицо — законодательная дыра, которой пользуются мошенники, и пока не ужесточат контроль за выпуском ЭЦП, такие ситуации будут случаться только чаще.UPD1. Форма 38001Для заполнения формы PЗ8001, можно воспользоваться либо программой, либо скачать бланк. Заполняются для физ лица только первый лист и раздел Д (кроме адреса). Пример заполнения.UPD2. Примерный алгоритм действийалгоритм действийПервые два пункта как можно быстрее1) В налоговую подаём заявления по формам 34001 по каждой фирме, форму 38001 и жалобу, где описываете, что фирмы такие-то не регистрировал, ЭЦП не оформлял. Прошу признать регистрацию недействительной и отозвать ЭЦП. Подаём лично в налоговую занимающуюся регистрацией юр. лиц (в Москве 46 налоговая), обязательно берём себе отметку о принятии.2) Подаём заявление в полицию по месту нахождения налоговой.3) Пишем заявление в МИ ФНС по ЦОД заявление о предоставлении информации по УЦ, который выпустил ЭЦП, с помощью которых были зарегистрированы фирмы.4) Пишем в МинКомСвязи с описанием ситуации, требованием провести расследование, и признать ЭЦП недействительной.5) В случае отказа возбуждения дела в полиции, пишем в прокуратуру.6) Ждём ответов от налоговой, в случае отказов подаём в суд на УЦ.UPD3 Спустя годПочти спустя год, наконец, через суд добились признания выданной ЭП недействительной. Параллельно налоговая сама начала процедуру исключения фирм из ЕГРЮЛ, и на данный момент 2 из 3 фирм уже ликвидированы, ещё одна в процессе. Но нам с супругой повезло, что быстро среагировали. Мне уже написало несколько людей с подобной проблемой (у нас даже есть чат в телеграмме), но уже у которых налоговая требует выплатить несколько миллионов налогов, и уже списывают штрафы со счетов — в их случае налоговая сама всё не сделает. Сейчас готовим ещё один иск к УЦ на компенсацию юридических расходов, но в целом история у нас практически завершена.Если вы попали в такую же ситуация и у вас есть вопросы — пишите в телеграм, мой ник PaulZi.UPD4 РезультатыВсе фирмы ликвидировала сама налоговая, решающую роль в этом сыграло то, что на фирмах не успели образоваться долги. Суд к УЦ удовлетворён, но расходы которые были потрачены на юристов фактически потеряны, т. к. при наличии двух договоров по 30000 ₽, судья посчитала по соображениям \"адекватности и справедливости\" взыскать только по 3000 ₽. В общем такая у нас в стране \"справедливость\", вместо того, чтобы наказывать УЦ, отзывать у них лицензии, и выписывают копеечный \"штраф\". Ну как тут не штамповать такие поддельные ЭП?UPD5 2020Теперь на госуслугах можно посмотреть выданные ЭП. Заходим на сайт госуслуг, заходим в настройки, выбираем Электронные подписи, получаем полный список выданных сертификатов, находим среди них вами не выписанные и нажимаем кнопку \"Заблокировать подпись\". Готово!"
    },
    "doc_97": {
        "url": "https://habr.com/ru/post/423889/",
        "title": "Моё разочарование в софте",
        "text": "Суть разработки программного обеспечения— Нужно проделать 500 отверстий в стене, так что я сконструировал автоматическую дрель. В ней используются элегантные точные шестерни для непрерывной регулировки скорости и крутящего момента по мере необходимости.— Отлично, у неё идеальный вес. Загрузим 500 таких дрелей в пушку, которые мы сделали, и выстрелим в стену.Я занимаюсь программированием уже 15 лет. Но в последнее время при разработке не принято думать об эффективности, простоте и совершенстве: вплоть до того, что мне становится грустно за свою карьеру и за IT-отрасль в целом.Для примера, современные автомобили работают, скажем, на 98% от того, что физически позволяет нынешняя конструкция двигателя. Современная архитектура использует точно рассчитанное количество материала, чтобы выполнять свою функцию и оставаться в безопасности в данных условиях. Все самолёты сошлись к оптимальному размеру/форме/нагрузке и в основном выглядят одинаково.Только в программном обеспечении считается нормальным, если программа работает на уровне 1% или даже 0,01% от возможной производительности. Ни у кого вроде нет возражений. Люди даже гордятся, насколько неэффективно работает программа, типа «зачем беспокоиться, компьютеры достаточно быстрые»:@tveastman: Я каждый день запускаю программу на Python, она выполняется за 1,5 секунды. Я потратил шесть часов и переписал её на Rust, теперь она выполняется за 0,06 секунды. Это ускорение означает, что моё время окупится через 41 год, 24 дня :-)Наверное, вы слышали такую мантру: «Время программиста дороже времени компьютера». Это означает, что мы тратим компьютерное время в беспрецедентных масштабах. Вы бы купили машину с расходом 100 литров на 100 километров? Как насчёт 1000 литров? С компьютерами такое происходит постоянно.Всё невыносимо медленноОглянитесь вокруг: портативные компьютеры в тысячи раз мощнее тех, что привели человека на Луну. Тем не менее, каждый второй сайт не может обеспечить плавную прокрутку страницы на 60 FPS на последнем топовом MacBook Pro. Я могу комфортно играть в игры, смотреть видео 4K, но не прокручивать веб-страницы! Это нормально?Почтовому приложению Google Inbox в браузере Chrome от той же Google, требуется 13 секунд, чтобы открыть письмо среднего размера:This is, in real time, how long it takes for Google Inbox running in Google Browser to open an email. Not the shortest one, but still, it’s just text and pictures! Go Web Stack go! pic.twitter.com/CvqsFiIUuc— Nikita (@nikitonsky) February 28, 2018Он ещё анимирует пустые белые формы вместо того, чтобы показать их содержимое, потому что это единственный способ анимировать что-то на веб-странице с приличной производительностью. Нет, не 60 FPS, а скорее «настолько быстро, насколько возможно на этой странице». С нетерпением жду, что же веб-сообщество предложит, когда дисплеи 120 Гц станут мейнстримом. Они еле справляются с 60 Гц.Обновление Windows 10 занимает 30 минут. Что можно делать так долго? Этого времени достаточно, чтобы полностью отформатировать мой SSD-накопитель, загрузить свежий билд и установить его примерно 5 раз подряд.Павел Фатин: Набор текста в редакторе — относительно простой процесс, поэтому даже 286 могли обеспечить довольно плавный процесс набора.В современных текстовых редакторах задержка при наборе больше, чем в 42-летнем Emacs. Текстовые редакторы! Что может быть проще? На каждое нажатие клавиши, нужно всего лишь обновить крошечную прямоугольную область на экране, а современные текстовые редакторы не могут сделать это за 16 мс. А это много времени. МНОГО. 3D-игра заполняет экран сотнями тысяч (!!!) полигонов за те же 16 мс, а также обрабатывает ввод, пересчитывает мир и динамически загружает/выгружает ресурсы. Как так?Тенденция такова, что софт вовсе не становится быстрее и функциональнее. Мы получаем более быстрое оборудование, на котором софт с теми же функциями ворочается медленнее, чем раньше. Всё работает намного медленнее максимальной скорости. Никогда не задумывались, почему ваш телефон загружается от 30 до 60 секунд? Почему он не может загрузиться, скажем, за одну секунду? Здесь нет никаких физических ограничений. Лично мне бы такое понравилось. Хочется, чтобы разработчики достигли предела, используя каждый бит для производительности.Всё ОГРОМНОЕИ ещё это раздутие. Веб-приложения могут открываться в десять раз быстрее, если просто заблокировать рекламу. Google умоляет всех прекратить тормоза с помощью инициативы AMP — технического решения, для которого не нужны какие-либо технологии, просто немного здравого смысла. Если удалить раздувание, интернет станет работать на сумасшедшей скорости. Неужели это сложно понять?Система Android без приложений занимает почти 6 ГБ. Просто задумайтесь на секунду, насколько неприлично огромное это число. Что там, фильмы в HD-качестве? Думаю, в основном код: ядро, драйверы. Ещё какие-то ресурсы, конечно, но они не могут быть такими большими. Сколько же драйверов вам нужно для телефона?Windows 95 занимала 30 МБ. Сегодня у нас есть веб-страницы тяжелее, чем эта ОС! Windows 10 уже 4 ГБ, то есть в 133 раза больше. Но разве она в 133 раза лучше? Я имею в виду, функционально они практически одинаковы. Да, у нас появилась Кортана, но я сомневаюсь, что она весит 3970 МБ. Но это Windows 10, неужели Android должен быть ещё в полтора раза больше?Приложение клавиатуры Google как ни в чём не бывало съедает 150 МБ. Эта программа рисует 30 клавиш на экране — она правда в пять раз сложнее, чем вся Windows 95? Приложение Google app, в основном, просто пакет для Google Web Search, занимает 350 МБ! Сервисы Google Play, которыми я не пользуюсь (я не покупаю там книги, музыку или видео) — 300 МБ, которые просто сидят здесь и которые нельзя удалить.После установки всех необходимых приложений (социальные сети, чаты, карты, такси, банки и т. д.) на телефоне остался всего 1 гигабайт для фотографий. И это вообще без игр и музыки! Помните времена, когда ОС, приложения и все ваши данные помещались на дискету?Ваша программа для заметок наверняка написана в Electron и, таким образом, поставляется с драйвером для контроллера Xbox 360, умеет показывать 3D-графику, воспроизводить аудио и фотографировать с помощью веб-камеры.Простой текстовый чат всегда славился скоростью и малым потреблением памяти. Так что Slack — это пример очень ресурсоёмкого приложения. Я имею в виду, что чат и текстовый редактор — это самые базовые вещи, они должны потреблять меньше всего ресурсов. Добро пожаловать в 2018 год.Вы можете сказать, что они хотя бы работают. Но увеличение размера — не значит улучшение. Это значит, что кто-то потерял контроль. Мы больше не знаем, что происходит. Увеличение размера — это повышение сложности, снижение производительности и надёжности. Это ненормально и не должно считаться нормой. На раздутый размер нужно сразу обращать внимание — и держаться от них подальше.Всё гниётAndroid-телефон на 16 ГБ был прекрасен три года назад. Сегодня под Android 8.1 он еле работает, потому что каждое приложение увеличилось минимум вдвое без видимых причин. Дополнительных функций нет. Они не стали быстрее и внешний вид не изменился. Они просто… раздулись?iPhone 4s вышел с iOS 5, но едва может работать под управлением iOS 9. И это не потому, что iOS 9 намного лучше — в основном, система не изменилась. Но новое оборудование быстрее, поэтому они сделали программное обеспечение медленнее. Не волнуйтесь — вы получили захватывающие новые возможности, например… работа тех же приложений с той же скоростью! Не знаю.iOS 11 прекратила поддержку 32-разрядных приложений. Это значит, что если разработчик не готов вернуться и обновить приложение, скорее всего, вы не увидите снова эту отличную программу.@jckarter: Программу DOS можно заставить работать без изменений практически на любом компьютере, сделанном после 80-х годов. Приложение JavaScript может прекратить работу из-за завтрашнего обновления Chrome.Сегодняшние веб-страницы не будут работать в любом браузере через 10 лет (а может и раньше).«Нужно бежать со всех ног, чтобы только остаться на том же месте». Но смысл? Я могу постоянно покупать новые телефоны и ноутбуки, как все, но делать это лишь ради того, чтобы иметь возможность запускать все те же приложения, которые стали только медленнее?Думаю, что мы можем и должны исправить ситуацию. Сейчас все разрабатывают программы для сегодняшнего дня, изредка для завтрашнего. Но будет неплохо делать вещи, которые работают немного дольше.Хуже — значит лучшеСейчас никто ничего не понимает. И не хочет понимать. Мы просто выпускаем полусырую ерунду, надеемся на лучшее и называем это «здравым смыслом для стартапа».Веб-страницы просят обновиться, если что-то пошло не так. У кого есть время, чтобы найти причину неполадки?Любое веб-приложение выдаёт постоянный поток «случайных» ошибок JS, даже на совместимых браузерах.Вся архитектура баз данных веб/SQL построена на предпосылке (даже надежде), что никто не изменит данные, пока вы смотрите на открытую веб-страницу.Большинство приложений для совместной работы сделали «как смогли», там масса типичных сценариев, когда они теряют данные. Видели диалог «Какую версию сохранить?» Сегодня планка так низка, что пользователи рады даже этому вопросу.И нет, в моём мире не является нормальным приложение, которое говорит: «Я уничтожу часть твоей работы, только выбери какую».Linux намеренно убивает случайные процессы. И всё же это самая популярная серверная ОС.У меня каждое устройство регулярно выходит из строя так или иначе. Время от времени монитор Dell нужно аппаратно перезагружать, потому что в нём есть софт. AirDrop? Вам повезёт, если он обнаружит устройство, иначе что делать? Bluetooth? Спецификации настолько сложны, что устройства не будут устанавливать связь друг с другом, а периодические перезагрузки — оптимальный вариант.И я даже не упоминаю об Интернете вещей. Это настолько за гранью разумного, что даже нечего добавить.Я хочу гордиться своей работой. Я хочу делать рабочие, стабильные вещи. Для этого нужно понять, что конкретно мы разрабатываем, внутри и снаружи, а это невозможно сделать в раздутых, чрезмерно усложнённых системах.В программировании такой же хаосКажется, что никто больше не заинтересован в качественных, быстрых, эффективных, долговечных, основательных решениях. Даже если давно известны эффективные решения, мы по-прежнему боремся с теми же проблемами: управление пакетами, системы сборки, компиляторы, конструкция языка, IDE.Системы сборки по своей сути ненадёжны и периодически требуют полной очистки, хотя у них есть вся информация для инвалидации. Ничто не мешает сделать процесс сборки надёжным, предсказуемым и на 100% воспроизводимым. Просто никто не думает, что это важно. NPM уже много лет находится в состоянии «иногда работает».@przemyslawdabek: Кажется, что  является неотъемлемой частью рабочего процесса в проектах Node.js/JavaScript.А время сборки? Никто не считает проблемой, что компилятор работает минуты или даже часы. А как же «время программиста дороже»? Почти все компиляторы, пре- и постпроцессоры значительно, иногда катастрофически увеличивают время сборки, не обеспечивая пропорционально существенных преимуществ.Вы ожидаете, что программисты будут принимать в основном рациональные решения, но иногда они делают прямо противоположное. Например, выбирая Hadoop даже если он медленнее, чем выполнение той же задачи на одном десктопном компьютере.Машинное обучение и ИИ отбросили программное обеспечение к гаданию на кофейной гуще во времена, когда большинство компьютеров даже не были достаточно надёжными.@rakhim: Когда приложение или сервис говорит «под управлением ИИ» или «на основе машинного обучения», я читаю это как «ненадёжное, непредсказуемое поведение, которое не поддаётся объяснению». Я держусь подальше от «ИИ», потому что хочу от компьютеров противоположного: надёжности, предсказуемости и логики.Мы засунули виртуальные машины в Linux, а затем засунули Docker в виртуальные машины, просто потому что никто не смог разобраться с бардаком, который производят большинство программ, языков и их окружений. Мы накрываем дерьмо одеялами, чтобы не убирать его. Например, «единый бинарник» остаётся ОГРОМНЫМ преимуществом Go. Нет бардака == успех.Окружающая среда Python настолько загрязнилась, что мой ноутбук объявили зоной экологической катастрофы.Примечание. Агентство по защите окружающей среды Python хотело залить его цементом и захоронить с картинкой на входе — предупреждением для будущих цивилизаций об опасности использовать sudo для установки случайных пакетов А зависимости? Люди бездумно ставят переусложнённые «полные пакеты» для простейших проблем, не думая о последствиях. Из этих зависимостей растут новые. В конечном итоге вы получаете дерево, которое является чем-то средним между фильмом ужасов (огромное и полное конфликтов) и комедией (нет причин, по которым мы добавили сюда эти пакеты, но вот они):Программы не могут работать несколько лет без перезагрузки. Иногда даже несколько дней — это слишком. Происходят случайные глюки, и никто не знает почему.Что ещё хуже, ни у кого нет времени остановиться и выяснить, что произошло. Зачем беспокоиться, если всегда есть другой выход. Поднять новый инстанс AWS. Перезапустить процесс. Удалить и восстановить базу данных. Написать скрипт, который будет перезапускать ваше сломанное приложение каждые 20 минут. Включить одни и те же ресурсы несколько раз: тяп-ляп — и в продакшн. Двигайся быстро, не трать время на исправление ошибок.Это не инженерная работа. Это просто ленивое программирование. Инженерная работа предполагает глубокое понимание производительности, структуры и ограничений того, что вы создаёте. Лепить халтуру из некачественного материала — совершенно противоположное занятие. Чтобы развиваться, мы должны понимать, что и зачем мы делаем.Мы застрялиТаким образом, всё это просто куча едва работающего кода, добавленного поверх ранее написанного едва работающего кода. Он продолжает расти в размерах и сложности, уменьшая шансы на изменения.Чтобы иметь здоровую экосистему, необходимо вернуться. Необходимо иногда выбрасывать хлам и заменять его лучшими альтернативами.Но у кого есть на это время? Новые ядра ОС не выходили сколько, 25 лет? Это сейчас стало слишком сложным, чтобы просто взять и переписать. В браузерах накопилось столько пограничных ситуаций и исторических прецедентов, что никто не осмелится писать движок с нуля.Сегодняшнее определение прогресса — или подбросить топлива:@sahrizv: 2014 — нужно внедрить микросервисы для решения проблем с монолитами.2016 — нужно внедрить Docker, чтобы решить проблемы с микросервисами.2018 — нужно внедрить Kubernetes, чтобы решить проблемы с Docker.или изобретать велосипед:@dr_c0d3: 2000: напишите 100 строк XML, чтобы «декларативно» настроить сервлеты и EJB.2018: напишите 100 строк YAML, чтобы «декларативно» настроить микросервисы.В XML были хотя бы схемы…Мы застряли, и никто нас не спасёт.Бизнесу всё равноПользователям тоже. Они выучились принимать то, что мы делаем. Мы (инженеры) говорим, что каждое приложение для Android занимает 350 МБ? Хорошо, они будут с этим жить. Мы говорим, что не можем обеспечить плавную прокрутку? Окей, они свыкнутся с телефоном, который подтормаживает. Мы говорим: «Если не работает, перезагрузитесь»? Они перезагрузятся. Ведь у них нет выбора.Конкуренции тоже нет. Все строят одни и те же медленные, раздутые, ненадёжные продукты. Случайный скачок вперёд по качеству даёт конкурентное преимущество (iPhone/iOS против других смартфонов, Chrome против других браузеров) и заставляет всех перегруппироваться, но ненадолго.Наша миссия как инженеров — показать миру потрясающие возможности современных компьютеров с точки зрения производительности, надёжности, качества и удобства использования. Если нам не всё равно, люди потянутся. И никто кроме нас не покажет им, что такое возможно. Если только нам не наплевать.Не всё так плохоИногда на пасмурном небосводе просвечивают лучики надежды.Работа Мартина Томпсона (LMAX Disruptor, SBE, Aeron) впечатляет, она освежающе проста и эффективна.Редактор Xi Рафа Левиена, кажется, построен на правильных принципах.Джонатан Блоу для своей игры разработал язык компилирования, который компилирует 500 000 строк в секунду на ноутбуке. Это холодная компиляция, никакого промежуточного кэширования, никаких инкрементальных билдов.Не нужно быть гением, чтобы писать быстрые программы. Здесь нет какой-то магии. Единственное, что требуется, — это не строить софт на базе огромной кучи дерьма, которую поставляют современные инструменты.Манифест лучшего мираЯ хочу видеть прогресс. Я хочу перемен. Чтобы современное программное обеспечение совершенствовалось, а не стояло на месте. Я не желаю заново изобретать одно и то же, каждый раз выпуская всё более медленный и раздутый продукт. Я хочу во что-то верить — в достойную цель, в будущее, которое лучше, чем то, что мы имеем сегодня, и чтобы появилось сообщество инженеров, которые разделяют это видение.Что мы имеем сегодня — это не прогресс. Мы едва достигаем бизнес-целей с этими плохими инструментами. Мы застряли в локальном оптимуме, и никто не хочет двигаться. Это даже не хорошее место, оно раздутое и неэффективное. Мы просто как-то привыкли к нему.Поэтому я хочу заявить: нынешняя ситуация — полное дерьмо. Как инженеры, мы можем и должны, и сделаем лучше. У нас могут быть лучшие инструменты, мы можем создавать лучшие приложения, более быстрые, предсказуемые, более надёжные, использующие меньше ресурсов (на порядки меньше!). Мы должны глубоко понять, что мы делаем и почему. Мы должны выпускать продукты надёжно, предсказуемо, с самым высоким качеством. Мы можем и должны гордиться нашей работой. Не просто «учитывая то, что у нас было...» — никаких оговорок!Надеюсь, я не одинок. Надеюсь, что есть люди, которые хотят того же. Я буду рад, если мы хотя бы начнём говорить о том, насколько абсурдно нелепа нынешняя ситуация в индустрии программного обеспечения. А потом, возможно, придумаем, как выбраться из неё."
    },
    "doc_98": {
        "url": "https://habr.com/ru/post/542372/",
        "title": "Идеальное резюме для разработчика",
        "text": "Привет! Хочу поделиться своим мнением об оформлении резюме для разработчиков. Хорошие компании получают тысячи резюме в год, поэтому важно быть конкурентным на этом поле. Приведу в пример свое резюме, которое помогло мне в разное время найти работу в Европе, получить зарплату выше рынка, и привлечь внимание больших технических компаний.Советы в статье ориентированы на разработчиков с опытом работы. Разработчикам без опыта работы либо стажёрам подойдет только часть советов. Разработчикам с выдающимися достижениями (научные работы, исследования, авторы популярных продуктов) эти советы могут не понадобиться вовсе, так как для их резюме требования занижены.Также, стандарты резюме отличаются от страны к стране, от рынка к рынку. В странах где развит аутсорс больше смотрят на конкретные технологии, а не на достижения. В разработке игр могут быть важны фундаментальные знания (например, математика, физика). В Германии допускается фотография в резюме, а в США нет. Отталкивайтесь от специфик индустрии когда подаете резюме, чтобы увеличить шансы, что вас заметят. Чтобы не засорять статью примерами, покажу свое резюме. Откройте его в соседней вкладке, подмечайте как я применил свои же рекомендации.Общие советыРазмер. Идеальный размер резюме 1 страница. Вы можете позволить себе 2 страницы, но только когда это действительно важная информация, например, достижения на работе или вклад в Open Source. Стиль. Резюме должно быть в едином стиле. Не перебарщивайте с тем, чтобы в резюме был одновременно курсив, выделение жирным, разный шрифт, размер и цвет.Одна колонка. Не разбивайте ваше резюме на две колонки, вторая колонка, расположенная справа, заберет внимание читателя на менее ценную информацию с самого начала.Название файла. Название должно отображать роль, на которую вы подаетесь, и идентифицировать вас — resume_dmytro_striletskyi_software_engineer, можно пойти от большего к меньшему — resume_software_engineer_dmytro_striletskyi. Можно сократить software_engineer до se.Формат. Признанным форматом резюме является PDF. Возможно, в каких-то компаниях корпоративным стандартом будет другой формат, но вы об этом точно узнаете.Личная информация. Уберите из резюме фото, пол, возраст, семейный статус, это связано с дискриминацией, почитать можно здесь.Ссылки. Есть два варианта: Github (или ваш никнейм) либо https://github.com/dmytrostriletskyi (или сокращенный вариант, например, через bit.ly). В первом варианте вы «зашиваете» ссылку в текст и по нажатию на него страница откроется в браузере. Во втором варианте вы указываете полную ссылку на случай если резюме будут распечатывать. Как мне кажется, если у того, кто смотрит резюме в распечатанном виде, есть возможность зайти по ссылке из резюме, набрав ее в браузере, то у него уже давно есть доступ к этому резюме в электронном виде на том же устройстве (почта, корпоративных мессенджер). Более того, есть мнение, что по ссылкам вообще никто не переходит в компаниях, у которых десятки тысяч резюме в год, поэтому лучше занять ими как можно меньше места.Иностранные языки. Если вы подаете резюме в компанию, где говорят на английском, то нет смысла указывать его в резюме. Ваше резюме уже предполагает что вы знаете его на необходимом для работы и жизни уровне (это проверят на собеседованиях). Знания других иностранных языков можно указывать когда: это пригодится по работе (например, заказчик в вашей будущей компании из Китая и вы знаете китайский) либо это язык страны, куда вы хотите переехать и национальный язык там не английский (немецкий, французский) — тогда это точно оценят. Родные языки просто так нет смысла указывать, если в вакансии нет таких требований.Грамматика. Проверяйте текст в резюме на грамматику (например, Grammarly, есть бесплатный режим). Советую взять полчаса у носителя языка на любой популярной платформе (например, Preply, это будет стоить меньше $10), он также проверит, «звучит» ли текст.Композиция. Текст должен быть выровнен по левому краю. Так ваше резюме будет приятно читать (как статью или книгу).СтруктураОписывать структуру буду в порядке очередности сверху вниз. В общем, нужно отталкиваться от принятых стандартов и что самая важная информация должна быть в самом начале.ЗаголовокВ нем нужно указать:Имя и фамилия. Если ваше имя трудно произнести человеку из другой страны, рассмотрите вариант либо сократить его (например, из Alexey сделать Alex), либо переделать (например, из Ekaterina сделать Kate).Желаемая должность. Может быть непонятно, из предыдущего опыта, на какую должность вы претендуете. Например, вы хотите попробоваться на позицию Senior, а в резюме такого опыта не было. Или у вас в резюме есть роли где вы руководите командой, но в новой компании вам делать этого не хочется.Почта. Лично мне нравится, когда название почтового адреса более или менее стандартное (имя и фамилия), а не какой-то dark.knight13@gmail.com, хотя не могу сказать что это вообще влияет на что-то.Номер телефона. По моему опыту, рекрутеры из определённых стран больше любят звонить, а не общаться по почте (например, из Великобритании и Германии). Наличие номера страны в которую ты подаешься, в моем случае, было не обязательным, все равно звонили на украинский.Текущая локация. Ограничьтесь городом и страной, не надо указывать улицу и номер дома.Виза. Если у вас нет легального права работать в стране, в которую вы подаетесь, вам нужно об этом написать словам вроде «Willing to relocate», «Ready to relocate», или «Visa sponsorship required». Если у вас есть легальное право работать в стране, то укажите словами вроде «H1B visa holder» или «UK Global Talent visa holder», это конкурентное преимущество.В суме с предыдущим пунктом, информация где вы сейчас территориально находитесь, даст больше контекста. Кто-то не перевозит разработчиков, кто-то перевозит, но хочет, чтобы вы начали удаленно, а такой возможности может и не быть. Таким образом компания поймет, нужна ли вам помощь с переездом, сюда входит как оплата всех визовых трат, авиабилеты, аренда квартиры на первое время, и прочее.О себеРасскажите работодателю о себе, своих достижениях и опыте в профессиональном плане за весь карьерный путь. Здесь можно упомянуть количество лет в индустрии, сферы в которых вы работали (например, FinTech), предпочитаемые типы компаний (например, стартапы и продуктовые), ваши ключевые навыки (например, опыт в distributed systems и/или NLP), вклад в Open Source, наличие блога, статей, канала на YouTube, ценности в инженерии (например, про культуру разработки).Добавьте ссылки на ваши ресурсы: Github, LinkedIn, Stack Overflow, Medium, Habr, YouTube, персональный блог.Указывайте личные увлечения и хобби только если они как-то связаны с будущей работой. Например, в компании делают приложение для велосипедистов, а вы мастер спорта по велоспорту. Не описывайте себя банальными словами, которые не несут полезной информации, типа творческий и стрессоустойчивый, если их нельзя подкрепить вашим опытом и достижениями.Опыт работыОписывается в обратном хронологическом порядке, то есть последний опыт сверху. Если вы работали в большом количестве компаний, то самые начальные позиции не стоит описывать вообще, сконцентрируетесь на последних. Описание должности и компании состоит из:Название должности. Если вы росли в компании по разным должностям, я рекомендую подробно описывать это на таких площадках, как LinkedIn, а в резюме указывать либо подходящую должность для вакансии, либо комбинацию из нескольких (например, Software Engineer & Tech Lead).Название компании. «Зашейте» ссылку на сайт компании в ее название.Город и страна. Указывайте где вы находились во время работы, а не месторасположение компании. Дата начала и конца работы. В случае если вы еще работаете в компании, пишите Present вместо даты конца. Формат даты состоит из месяца и года.Персональные достижения за время работы.О персональных достижениях подробнее:Они должны быть оформлены как список (ненумерованный).Каждый пункт описывает ваше (не команды и не компании) достижение. Поэтому слова «участвовал» или «помогал» здесь неприменимы.Указывайте конкретные цифры.Не пишите про дефолтные вещи вроде участия в код-ревью, митингах, написании тестов, починке багов.Примеры достижений:Ускорил алгоритм поиска свободной машины такси на 25%, что увеличило количество поездок в месяц на ~300 тысяч.Объединил два экрана в мобильном приложении в один, что увеличило конверсию на 2.3%.Управлял командой из 5 разработчиков.Также полезно знать:Это нормально, если у вас нет особых достижений, или они есть, но их трудно выразить в цифрах. Попробуйте сконцентрироваться на том, что вы сделали, и написать как есть. Например, «сделал распределенную копию Google Drive».Уберите нерелевантный опыт. Например, вы были разработчиком в первой компании, потом стали СТО во второй и подаетесь в третью компанию на позицию разработчика. Если в вакансии не указаны требования к опыту на высоких должностях, то лучше поменять СТО на что-то вроде Senior Software Engineer или Tech Lead, убрав нерелевантные достижения вроде управлял бюджетом на найм сотрудников. Лучше сфокусироваться на ваших знаниях и опыте, которые будут наиболее применимы к работе разработчиком.Технологии и навыкиУкажите несколько строк про технологии и навыки, которыми вы владеете. Начните с основных (например, Python), продолжите стандартами в индустрии (например, Docker, Kubernetes), закончите специфическим (например, ELK). Указывайте технологии в которых вы либо хорошо разбираетесь, либо у вас был ценный опыт. Не указывайте то, с чем вы почти не работали, либо работали давно и ничего не сможете рассказать — вас обязательно спросят.Также не надо писать сколько вы работаете с технологией в годах, и уж тем более выставлять оценки своим знаниями по какой-то шкале. Ваши знания всегда будут относительными по отношению к разработчикам на рынке и к разработчикам в самой компании. Оставьте это на собеседования.Я ничего не писал про технологии в блоке опыта работы. Я считаю, что они засоряют ваши достижения и ничего не говорит работодателю. Ведь неважно на какой конкретной технологии вы сделали какой-то проект, если вы его сделали, и ваш опыт релевантен требованиям компании. Но я видел много успешных резюме и с обратным подходом.ПроектыВ этом разделе можно рассказать о ваших проектах в нерабочее время. 1-2 предложения на каждый из проектов, описание должно быть как можно лучше ориентировано на нетехнических специалистов, если это возможно — тогда проблемы, которые вы решали, поймет каждый. Оставьте ссылки на проекты и укажите технологии, которые вы использовали (это будет уместо потому что проекты могут быть вообще не по профилю, например, бэк-енд разработчик сделал мобильное приложение).ОбразованиеУкажите степень, специализацию, учебное заведение и, опционально, год окончания. Если у вас бакалавр и магистр по одной специализации в том же заведении, оставьте только информацию про магистра. Если у вас высокий средний балл, его тоже стоит указать, но чем больше у вас профессионального опыта, тем менее это ценно. Школу и техникум тоже можно указать, но только если это топовые и известные заведения, о которых читатель резюме с высокой вероятностью будет знать.Не указывайте совсем нерелевантное образование, за исключением когда это пересекается с будущей работой. Например, вы учились в медицинском университете, а компания делает продукт для сферы здравоохранения.ДругоеПочести и награды ввиду побед на олимпиадах и хакатонах, сертификатов, волонтёрства, опыт преподавания тоже стоит указать, но только при условии, что эта информация составляет конкуренцию вашему профессиональному опыту. Читателя резюме нужно поместить в контекст вашего достижения: одно дело сказать «я выиграл хакатон», другое дело «я выиграл хакатон и сделал из проекта рабочий продукт для государства, вот ссылка».ЗаключениеСоветы выше — не новы. Я хотел поделиться своим мнением и привести в пример свое резюме. Читайте комментарии на случай если сообщество найдет какие-то советы вредными. Также рекомендую посмотреть еще это:Советы для резюме от Patrick Shyu, ex-Google ex-Facebook Tech Lead на YouTube.Статья на Хабре, хотя ее автор, со временем, поменял отношение к некоторым из пунктов.Чат в Телеграме, где вы можете прислать свое резюме и попросить критику.Короткое и длинное видео с советами для резюме от Google на Youtube.Спасибо за внимание, буду обновлять статью, если что-то забыл упомянуть. Если у вас есть вопросы или вы хотите что-то обсудить, жду в комментариях или личных сообщениях. Если вам интересно услышать больше моих мыслей про разработку и ИТ-индустрию в целом, подписывайтесь на мой Телеграм-канал. Если подписались, присылайте свое резюме в личные сообщения, помогу с оформлением в честь благодарности."
    },
    "doc_99": {
        "url": "https://habr.com/ru/post/476916/",
        "title": "Я больше не хочу работать, никогда и ни над чем. Но из меня научились выжимать результаты",
        "text": "Дерьмовое утро удалёнщика всегда начинается одинаково. Если детский плач не смог вытащить меня из кровати, то нытье жены сделает это с гарантией. Сумасшедшие девять утра, через час дейли-синк-ап, а за вчера, как всегда, сделано нихрена. Быстро варю кофе и за комп. За пять минут до созвона пулл реквест с кодом энтерпрайзного качества увесисто встал в очередь на билд. Иду курить, но по дороге телефон заорал — я зачем-то установил на него скайп, и теперь работа может добраться до меня где угодно. Курение откладывается, я готовлюсь возмущаться, что мне позвонили раньше положенного. Напялил наушники, принял вызов. Вместо привычной девушки менеджера созвон начал какой-то незнакомый мне чел. «Всем привет, Аня заболела, я буду её замещать». Окей, кому какое дело, с таким же успехом они могли бы прислать нам в качестве менеджера собаку — ничего бы не изменилось.Парень быстро меня переубедил:— А что, у вас нет практики использовать вебки на дейликах?— Нет, а нахер они нужны?— Бла-бла-бла, исследование, бла-бла, использование вебок повышает производительность команд— Ээ, где тут может быть связь?— Бла-бла-бла, успех, преодолевание, командная работа, миллионы возможностей, бла, Бла!!!Под кучей слов всегда спрятаны очень простые вещи, которые никто никогда не говорит напрямую. В идеале он должен сказать: «Без вебки я не верю, что вы меня слушаете». А я должен ответить «Я и не собираюсь тебя слушать, но буду и дальше это скрывать». А если копнуть глубже, то разговор совсем простой:— Не хочу работать.— Надо.Я годами пишу код каждый день и отлично знаю, что если мне не хочется над чем-то работать — получится и медленно, и плохо. Бизнес, с которым я имел дело, вводит KPI, и они показывают, что я часто работаю не очень-то хорошо. Бизнесу это не нравится, он начинает требовать улучшения показателей. Требовать с меня, с лида, с менеджера, и с менеджера менеджера тоже. Вот тут каждый из нас начинает вносить свой вклад в улучшение показателей. Главный менеджер вводит, например, вебки на синкапах. Обычный менеджер заставляет нас точнее эстимировать таски, из-за чего мы перестаём думать о том, как надо решать проблему — мы думаем, за какое время точно сможем назвать тикет выполненным. Лид дробит задачи на более маленькие. А я вместо того, чтобы писать системный, устойчивый код просто пуляю мелкие, тупые фиксы, которые закрывают тикеты. KPI улучшается, бизнес записывает все эти шаги в блокнотик, вешает его у входа в головной офис, нанимает хранителя блокнотика и подчиняет всю разработку этому артефакту. Так рождаются цифры, которыми они потом мне же и доказывают — ритуалы работают. А я в этот момент мысленно благодарю всех богов, что не пишу медицинский софт. Кусочки говна, которые я называю своим вкладом в проект, когда-нибудь, очень скоро, дадут сбой. Где-то какой-то бизнес потеряет какие-то деньги, кого-то уволят, кто-то принесёт своему боссу новые цифры, которые докажут, что у них неправильно работает отдел тестирования, и они притащат свои ритуалы и туда тоже. Но никто не умрёт, я получу свои деньги, и украшу резюме кейскилом Agile.Эта корпоративная практика только жрёт бюджет, перерабатывая его в лживые отчёты, которые показывают, насколько эта практика всё улучшила и ускорила. На основании этих отчётов руководство даёт эджайлу больше бюджета, и эджайл даёт ещё больше отчётов. Но у этой системы нет оптимизации хвостовой рекурсии, место в стеке кончится, фирма разорится, менеджеры расскажут про падения, которые нужны, чтобы приобретать новый опыт, и пойдут хоронить следующую компанию.И я их понимаю. Мы живем в мире, где человеческая жизнь, типа, главная ценность, но человеческие желания ничего не стоят. Мало ли чего ты хочешь — тебе заплатили, работай. Просто способы бизнеса влиять на сотрудников эволюционировали. Вместо наказаний они стали взламывать наше нежелание работать и выжимать из нас как из апельсинчиков результаты вопреки нашей воле.Меня много раз поощряли, давали премии, повышали ЗП, просто хвалили. Но это всегда происходило после того, как я закрывал тикет раньше эстимейта, или хлопал сразу несколько задач одним ПРом. То есть, мне говорили, что довольны моей работой только тогда, когда я давал им скорость. Такой дикий акцент на скорости в ущерб качеству — не стратегия, а стечение обстоятельств. Потому что скорость, в отличие от качества, можно посчитать не напрягая мозги. Их дурацкие бизнес вэлью — только то, что может разглядеть проджект менеджер. В итоге ты оказываешься перед выбором: или ты говнодел, или хреновый работник. Да, у кого-то находятся силы всех вокруг убеждать, гнуть свою линию, но точно не у большинства из нас. Нас никогда не нанимают как говноделов, и нас не учат быть тикет-конвейерами. Но ты начинаешь работать, и тебе молча намекают «давай-ка ты, Фил, делай побыстрее, с минимально возможным качеством, ну чтоб оно вот прям сегодня не развалилось». Иногда эта система даёт сбой, я пишу хороший код, и этого никто не замечает — скажи спасибо, что не вломили за просранный эстимейт. Потом я прихожу на собеседование, меня просят рассказать про случаи, где я собой горжусь. Я пересказываю те самые моменты, когда я сделал что-то хорошо, забивая на аджайл и менеджеров. И мне говорят: «Круто!!! Такие люди нам и нужны». Но через два дня пишут в слак: «Я не понял, ты уже два дня потратил на задачу, которая у нас, вообще-то, делается за 20 минут. Нам нужно созвониться и обсудить твой прогресс».Я устал объяснять всем вокруг, что есть таски, которые не стоит декомпозировать, что «временное» решение сейчас породит сотню таких же в будущем, и они в свою очередь породят ещё больше костылей… Каждое такое изменение в говнопроекте ухудшает его ещё больше, независимо от качества человека, который его внёс. Для меня это прописные истины, для бизнеса я опасный дурак, который спорит с его цифрами.Да, я могу всю жизнь делать какую-то хрень, а могу строить важные штуки, или даже встать у истоков великого проекта, как какой-нибудь Столман или Торвальдс, чтобы потом успешные успехи вышвырнули меня из него, потому что я старый токсичный мудак, который портит им комьюнити. Проблема в том, что всё это не имеет значения. Придурки без видения, которые рано или поздно начинают определять любой важный процесс, всё испортят.Успешные успехи умудряются превратить в безликую, мерзкую попсу всё что угодно. Они просекли, что программистам нравится разрабатывать, и придумали понятие «Драйвит». Они придумали, как отличать тех кого «драйвит» от тех, кого «не драйвит». Создали сотни паттернов для того, чтобы запихать любую стоящую идею в блестящую пластмассовую коробочку, и сделать её максимально обычной. Отняли всякую уникальность у всего, чем я бы хотел заниматься. Они так сделали, потому что в этом вся их успешноуспешная сущность — в них нет уникальности, и они выпиливают её везде, где смогут увидеть, потому что ненавидят и боятся. В итоге мне предложена индустрия, творческая по своей сути, в которой на уникальность нет опций. Всё очень просто — ты, Фил, винтик в механизме. Не хочешь им быть? Отлично. Это наш любимый вид винтиков. Вот тебе куча денег, привыкай к ним, чтобы ты и не подумал уйти от нас, и попробовать что-то делать самостоятельно. Вот тебе печенье, крутой офис, удалёнка, комьюнити, конфы-тусовки, шикарный кофе, уважение, возможность ничерта не делать на работе, всё что хочешь — только не вздумай говорить, что наш мир ненастоящий.На мою мотивацию делать работу хорошо не влияют деньги, тимбилдинги, корпоративный дух или цели компании. Я работаю ради инженерной самореализации — такого чувства, когда заходишь в свой пулл реквест, и думаешь «чёрт, это охренительно сделано». Когда каждый твой коммит улучшает кодовую базу проекта, и тысячи твоих задумок слаженно работают с тысячами задумок твоих коллег, образуя связную систему. Это настоящая магия, и, если честно, такое у меня случается очень, очень редко. Про большую часть своих «вкладов» я бы предпочёл забыть. Тикет в резолвед, бабки на карту, ещё одна неделя жизни прожита только для того, чтобы я смог её прожить. И я оказался ещё одним «тупицей, что работал над проектом до...».Успешные успехи, и прочий биомусор, от которого зависит моё благополучие, ушли бомбить и досюда не дочитают. Поэтому можно начинать говорить о действительно важных вещах. Штука в том, что я понял — я не хочу работать. В смысле, совсем. Не просто «хочу отдохнуть» или «надо придумать, как стать продуктивным» или «найти дело, которое мне по душе». Я не хочу работать вообще, абсолютно, никогда и не над чем. Даже если представить, что попаду в идеальную компанию или открою ее сам — проблема не исчезнет. Искусственной мотивации не хватает, чтобы это изменить. И я бы очень хотел хотеть работать всё время. Но я этим не управляю. В итоге я себя заставляю. Мы так устроены, что когда день за днём встречаем нерешаемую проблему, то придумываем систему ценностей, в которой эта проблема не существует. Вот я начинаю себе врать, что если я не пишу код и не сижу за компом, это не значит, что я не работаю — я типа думаю о задаче. И если я не готов прямо сейчас писать код, значит у меня ещё нет видения, и писать код пока не надо. Это, конечно, жесткий самообман. Компании учитывают факт, что люди не хотят работать пять дней в неделю по восемь часов без перерывов, и борются с этим. С помощью денег, ценностей, и других корпоративных инструментов. Это только ухудшает ситуацию. Я работал, сколько мог, ко мне приходят и говорят — теперь мы платим тебе больше, но и работать ты должен больше. А я не могу. Но я себе в этом не признаюсь, выгода это выгода, и я соглашаюсь. И начинаю работать больше, больше и хуже. От этого я становлюсь несчастным, начинаю ненавидеть профессию и корпорации. А потом они приходят и просят работать ещё больше. И я опять соглашаюсь.Из этого замкнутого круга не выбраться. Я уже не могу себе позволить прожить даже один месяц, не получая хотя бы двести штук. Я не могу делать что-то параллельно. Даже если целый день я нихрена не делаю по работе, совесть не позволяет мне работать над чем-то своим. А самое главное, я уже начинаю верить, что, сука, именно так оно и должно быть. Мои слова на митингах, когда я копирую баранов проджект-менеджеров, гомерически хохоча про себя, потихоньку перестают быть иронией. Я так долго притворялся успешным успехом, что потихоньку становлюсь одним из них.Это ужасно, но только это меня спасает. Знаете, как философы предложили решить дилемму Сизифа — «сдохнуть прямо сейчас или прожить бессмысленную жизнь, полную страданий, и все равно сдохнуть»? Они сказали — «стань успешным успехом и толкай камень с улыбкой на лице». Так что, пацаны, улыбаемся и толкаем.Теперь вместе с arttom я веду подкаст «Мы обречены». Там все как в статьях — максимально напрямую о разработке, индустрии, бабле, собесах. "
    },
    "doc_100": {
        "url": "https://habr.com/ru/post/128278/",
        "title": "С Днем программиста!",
        "text": "Доброго времени суток, уважаемое Хабрасообщество.Во Владивостоке уже утро 13-ого сентября, 256-ого дня года. А это значит, что в России в третий раз наступил День программиста — профессиональный праздник для многих из нас.Я уверен, что почти каждый, читающий эти строчки — в какой-то мере программист. Не имеет значения, работает ли он разработчиком в крупной IT-компании, или просто писал когда-то давно змейку на PROLOG'e, участвует в opensource-проектах или всего лишь их использует.Сегодня хочется пожелать всем вам благодарных пользователей, уважающих клиентов и, разумеется, кода, понятного не только компьютеру, но и людям. Как говорил кто-то из неизвестных авторов, «пишите код, исходя из того, что все программисты, которые будут сопровождать вашу программу, — склонные к насилию психопаты, знающие, где вы живете».Так поднимем же бокалы с пенным напитком во славу «байтов, килобайтов и прочих терабайтов»!С Днем программиста, друзья!"
    }
}